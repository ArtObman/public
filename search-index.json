[{"content":"","date":"0001-01-01","id":0,"permalink":"/docs/welcome/","summary":"","tags":[],"title":"Welcome"},{"content":"","date":"0001-01-01","id":1,"permalink":"/learn/welcome/","summary":"","tags":[],"title":"Welcome"},{"content":" Documentation is for users. - Rob Pike\nThis is the documentation for YAGPDB; this document in its current form is a work in progress, as it is an attempt to move away from the current documentation hosted via GitBook.\nThis page is built with Hugo in conjunction with the Doks theme as an experiment to see if it is a viable alternative.\nOther Resources Support Server If you need help with YAGPDB, please join the support server and ask in the appropriate channel. Any other online forum is not official and should be generally treated as inaccurate.\nQuestions regarding the clarity of this documentation are also welcome, as they help us improve the documentation.\nRemember to first read #information and #faq before asking questions. Our support staff are volunteers, so please be patient when they don\u0026rsquo;t respond in 10-3 seconds, they are probably busy with something else.\nLearning Center If you are new to YAGPDB\u0026rsquo;s custom command system, you might want to check out the Learning Center for a more structured approach to learning how to write custom commands.\nHowever, it is not a replacement for the documentation, so you will need to read both to actually write custom commands.\nSupporting YAGPDB Premium If you want to financially support YAGPDB, you can do so by donating to the project via Patreon. Please note that premium functionality is just a bonus for supporting the project and not a product.\nHelping Out Please do not shy away from helping other users in the support server if you believe you can help them. This is a great way to give back to the community and help the project grow.\nContributing Improving the Bot Additionally, you can contribute to YAGPDB itself by submitting pull requests to its GitHub repository if you are feeling comfortable with Go.\nPlease take a closer look at the contributing guidelines to increase the chances of your pull request being accepted; a good starting point is also to implement highly-upvoted suggestions in the #suggestions channel on the support server.\nWriting Documentation If you feel that contributing to the bot itself is a bit too daunting, you are just as welcome to write and improve this documentation. All you really need is a decent (text) editor of your choice and a good look at our docs contributing guidelines.\n","date":"0001-01-01","id":2,"permalink":"/docs/welcome/introduction/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDocumentation is for users. - Rob Pike\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThis is the documentation for \u003ca href=\"https://yagpdb.xyz\" rel=\"external\"\u003eYAGPDB\u003c/a\u003e; this document in its current form is a work in progress, as\nit is an attempt to move away from the current documentation hosted via GitBook.\u003c/p\u003e\n\u003cp\u003eThis page is built with \u003ca href=\"https://gohugo.io/\" rel=\"external\"\u003eHugo\u003c/a\u003e in conjunction with the \u003ca href=\"https://getdoks.org\" rel=\"external\"\u003eDoks theme\u003c/a\u003e as an\nexperiment to see if it is a viable alternative.\u003c/p\u003e\n\u003ch2 id=\"other-resources\"\u003eOther Resources\u003c/h2\u003e\n\u003ch3 id=\"support-server\"\u003eSupport Server\u003c/h3\u003e\n\u003cp\u003eIf you need help with YAGPDB, please join the \u003ca href=\"https://discord.gg/4udtcA5\" rel=\"external\"\u003esupport server\u003c/a\u003e and ask in the appropriate\nchannel. Any other online forum is not official and should be generally treated as inaccurate.\u003c/p\u003e","tags":[],"title":"Introduction"},{"content":" The first thing you gotta discard, whenever you\u0026rsquo;re learning about something, is your ego. - Luke Smith\nThese are the learning resources for YAGPDB\u0026rsquo;s powerful custom command system. This is your playground!\nWe are going to teach you how to read code as well as how to write it. After all, how can you write if you cannot read? Learn to read, learn to solve problems, and learn to enjoy the process. The community is there to help, as long as you put in some effort yourself.\nThese guides assume that you are already familiar with the custom command UI, so, for instance, you know how to add and edit commands through the control panel. Consult the documentation on custom commands if unsure.\nGeneral Tips As you start your journey with YAGPDB, there are a few things you should keep in mind. These tips will help you avoid common pitfalls and make your developing experience as a whole more enjoyable.\nYou should start writing and testing custom commands on a separate testing server on Discord before adding them to your main server. This avoids any potential issues caused by members interfering with incomplete custom commands.\nThere is no \u0026ldquo;undo\u0026rdquo; button, and kicking YAGPDB won\u0026rsquo;t reset your configuration. Write your changes down first, then you can revert them if something goes wrong.\nNever assume YAGPDB is running 24/7/365: we do our best, but occasional downtime\u0026mdash;for routine maintenance, upstream issues, and otherwise\u0026mdash;is inevitable. Always have a backup plan for when YAGPDB is down.\nDon\u0026rsquo;t try to write a complex custom command right away. Start with something simple, then iteratively improve upon that.\nBe sure to read the reference documentation alongside the lessons here. We will not cover every detail of every function in these lessons, rather we aim to give you the tools necessary to build complex systems.\nOver time, your custom commands may get more lengthy and complex. It is a good idea to write them locally in some text editor or IDE, and then paste them into the web interface. Some popular choices are VSCode, Neovim, and Notepad++.\nPlanning Writing code is (or at least, should be), 90% planning. Investing an extra 10 minutes in carefully planning out a piece of code can save hours of debugging a snarled mess later on. Many novice programmers mistakenly jump right into writing code without a plan, only to end up pouring hours into what should be a relatively short task.\nPlanning first is not only the best approach for novices, but also for skilled programmers. However, if you see a highly experienced programmer in action, you may not see them planning when working on a relatively easy problem. Not seeing them planning does not mean that they are not doing it, but just that they are capable of doing all the planning in their head.\nAs you advance in programming skill, this will eventually happen for you as well—there will be certain problems that you can just solve in your head and write down the solution. Of course, having practiced the skills required to solve harder problems will be key, as your skills will be put to better use if you work on problems at the difficult end of your capabilities.\nPlanning for programming primarily consists of developing the algorithm to solve the relevant problem. Once the algorithm is devised (and tested), translating it to code becomes relatively straightforward. Once you have implemented your program in code, you will need to test—and likely debug—that implementation. Having a clear plan of what the program should do at each step makes the debugging process significantly easier.\n","date":"0001-01-01","id":3,"permalink":"/learn/welcome/introduction/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThe first thing you gotta discard, whenever you\u0026rsquo;re learning about something, is your ego. - Luke Smith\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThese are the learning resources for YAGPDB\u0026rsquo;s powerful custom command system. This is your playground!\u003c/p\u003e\n\u003cp\u003eWe are going to teach you how to read code as well as how to write it. After all, how can you \u003cstrong\u003ewrite\u003c/strong\u003e if you cannot\n\u003cstrong\u003eread\u003c/strong\u003e? Learn to read, learn to solve problems, and learn to enjoy the process. The community is there to help, as\nlong as you put in some effort yourself.\u003c/p\u003e","tags":[],"title":"Introduction"},{"content":" The hardest thing about getting started, is getting started. - Guy Kawasaki\nAdding The Bot Note: Required User Permission\nYou need to have the Manage Server permission to add the bot to your server.\nGo to https://yagpdb.xyz/manage Click on Login with Discord in the top-right corner Authorize the application to know what servers you are in Select the server you want to add the bot to in the dropdown menu First Steps Before doing anything, you should first take a closer look at the Control Panel you just opened. It is the main interface for configuring the bot, and is where you will spend most of your time. Visit a few subpages to get a feel for the navigation and layout.\nAfterward, visit the Commands tab (Core \u0026gt; Command settings) and make sure that the default prefix (-) does not conflict with other bots you may have. Also make sure to enable all commands, such that you can actually use YAGPDB.\nTry some commands! Something like catfact or dadjoke, to get the party going. If those did not work, please read the FAQ on the support server.\nAbout this Documentation This documentation aims to go through all of YAGPDB\u0026rsquo;s features as they appear in the order on the control panel. Reference material, or miscellaneous topics are in their own category as to not bloat things up with unnecessary detail.\nWe recommend reading this document in its entirety, from start to finish, exempting reference material, before or during setup.\n","date":"0001-01-01","id":4,"permalink":"/docs/welcome/getting-started/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThe hardest thing about getting started, is getting started. - Guy Kawasaki\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"adding-the-bot\"\u003eAdding The Bot\u003c/h2\u003e\n\u003cdiv class=\"callout callout-note d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eNote: Required User Permission\u003c/p\u003e\n\r\n      \u003c/div\u003e\r\n    \u003cdiv class=\"callout-body\"\u003e\r\n      \u003cp\u003eYou need to have the \u003cstrong\u003eManage Server\u003c/strong\u003e permission to add the bot to your server.\u003c/p\u003e","tags":[],"title":"Getting Started"},{"content":"YAGPDB provides added functionality to servers which are assigned a premium slot by a user. On the official instance of YAGPDB, these premium slots can be acquired as a perk of being a Patron to Botlabs' YAGPDB.\nBenefits A premium server unlocks the following benefits:\nAutomoderator Increase maximum message triggers per rule from 20 to 100 (MaxMessageTriggersPremium). Increase maximum violation triggers per rule from 20 to 100 (MaxViolationTriggersPremium). Increase maximum total rules across all rulesets from 25 to 150 (MaxTotalRulesPremium). Increase maximum lists from 5 to 25 (MaxListsPremium). Increase maximum rulesets from 10 to 25 (MaxRulesetsPremium). Autorole Enables retroactively applying a role to all members of a server. Bulk Role The bulk role feature becomes available, allowing you to assign or remove a role in bulk. Common Template Scripting Increase max operation count from 1 million to 2.5 million (MaxOpsPremium). Increase max operation count with evalcc command from 200,000 to 500,000 (MaxOpsPremium). Increase max getChannelPins uses in one script execution from 2 to 4 (channel_pins). Increase max sort uses in one script execution from 1 to 3 (sort). Increase max execCC and scheduleUniqueCC uses in one script execution from 1 to 10 (runcc). Increase max getWarnings uses in one script execution from 5 to 10 (cc_moderation). Increase max database interactions in one script execution from 10 to 50 (db_interactions). Increase max high-quantity database interactions (dbCount, dbGetPattern, etc.) in one script execution from 2 to 10 (db_multiple). Increase max database entries from (guild member count)*50 to (guild member count)*500. Custom Commands Enable triggering on edited messages instead of only new messages. Increase max commands which can trigger from a single interaction from 3 to 5 (CCMessageExecLimitPremium). Increase max commands from 100 to 250 (MaxCommandsPremium). Increase max combined response length per cc from 10,000 to 20,000 (MaxCCResponsesLength). Logging Messages Increase length of deleted message history by logs command from 1 hour to 12 hours. Increase length of deleted message history for logs saved by moderation actions from 1 hour to 12 hours. Increase length of deleted message history by undelete command from 1 hour to 12 hours. Personalizer Enables you to change the bot\u0026rsquo;s avatar and banner on your server. Reddit Increase maximum Reddit feeds per guild from 100 to 1000 (GuildMaxFeedsPremium). Rolemenu When a role group is in single mode, remove a user\u0026rsquo;s reactions from other roles when self-assigning a new role in the group. DISABLED ON OFFICIAL INSTANCE Soundboard Increase maximum sounds saved to a guild from 50 to 250 (MaxGuildSoundsPremium). Twitter DISABLED ON OFFICIAL INSTANCE Enable Twitter feeds YouTube Increase maximum YouTube feeds per guild from 50 to 250 (GuildMaxFeedsPremium). Danger: Disabled Features\nSome features enhanced or enabled by premium have been disabled on Botlabs\u0026rsquo; publicly hosted instance, often due to ratelimits with 3rd party APIs YAGPDB relies on.\nAny features marked as DISABLED ON OFFICIAL INSTANCE will not be available if you become a Patron to Botlabs.\nEnabling Premium on a Server Getting a Premium Slot To enable premium on your server, you\u0026rsquo;ll first need to get a premium slot assigned to your account. This is tied to your Discord user ID and cannot be transferred.\nPatreon We have a Patreon campaign where you can pledge to support YAGPDB and get premium slots in return. This is the only way to purchase more than one premium slot.\nPledge the required minimum amount to unlock a premium slot. Link your Patreon account to your Discord account. Wait for up to 5 minutes for YAGPDB to verify your Patreon status. If slot(s) still do not appear, you may need to unlink and relink your Patreon and Discord account again. Discord Store If you prefer not to use Patreon, you can purchase a single premium slot directly from our Discord Store. Simply click on \u0026ldquo;Subscribe\u0026rdquo; and follow the on-screen instructions to complete your purchase\u0026mdash;it may take up to 30 minutes until the slot is available for assignment to a server on the premium page.\nIf you wish to purchase multiple slots, you will need to go through Patreon as explained above.\nFrom a Code A bot owner may generate temporary or permanent premium codes for giveaways, perks, or to manually reward donors who donate through other sources/when the Patreon API is down.\nVisit /premium. Paste your code into the \u0026ldquo;Redeem Code\u0026rdquo; field, and click \u0026ldquo;Redeem Code.\u0026rdquo; You may also use the \u0026ldquo;Check Code\u0026rdquo; button to see a code\u0026rsquo;s validity and expiration without claiming it yourself. Assigning a Slot Once you have obtained a Premium slot, it should appear on the /premium page and be available to be assigned to a server. For each slot, choose a server to assign it to, then click \u0026ldquo;Update Premium Slot.\u0026rdquo;\nYou can assign your premium slots to any server with YAGPDB in it and no existing slot assigned.\nSelf Hosting YAGPDB Do not proceed unless you are hosting your own version of the YAGPDB codebase.\nPremium Sources When hosting YAGPDB yourself, you have access to a few methods to source premium slots to your users.\nPatreon\nConfigure your price per premium slot in premium/patreonpremiumsource/patreonpremiumsource.go \u0026gt; func CalcSlotsForPledge. Configure relevant env variables to connect YAGPDB to your Patreon API. Generating premium codes with the GeneratePremiumCode command.\nSetting the premium.all_guilds_premium env variable to true.\nChanging Limits Functionally raising or lowering limits, both for premium and non-premium servers, is accomplished by altering the source code. Most limits are numerical values that only need to be updated in one location. For most of the above listed numerical limits, the relevant key or constant is named in parenthesis. Ex. (MaxMessageTriggersPremium). It is recommended you familiarize yourself with the codebase before making changes. Find where these keys or constants are defined and alter their values as you wish.\n","date":"0001-01-01","id":5,"permalink":"/docs/welcome/premium/","summary":"\u003cp\u003eYAGPDB provides added functionality to servers which are assigned a premium slot by a user. On the official instance of\nYAGPDB, these premium slots can be acquired as a perk of being a \u003ca href=\"https://www.patreon.com/yagpdb\" rel=\"external\"\u003ePatron\u003c/a\u003e to Botlabs'\nYAGPDB.\u003c/p\u003e\n\u003ch2 id=\"benefits\"\u003eBenefits\u003c/h2\u003e\n\u003cp\u003eA premium server unlocks the following benefits:\u003c/p\u003e\n\u003ch3 id=\"automoderator\"\u003eAutomoderator\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIncrease maximum message triggers per rule from 20 to 100 (\u003ccode\u003eMaxMessageTriggersPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease maximum violation triggers per rule from 20 to 100 (\u003ccode\u003eMaxViolationTriggersPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease maximum total rules across all rulesets from 25 to 150 (\u003ccode\u003eMaxTotalRulesPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease maximum lists from 5 to 25 (\u003ccode\u003eMaxListsPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease maximum rulesets from 10 to 25 (\u003ccode\u003eMaxRulesetsPremium\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"autorole\"\u003eAutorole\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEnables retroactively applying a role to all members of a server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"bulk-role\"\u003eBulk Role\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"/docs/roles/bulk-role/\"\u003ebulk role\u003c/a\u003e feature becomes available, allowing you to assign or remove a role in bulk.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"common-template-scripting\"\u003eCommon Template Scripting\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIncrease max operation count from 1 million to 2.5 million (\u003ccode\u003eMaxOpsPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max operation count with \u003ccode\u003eevalcc\u003c/code\u003e command from 200,000 to 500,000 (\u003ccode\u003eMaxOpsPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max \u003ccode\u003egetChannelPins\u003c/code\u003e uses in one script execution from 2 to 4 (\u003ccode\u003echannel_pins\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max \u003ccode\u003esort\u003c/code\u003e uses in one script execution from 1 to 3 (\u003ccode\u003esort\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max \u003ccode\u003eexecCC\u003c/code\u003e and \u003ccode\u003escheduleUniqueCC\u003c/code\u003e uses in one script execution from 1 to 10 (\u003ccode\u003eruncc\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max \u003ccode\u003egetWarnings\u003c/code\u003e uses in one script execution from 5 to 10 (\u003ccode\u003ecc_moderation\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max database interactions in one script execution from 10 to 50 (\u003ccode\u003edb_interactions\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max high-quantity database interactions (\u003ccode\u003edbCount\u003c/code\u003e, \u003ccode\u003edbGetPattern\u003c/code\u003e, etc.) in one script execution from 2 to\n10 (\u003ccode\u003edb_multiple\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max database entries from \u003ccode\u003e(guild member count)*50\u003c/code\u003e to \u003ccode\u003e(guild member count)*500\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-commands\"\u003eCustom Commands\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEnable triggering on edited messages instead of only new messages.\u003c/li\u003e\n\u003cli\u003eIncrease max commands which can trigger from a single interaction from 3 to 5 (\u003ccode\u003eCCMessageExecLimitPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max commands from 100 to 250 (\u003ccode\u003eMaxCommandsPremium\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIncrease max combined response length per cc from 10,000 to 20,000 (\u003ccode\u003eMaxCCResponsesLength\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"logging-messages\"\u003eLogging Messages\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIncrease length of deleted message history by \u003ccode\u003elogs\u003c/code\u003e command from 1 hour to 12 hours.\u003c/li\u003e\n\u003cli\u003eIncrease length of deleted message history for logs saved by moderation actions from 1 hour to 12 hours.\u003c/li\u003e\n\u003cli\u003eIncrease length of deleted message history by \u003ccode\u003eundelete\u003c/code\u003e command from 1 hour to 12 hours.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"personalizer\"\u003ePersonalizer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEnables you to change the bot\u0026rsquo;s avatar and banner on your server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-fc479668d5cff121079e9f35fdac953a-lightbox\"\u003e\n\u003cimg alt=\"personalizer settings page\" height=\"726\" id=\"h-rh-i-fc479668d5cff121079e9f35fdac953a\" src=\"/docs/welcome/personalizer.png\" width=\"1456\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-fc479668d5cff121079e9f35fdac953a-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"personalizer settings page\" height=\"726\" id=\"h-rh-i-fc479668d5cff121079e9f35fdac953a\" src=\"/docs/welcome/personalizer.png\" width=\"1456\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e","tags":[],"title":"Premium"},{"content":"","date":"0001-01-01","id":6,"permalink":"/learn/beginner/","summary":"","tags":[],"title":"Beginner"},{"content":"","date":"0001-01-01","id":7,"permalink":"/docs/core/","summary":"","tags":[],"title":"Core"},{"content":"This page is relatively simple, yet very powerful. An overview of the settings follows.\nRead Access Allow people with the following roles The very top option is to allow people with certain roles read access to the control panel. Simply open the drop-down select menu and select the roles you wish to grant read access.\nAllow all members read access This switch is fairly straight forward, when enabled any and all members of your server are granted read access. For reference, this is enabled on the support server, but it may be a good idea to keep it disabled.\nAllow users not part of your server read access Taking the above one step further, this toggle lets any and all users, even not logged in ones, to view your control panel. In general, it is a very good idea to have this disabled, unless you have good reasons not to. For the record, this option is enabled on the support server\u0026rsquo;s control panel.\nWrite Access Quite simple, but moderately dangerous. Anyone with these roles can edit anything on your control panel, so do handle this with care. To make things easier to configure, members with Manage Server permissions can always edit the control panel.\n","date":"0001-01-01","id":8,"permalink":"/docs/core/control-panel-access/","summary":"\u003cp\u003eThis page is relatively simple, yet very powerful. An overview of the settings follows.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-7b40cb00a665026846d80b2d1a2df399-lightbox\"\u003e\n\u003cimg alt=\"Overview of the control panel access configuration page.\" height=\"996\" id=\"h-rh-i-7b40cb00a665026846d80b2d1a2df399\" src=\"/docs/core/control_panel_access.png\" width=\"1688\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-7b40cb00a665026846d80b2d1a2df399-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of the control panel access configuration page.\" height=\"996\" id=\"h-rh-i-7b40cb00a665026846d80b2d1a2df399\" src=\"/docs/core/control_panel_access.png\" width=\"1688\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ch3 id=\"read-access\"\u003eRead Access\u003c/h3\u003e\n\u003ch4 id=\"allow-people-with-the-following-roles\"\u003eAllow people with the following roles\u003c/h4\u003e\n\u003cp\u003eThe very top option is to allow people with certain roles read access to the control panel. Simply open the drop-down\nselect menu and select the roles you wish to grant read access.\u003c/p\u003e","tags":[],"title":"Control Panel Access"},{"content":"In this chapter, we will go over two ways to output text from a custom command: using the response, and later on using template actions.\nResponse If you paste text into the response field of a custom command, the bot will respond with the same text when the command is triggered.\nFor instance, create a new custom command with the following response:\nHello World. This will make the bot respond \u0026ldquo;Hello World.\u0026rdquo; in a new message when the command is triggered, as shown below.\nTemplate Actions Actions As Output Earlier, we just made the bot respond with some static text. However, often we want our custom command to behave differently depending on input. This is where template actions come in.\nTemplate actions are a way to dynamically change the output depending on various things, such as the user who triggered the command, the arguments passed to the command, or even the current time.\nThe bot evaluates the template action and replaces it with the result of the evaluation. For instance, the following code will make the bot respond with the server name when the command is triggered:\n{{ .Guild.Name }} As you can see, we use double curly braces ({{ and }}) to denote a template action. The braces are essential: without these, the bot would simply respond with the text verbatim. A common pitfall we often see in the support channels is something like the following:\nHello .User.Username! If we want to bring this a step further, we can combine the plain response with some template actions to make it a bit more nicer-looking:\nHey there {{ .User.Username }}! Welcome to {{ .Guild.Name }}! Play around with this a little bit and see what you can come up with. Take a look at the data reference documentation to see what other data you can access.\nActions for Functions Custom command functions allow you to perform calculations, add or remove roles to/from a user, send messages to a channel, and lots more! The syntax is a little different to what you might be used to; All arguments to a function follow the function name itself, like so:\n{{ add 5 3 }} Some functions also return the result of their operation, which can be passed as arguments to other functions. For example:\n{{ mult 5 (add 3 2) }} Just like in math, the expression inside the parentheses is evaluated first, and then that result is used in the outer expression.\nObviously these are both quite contrived examples. We provide a list of all available functions in the functions reference documentation. Try to experiment around with some of these functions to get a feel for how they\u0026rsquo;re used and what they do.\nActions for Control Flow You can also use actions to determine whether some of your code is executed depending on a condition, along with some more complex control flows. We will go over these in more detail in a later chapter.\n","date":"0001-01-01","id":9,"permalink":"/learn/beginner/simple-responses/","summary":"\u003cp\u003eIn this chapter, we will go over two ways to output text from a custom command: using the \u003cem\u003eresponse\u003c/em\u003e, and later on using\n\u003cem\u003etemplate actions\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"response\"\u003eResponse\u003c/h2\u003e\n\u003cp\u003eIf you paste text into the response field of a custom command, the bot will respond with the same text when the command\nis triggered.\u003c/p\u003e\n\u003cp\u003eFor instance, create a new custom command with the following response:\u003c/p\u003e\n\u003cdiv class=\"expressive-code\"\u003e\n      \u003cfigure class=\"frame not-content\"\u003e\n        \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eHello World.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n        \u003c/figure\u003e\n      \u003c/figure\u003e\n    \u003c/div\u003e\u003cp\u003eThis will make the bot respond \u0026ldquo;Hello World.\u0026rdquo; in a new message when the command is triggered, as shown below.\u003c/p\u003e","tags":[],"title":"Simple Responses"},{"content":"This page is the analogue of the audit log built in to Discord for YAGPDB settings and summarizes recent edits on the control panel, listing the time, action, and responsible user for each. It is useful to audit who may be responsible if things go haywire, but other than that this page is unlikely to be of use.\nPlease do not be confused if you see changes from the user destroy_0001 (ID 598900258579283976), as that is the bot developer and he may at times need to change certain settings to ensure proper operation.\n","date":"0001-01-01","id":10,"permalink":"/docs/core/control-panel-logs/","summary":"\u003cp\u003eThis page is the analogue of the audit log built in to Discord for YAGPDB settings and summarizes recent edits on the\ncontrol panel, listing the time, action, and responsible user for each. It is useful to audit who may be responsible if\nthings go haywire, but other than that this page is unlikely to be of use.\u003c/p\u003e\n\u003cp\u003ePlease do not be confused if you see changes from the user \u003ccode\u003edestroy_0001\u003c/code\u003e (ID \u003ccode\u003e598900258579283976\u003c/code\u003e), as that is the bot\ndeveloper and he may at times need to change certain settings to ensure proper operation.\u003c/p\u003e","tags":[],"title":"Control Panel Logs"},{"content":"In this chapter, we will overview how to store data in variables and the basic data types available, which include strings, numbers, and booleans.\nVariables Before we go over data types, we will cover how to store data and refer to it later. We can do this by using variables. A variable is a way to store a value and give it a name, to which you can refer back to later.\nIn Custom Commands, you define a variable by starting with a $, its name, and the assignment operator :=. To illustrate this, consider the following example:\n{{ $name := \u0026#34;Alice\u0026#34; }} {{ $age := 42 }} {{ $isCool := true }} {{ $name }}, aged {{ $age }}, is cool: {{ $isCool }} Later on, we may wish to reassign a new value to a variable. We can do this by using the re-assignment operator =. When and why this becomes necessary will be discussed in a later chapter.\nTip: Troubleshooting Data Types\nWhen debugging your code, you might have to figure out the type of a certain variable. You can do this by using the printf function with the %T format verb, like so:\n{{ $name := \u0026#34;Alice\u0026#34; }} {{ printf \u0026#34;%T\u0026#34; $name }} Data Types If you\u0026rsquo;re completely new to programming, you might not know what a data type is. You can think of a data type as a way to distinguish between different kinds of things. As a real-life analogy, you can separate food into several categories, such as fruits, vegetables, and meat. Each category is in that sense its own data type.\nIn programming, we have similar categories, such as numbers, strings, and booleans (true / false values). Each of these categories has its own set of operations that can be performed on them. For instance, you can add two numbers together, but you cannot add two strings together (at least not in the way you might expect).\nStrings A string is a sequence of zero or more characters. You can generally think of it as a word or a sentence. In the bot\u0026rsquo;s template actions, you can create a string by enclosing some text in double quotes (\u0026quot;). For instance, \u0026quot;Hello, world!\u0026quot; is a string. We call those double-quoted strings.\nNow, here we might run into a problem quite quickly: what if we want to include a double quote in our string? We can\u0026rsquo;t just write \u0026quot;Peter said \u0026quot;Hello, world!\u0026quot;\u0026quot;, as the bot would think the string ends at the quotes before Hello and not know that we want them included in the string. To solve this, we must escape the double quote by adding a backslash (\\) in front of it. This tells the bot that the double quote is not the end of the string. In other words, \u0026quot;Peter said \\\u0026quot;Hello, world!\\\u0026quot;\u0026quot; would yield the expected result.\nTo insert a newline (you would press Enter on your keyboard), you can use the escape sequence \\n. For example the string \u0026quot;Hello\\nWorld!\u0026quot; would result in the following output:\nHello World! For a full list of escape sequences, you can refer to the Go documentation. Please note that not all escape sequences are supported by Discord.\nRaw String Literals It should become relatively clear that a lot of new lines and other special characters can make a quoted string quite hard to read. To make this easier, you can use backticks (`) to create a raw string literal. A raw string literal does not attempt to interpret its contents in any way, and will simply contain the text between the opening ` and closing ` unmodified\u0026mdash;we cannot even escape a backtick to include one in the string, but we will later cover functions that solve this special case.\n`This is my cool multiline string! Look at all the new lines!` Numbers Numeric values can be represented in two ways, using integers (whole numbers) and floating-point numbers (numbers with a decimal point). In the bot\u0026rsquo;s template actions, you can create an integer by simply writing a whole number, such as 5. For floating-point numbers, you can add a decimal point, like so: 5.0.\nIntegers In the bot\u0026rsquo;s template actions, integers are represented as 64-bit signed integers. This means that you can store numbers from -9223372036854775808 to 9223372036854775807. If you try to store a number outside this range, the bot will return an error.\nThe bot accepts several notations for integers:\nAs a base-10 number, such as 42. This will mean what you think, the number forty-two. As a base-16 number, such as 0x2A. This is the hexadecimal representation of the number forty-two. As a base-8 number, such as 0o52. This is the octal representation of the number forty-two. As a base-2 number, such as 0b101010. This is the binary representation of the number forty-two. Floating-Point Numbers We represent floating-point numbers as 64-bit IEEE-754 floating-point numbers. This means that you can store numbers with a precision of about 15 decimal places. If you try to store a number with more precision, the bot will round it to the nearest representable number.\nThere are a lot of ways to define a floating-point number, but the most common way is to use the decimal point, such as 3.14. For a full list of ways to define a floating-point number, you can refer to the Go documentation.\nBooleans A boolean is a data type that can only have one of two values: true or false. Booleans are used to represent the truth value of an expression. For instance, 5 \u0026gt; 3 would evaluate to true, while 5 \u0026lt; 3 would evaluate to false.\nYou can think of it as a light switch: it can either be on (true) or off (false). Booleans are often used in conditional statements, such as if statements, to determine which branch of the code should be executed.\n","date":"0001-01-01","id":11,"permalink":"/learn/beginner/variables-and-data-types/","summary":"\u003cp\u003eIn this chapter, we will overview how to store data in variables and the basic data types available, which include\n\u003ca href=\"/learn/beginner/variables-and-data-types/#strings\"\u003estrings\u003c/a\u003e, \u003ca href=\"/learn/beginner/variables-and-data-types/#numbers\"\u003enumbers\u003c/a\u003e, and \u003ca href=\"/learn/beginner/variables-and-data-types/#booleans\"\u003ebooleans\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"variables\"\u003eVariables\u003c/h2\u003e\n\u003cp\u003eBefore we go over data types, we will cover how to store data and refer to it later. We can do this by using variables.\nA variable is a way to store a value and give it a name, to which you can refer back to later.\u003c/p\u003e\n\u003cp\u003eIn Custom Commands, you define a variable by starting with a \u003ccode\u003e$\u003c/code\u003e, its name, and the assignment operator \u003ccode\u003e:=\u003c/code\u003e. To\nillustrate this, consider the following example:\u003c/p\u003e","tags":[],"title":"Variables and Data Types"},{"content":"Fine-grained control over all of YAGPDB\u0026rsquo;s inbuild commands.\nOverview Command overrides allow you to restrict access to YAGPDB\u0026rsquo;s inbuilt commands and optionally configure intervals after which the command trigger and response will be autodeleted. The key features of the page are as follows:\n1 Command prefix, default - 2 All commands enabled setting 3 Required roles 4 Ignored roles 5 Autodelete trigger interval 6 Autodelete response interval 7 Command overrides 8 Channel overrides tabs\nThe prefix (1) is a short sequence of characters that trigger YAGPDB commands. By default, the prefix is -. Thus, for instance, the remindme command is invoked by prefixing the command name with a hyphen: -remindme .... If the prefix was instead ?, one would use ?remindme ..., and so on.\nSlash commands are always triggered using the / character and hence do not depend on the prefix configured here.\nTip: Mention as a Command Prefix\nIn addition to the command prefix, you can trigger YAGPDB commands by pinging the bot at the start of your message. This is helpful if you forget your prefix, as sending @YAGPDB.xyz prefix will recall it.\nCaution: Flags and Switches\nFlags and switches are not affected by your prefix setting.\nFor example, if your prefix is ?, a command usage with flags and/or switches is as follows:\n?wouldyourather -raw where the raw switch is still spelled -raw, not ?raw.\nCommand Override Priority Command overrides are considered in the following order, with settings applied at later steps overwriting earlier ones:\nIf the All commands enabled setting is not checked, all commands are initially disabled (otherwise enabled.) General restrictions configured in Global Settings are then applied, base restrictions before command-specific restrictions. Channel-specific restrictions (Override #1, Override #2, \u0026hellip;) are applied analogously. The order above trickles down from least specific to most specific, prioritizing the most specific setting\u0026mdash;an analogy for developers would be CSS\u0026rsquo;s cascading rules.\nThough perhaps confusing at first, the priority order above is designed to make common configurations trivial. For instance, to disable all but a specific command\u0026mdash;say the remindme command\u0026mdash;one can simply disable the All commands enabled option and then create a command override that enables only remindme. This is possible as command overrides are applied after the All commands enabled setting.\nOptions Common Options These options are common across all three sub-settings: global settings, channel overrides, and individual command overrides.\nRequired and Ignored Roles Clicking on either of these options (3,4) opens a drop-down menu with all the roles present on your server. Select as many as you wish. YAGPDB will then either require all members to have any of these roles in order to run commands, or completely ignore members with any of the ignored roles, server admins and owners included.\nNote: Priority of Ignored vs. Required Roles\nYAGPDB was raised well and honors a \u0026ldquo;no\u0026rdquo; when told \u0026ldquo;no\u0026rdquo;. In other words, ignored roles take precedence over required roles.\nAutodelete Trigger / Response Interval This setting makes YAGPDB automatically delete the triggering message and/or its response after the configured duration has passed. To activate it, make sure to click the checkbox next to the respective input field (5,6).\nIf 10 seconds are not enough, or too long, feel free to adjust as you see fit; the intervals need not be equal.\nSlash command response always ephemeral Toggling this setting on will make YAGPDB always respond to slash commands with an ephemeral message. This means that only the user who triggered the command will be able to see the response.\nChannel Override Options These options are only available for channel overrides (8). To add a new one, head to the New channel override tab on the command settings page.\nYou must select at least one channel or category; otherwise, the settings of the override will not be applied.\nChannels With this setting, you can select individual channels to apply the override to. Select as many as you wish.\nYou find this setting in the top-left corner of any channel override.\nCategories This setting will apply the override to all channels (including future ones) in the selected category.\nYou find this setting in the top-right corner of any channel override, adjacent to its channels setting.\nCommand Override Options These options are only available for individual command overrides (7). To add a new one, go to either your global settings or any channel override and click on New command override.\nCommands This setting allows you to select specific commands to apply the command override to. Select as many as you wish to apply an override to. You cannot have two (or more) overrides for the same command in the same tab, i.e. global settings or a specific channel override.\nEnable Specified Commands Toggling this option simply tells YAGPDB whether the commands you selected are enabled or disabled. This allows you to disable some specific commands, which may be useful if \u0026ndash; for example \u0026ndash; you have created a custom command that completely replaces an inbuilt one.\n","date":"0001-01-01","id":12,"permalink":"/docs/core/command-settings/","summary":"\u003cp\u003eFine-grained control over all of YAGPDB\u0026rsquo;s inbuild commands.\u003c/p\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eCommand overrides allow you to restrict access to YAGPDB\u0026rsquo;s inbuilt commands and optionally configure intervals after\nwhich the command trigger and response will be autodeleted. The key features of the page are as follows:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-101a249938de168386ec3e5983bc2da8-lightbox\"\u003e\n\u003cimg alt=\"Overview of the Command Settings page.\" height=\"996\" id=\"h-rh-i-101a249938de168386ec3e5983bc2da8\" src=\"/docs/core/command_settings_overview.png\" width=\"1688\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-101a249938de168386ec3e5983bc2da8-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of the Command Settings page.\" height=\"996\" id=\"h-rh-i-101a249938de168386ec3e5983bc2da8\" src=\"/docs/core/command_settings_overview.png\" width=\"1688\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ccenter\u003e\n\u003cp\u003e\u003cstrong\u003e1\u003c/strong\u003e Command prefix, default \u003ccode\u003e-\u003c/code\u003e \u003cstrong\u003e2\u003c/strong\u003e \u003cem\u003eAll commands enabled\u003c/em\u003e setting \u003cstrong\u003e3\u003c/strong\u003e Required roles \u003cstrong\u003e4\u003c/strong\u003e Ignored roles\n\u003cstrong\u003e5\u003c/strong\u003e Autodelete trigger interval \u003cstrong\u003e6\u003c/strong\u003e Autodelete response interval \u003cstrong\u003e7\u003c/strong\u003e Command overrides \u003cstrong\u003e8\u003c/strong\u003e Channel overrides tabs\u003c/p\u003e","tags":[],"title":"Command Settings"},{"content":"Until now, we have just written some linear code that executes from top to bottom. However, in real-world applications, we often need to execute different code depending on certain states of our program. This is where control flow comes into play.\nYou already have an intuitive understanding of control flow. For instance, when you cross the street, you look left and right to see if any cars are coming. If there are no cars, you cross the street. Otherwise (\u0026ldquo;else\u0026rdquo;), you wait until the incoming cars have passed, then check again. This is a simple example of a decision-making process.\nIf Statements The most basic form of control flow is the if statement. An if statement checks a condition and executes a block of code if the condition is true. If the condition is false, the block of code is skipped.\n{{ if eq 5 5 }} {{/* It is conventional, though not required, to consistently indent inner blocks of code with spaces or tabs. */}} Five is equal to five! {{ end }} We use the eq comparison function to check whether its given arguments are equal; we will enumerate all comparison functions in a later section on this page.\nWe can expand this to execute a different block of code if the condition is false by using an else block:\n{{ if eq 5 3 }} Five is equal to three! {{ else }} Five is not equal to three! {{ end }} This can be further expanded to check multiple conditions using else if, which are checked sequentially until one of them is true:\n{{ if eq 5 3 }} Five is equal to three! {{ else if eq 5 5 }} Five is equal to five! {{ else }} Five is not equal to three or five! {{ end }} Note: Truthiness\nThe condition of an if statement need not be a boolean: in general, an if statement will trigger if the condition is truthy: that is, not empty or zero. (Conversely, empty and zero values are falsy.)\nFor example, consider how you would check whether a string $s is empty. One way is to explicitly compare the length of the string to zero using if gt (len $s) 0, but since empty strings are falsy, the more idiomatic solution is to simply write if $s, like so:\n{{ $s := \u0026#34;\u0026#34; }} {{ if $s }} not empty {{ else }} empty {{ end }} Guard Clauses As your code grows, you may find yourself nesting if statements inside each other. This can lead to code that is hard to read and understand. One way to avoid this is to use guard clauses. A guard clause is an if statement that checks for a condition and returns early via the {{ return }} action. Therefore, the condition we checked in the earlier if/else construct must be negated.\nRewriting the second example to use these guard clauses yields the following code:\n{{ if ne 5 3 }} Five is not equal to three! {{ return }} {{ end }} Five is equal to three! Although this example may be a bit contrived, guard clauses can help you avoid deeply nested code and make your code easier to read, especially when you come back to it at a later date.\nComparison Actions In programming, we can make decisions by comparing values to each other. We can compare numbers, strings, and other data types. The result of a comparison is a boolean value, which is either true or false. Normally, comparisons are binary operators; however, in custom commands, we use functions to compare values.\nWarning: Comparing Across Types\nJust like you cannot quite compare apples and oranges, you cannot compare values of different types. For instance, you cannot compare a number to a string. The bot will throw an error if you try to do so, you will have to convert either of them to the other type first.\nWe provide the following comparison functions in custom commands:\neq (equals ==) ne (not equals !=) lt (less than \u0026lt;) le (less than or equal to \u0026lt;=) gt (greater than \u0026gt;) ge (greater than or equal to \u0026gt;=) These functions can only compare basic data types as introduced in Variables and Data Types. Strings are compared on a byte-by-byte basis. Please refer to the functions documentation for the syntax of these functions.\nBlocks And Scope In the previous chapter, we introduced the concept of variables. Variables are used to store values and give them a name. In programming, variables have a scope, which defines where in the code the variable can be accessed. Think of each scope as a \u0026ldquo;container\u0026rdquo; for things inside it.\nOften, you will want to have a variable available across multiple scopes. In custom commands, the variable is accessible in the scope in which it was defined, as well as all nested scopes within. Let us assume that we want to assign a coolness value, which should be true if the user\u0026rsquo;s name is \u0026ldquo;alice\u0026rdquo;. We can achieve this by defining a variable in the outer scope and re-assigning, using the = operator, its value in the inner scope:\n{{ $isCool := false }} {{ if eq .User.Username \u0026#34;alice\u0026#34; }} {{ $isCool = true }} {{ end }} Are you cool? {{ $isCool }} It is considered good practice to define variables in the smallest scope possible. This makes your code easier to read and understand, as you do not have to search through the entire codebase to find where a variable was defined.\nWarning: Definition and Reassignment\nIn custom commands, you use := to define a variable, and = to reassign a variable. The bot will not throw an error if you try to re-define a variable using :=. Rather, it will define a new variable, effectively overwriting the existing variable, but only within that scope\u0026mdash;the existing variable is untouched in the outer scope.\nDanger: Unexpected EOF\nThe following error appears when you are missing an {{ end }} action.\nEach control structure must have a corresponding {{ end }} action. If you forget to do so, YAGPDB will not know where your control structure terminates and hence issues the above error.\nTo fix this error, examine each {{ if ... }} in your program and verify that each has a matching {{ end }}. (The same applies to other control structures introduced in future chapters, such as {{ range ... }}.)\nIf you are familiar with C-family programming languages, this error is analogous to forgetting the closing } of a block of code.\nWith Blocks Just like the if action, with runs a block of code if the given expression is truthy. The only difference is that with overwrites the dot . with the expression if it is truthy.\nFor instance, the following program\n{{ $msg := \u0026#34;I \u0026lt;3 the YAGPDB documentation!\u0026#34; }} {{ with reFind `\\d+` $msg }} pattern found in text; the dot {{ printf \u0026#34;%q\u0026#34; . }} contains the match {{ else }} pattern did not match {{ end }} outputs\npattern found in text; the dot \u0026#34;3\u0026#34; contains the match Note that the dot . has been set to \u0026quot;3\u0026quot;—the result of reFind. See if you can change the text stored in $msg so that the program hits the else branch instead.\nWarning: Readability of with Blocks\nBe careful not to overuse with blocks, as they can make your code difficult to follow. In general, prefer using a normal if conditional and only use with if it improves readability; do not use it just to shorten code.\nExercises Write a Custom Command to determine if the number stored in a variable $a is even or odd and print Number is Even or Number is Odd depending on the case. Verify the output for the following values of $a: 1, 9, 0, 10021, -5.\nPredict the output of the following code snippets. If there is an error in the snippet, what is the cause of the error, and how can it be fixed? Also note down potential improvements to the code that make it easier to follow.\n{{ $num1 := 10 }} {{ if $num1 }} {{ num1 := 6 }} {{ $num1 }} {{ end }} {{ if not (mod $num1 3) }} {{ $num1 }} {{ end }} {{ $num1 }} {{ $name := \u0026#34;John\u0026#34; }} {{ if eq $name \u0026#34;John\u0026#34; }} {{ $familyName := \u0026#34;Walters\u0026#34; }} {{ end }} My name is: {{ $name }} {{ $familyName }} {{ $mood := \u0026#34;happy\u0026#34; }} {{ if gt $mood \u0026#34;Sad\u0026#34; }} Be {{ $mood }}! {{ else }} Do not be {{ $mood }}! {{ end }} ","date":"0001-01-01","id":13,"permalink":"/learn/beginner/conditional-branching/","summary":"\u003cp\u003eUntil now, we have just written some linear code that executes from top to bottom. However, in real-world applications,\nwe often need to execute different code depending on certain states of our program. This is where \u003cem\u003econtrol flow\u003c/em\u003e comes\ninto play.\u003c/p\u003e\n\u003cp\u003eYou already have an intuitive understanding of control flow. For instance, when you cross the street, you look left and\nright to see if any cars are coming. If there are no cars, you cross the street. Otherwise (\u0026ldquo;else\u0026rdquo;), you wait until the\nincoming cars have passed, then check again. This is a simple example of a decision-making process.\u003c/p\u003e","tags":[],"title":"Conditional Branching"},{"content":"List of all available commands offered by YAGPDB and their syntax.\nLegend \u0026lt;required arg\u0026gt; [optional arg]\nText arguments containing multiple words needs be to put in quotes (\u0026ldquo;arg here\u0026rdquo;) or code ticks (arg here) if it\u0026rsquo;s not the last argument and there\u0026rsquo;s more than 1 text argument.\nFor example with the poll command if you want the question to have multiple words: -poll \u0026quot;whats your favorite color\u0026quot; red blue green2\nGeneral ℹ️ Help Aliases: commands/h/how/command\nShows help about all or one specific command\nUsage:\nHelp [command:Text] Info Responds with bot information\nUsage:\nInfo Invite Responds with bot invite link\nUsage:\nInvite Tools \u0026amp; Utilities 🔨 Prefix Shows command prefix of the current server, or the specified server\nUsage:\nPrefix [Server-ID:Whole number] Calc Aliases: c/calculate\nCalculator 2+2=5\nUsage:\nCalc \u0026lt;Expression:Text\u0026gt; CustomEmbed Aliases: ce\nCreates an embed from what you give it in JSON form: https://help.yagpdb.xyz/docs/refehttps://help.yagpdb.xyz/docs/reference/custom-embeds/#the-customembed-command Example: -ce {\u0026quot;title\u0026quot;: \u0026quot;hello\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;wew\u0026quot;}\nUsage:\nCustomEmbed \u0026lt;Json:Text\u0026gt; SimpleEmbed Aliases: se\nA more simpler version of CustomEmbed, controlled completely using switches. You can edit existing messages by supplying the -message flag.\nUsage:\nSimpleEmbed [-channel channel:Channel - Optional channel to send in] [-message message:Whole number - Optional message ID to edit] [-content content:Text - Text content for the message] [-title title:Text] [-desc desc:Text - Text in the \u0026#39;description\u0026#39; field] [-color color:Text - Either hex code or name] [-url url:Text - Url of this embed] [-thumbnail thumbnail:Text - Url to a thumbnail] [-image image:Text - Url to an image] [-author author:Text - The text in the \u0026#39;author\u0026#39; field] [-authoricon authoricon:Text - Url to a icon for the \u0026#39;author\u0026#39; field] [-authorurl authorurl:Text - Url of the \u0026#39;author\u0026#39; field] [-footer footer:Text - Text content for the footer] [-footericon footericon:Text - Url to a icon for the \u0026#39;footer\u0026#39; field] CurrentTime Aliases: ctime/gettime\nShows current time in different timezones. Available timezones\nUsage:\nCurrentTime \u0026lt;Offset:Whole number\u0026gt; CurrentTime \u0026lt;Zone:Text\u0026gt; CurrentTime ListRoles List roles, their id\u0026rsquo;s, color hex code, and \u0026lsquo;mention everyone\u0026rsquo; perms (useful if you wanna double check to make sure you didn\u0026rsquo;t give anyone mention everyone perms that shouldn\u0026rsquo;t have it)\nUsage:\nListRoles [-nomanaged nomanaged:Switch - Don\u0026#39;t list managed/bot roles] Poll Create very simple reaction poll. Example: poll \u0026quot;favorite color?\u0026quot; blue red pink\nUsage:\nPoll \u0026lt;Topic:Text - Description of the poll\u0026gt; \u0026lt;Option1:Text\u0026gt; \u0026lt;Option2:Text\u0026gt; [Option3:Text] [Option4:Text] [Option5:Text] [Option6:Text] [Option7:Text] [Option8:Text] [Option9:Text] [Option10:Text] Undelete Aliases: ud\nViews the first 10 recent deleted messages. By default, only the current user\u0026rsquo;s deleted messages will show. You can use the -a flag to view all users delete messages, or -u to view a specified user\u0026rsquo;s deleted messages. Both -a and -u require Manage Messages permission. Note: -u overrides -a meaning even though -a might\u0026rsquo;ve been specified along with -u only messages from the user provided using -u will be shown.\nUsage:\nUndelete [-a a:Switch - from all users] [-u u:Mention/ID - from a specific user] [-channel channel:Channel - Optional target channel] Stats Shows server stats (if public stats are enabled)\nUsage:\nStats CustomCommands Aliases: cc\nShows a custom command specified by id, trigger, or name, or lists them all\nUsage:\nCustomCommands \u0026lt;ID:Whole number\u0026gt; CustomCommands \u0026lt;Name-Or-Trigger:Text\u0026gt; CustomCommands [-file file:Switch - Send responses in file] [-color color:Switch - Use syntax highlighting (Go)] [-raw raw:Switch - Force raw output] Evalcc executes custom command code (up to 1k characters)\nUsage:\nEvalcc \u0026lt;code:Text\u0026gt; Logs Aliases: log\nCreates a log of the last messages in the current channel. This includes deleted messages within an hour (or 12 hours for premium servers)\nUsage:\nLogs [Count:Whole number] [-channel channel:Channel - Optional channel to log instead] Whois Aliases: whoami\nShows information about a user\nUsage:\nWhois [User:Member] Nicknames Aliases: nn\nShows past nicknames of a user.\nUsage:\nNicknames [User:User] Usernames Aliases: unames/un\nShows past usernames of a user.\nUsage:\nUsernames [User:User] ResetPastNames Reset your past usernames/nicknames.\nUsage:\nResetPastNames Remindme Aliases: remind/reminder\nSchedules a reminder, example: \u0026lsquo;remindme 1h30min are you still alive?\u0026rsquo;\nUsage:\nRemindme \u0026lt;Time:Duration\u0026gt; \u0026lt;Message:Text\u0026gt; [-channel channel:Channel] Reminders Lists your active reminders in the server, use in DM to see all your reminders\nUsage:\nReminders CReminders Aliases: channelreminders\nLists reminders in channel, only users with \u0026lsquo;manage channel\u0026rsquo; permissions can use this.\nUsage:\nCReminders DelReminder Aliases: rmreminder\nDeletes a reminder. You can delete reminders from other users provided you are running this command in the same guild the reminder was created in and have the Manage Channel permission in the channel the reminder was created in.\nUsage:\nDelReminder [ID:Whole number] [-a a:Switch - All] Role Toggle a role on yourself or list all available roles, they have to be set up in the control panel first, under \u0026lsquo;rolecommands\u0026rsquo;\nUsage:\nRole [Role:Text] settimezone Aliases: setz/tzset\nSets your timezone, used for various purposes such as auto conversion. Give it your country.\nUsage:\nsettimezone [Timezone:Text] [-u u:Switch - Display current] [-d d:Switch - Delete TZ record] ToggleTimeConversion Aliases: toggletconv/ttc\nToggles automatic time conversion for people with registered timezones (setz) in this channel, it\u0026rsquo;s on by default, toggle all channels by giving it all\nUsage:\nToggleTimeConversion [flags:Text] Fun 🎉 Define Aliases: df/define/urban/urbandictionary\nLook up an urban dictionary definition, default paginated view.\nUsage:\nDefine \u0026lt;Topic:Text\u0026gt; [-raw raw:Switch - Raw output] Weather Aliases: w\nShows the weather somewhere\nUsage:\nWeather \u0026lt;Where:Text\u0026gt; Topic Generates a conversation topic to help chat get moving.\nUsage:\nTopic CatFact Aliases: cf/cat/catfacts\nCat Facts\nUsage:\nCatFact DadJoke Generates a dad joke using the API from icanhazdadjoke.\nUsage:\nDadJoke DogFact Aliases: dog/dogfacts\nDog Facts\nUsage:\nDogFact Advice Don\u0026rsquo;t be afraid to ask for advice!\nUsage:\nAdvice [What:Text] Throw Throwing things is cool.\nUsage:\nThrow [Target:User] Roll Roll dices, specify nothing for 6 sides, specify a number for max sides, or rpg dice syntax. Example: -roll 2d6\nUsage:\nRoll \u0026lt;Sides:Whole number\u0026gt; Roll \u0026lt;RPG-Dice:Text\u0026gt; Roll WouldYouRather Aliases: wyr\nGet presented with 2 options.\nUsage:\nWouldYouRather [-raw raw:Switch - Raw output] Xkcd An xkcd comic, by default returns random comic strip\nUsage:\nXkcd [Comic-number:Whole number] [-l l:Switch - Latest comic] HowLongToBeat Aliases: hltb\nGame information based on query from howlongtobeat.com. Results are sorted by popularity, it\u0026rsquo;s their default. Without -p returns the first result. Switch -p gives paginated output using the Jaro-Winkler similarity metric sorting max 20 results.\nUsage:\nHowLongToBeat \u0026lt;Game-Title:Text\u0026gt; [-c c:Switch - Compact output] [-p p:Switch - Paginated output] Inspire Aliases: insp\nShows \u0026lsquo;inspirational\u0026rsquo; quotes from inspirobot.me\nUsage:\nInspire [Season:Text] [-mindfulness mindfulness:Switch - Generates Mindful Quotes!] Forex Aliases: Money\n💱 convert value from one currency to another.\nUsage:\nForex \u0026lt;Amount:Decimal number\u0026gt; \u0026lt;From:Text\u0026gt; \u0026lt;To:Text\u0026gt; Roast Aliases: insult\nSends a random roast\nUsage:\nRoast [Target:User] 8ball Ask the magic 8ball a question\nUsage:\n8ball [Question:Text] dictionary Aliases: owldict/owl/dict\nGet the definition of an English word using dictionaryapi.dev\nUsage:\ndictionary \u0026lt;Query:Text - Word to search for\u0026gt; TakeRep Aliases: -/tr/trep/-rep\nTakes away rep from someone\nUsage:\nTakeRep \u0026lt;User:User\u0026gt; [Num:Whole number] GiveRep Aliases: +/gr/grep/+rep\nGives rep to someone\nUsage:\nGiveRep \u0026lt;User:User\u0026gt; [Num:Whole number] SetRep Aliases: SetRepID\nSets someones rep, this is an admin command and bypasses cooldowns and other restrictions.\nUsage:\nSetRep \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Num:Whole number\u0026gt; DelRep Deletes someone from the reputation list completely, this cannot be undone.\nUsage:\nDelRep \u0026lt;User:Mention/ID\u0026gt; RepLog Aliases: replogs\nShows the rep log for the specified user.\nUsage:\nRepLog RepLog \u0026lt;User:Mention/ID\u0026gt; RepLog \u0026lt;Page:Whole number\u0026gt; RepLog \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Page:Whole number\u0026gt; Rep Shows yours or the specified users current rep and rank\nUsage:\nRep [User:User] TopRep Shows rep leaderboard on the server\nUsage:\nTopRep [Page:Whole number] [-user user:Mention/ID - User to search for in the leaderboard] Soundboard Aliases: sb\nPlay, or list soundboard sounds\nUsage:\nSoundboard [Name:Text] SoundboardReset Aliases: sbclose/sbReset\nReset Soundboard Player\nUsage:\nSoundboardReset cah Create Aliases: c\nCreates a Cards Against Humanity game in this channel, add packs after commands, or * for all packs. (-v for vote mode without a card czar).\nUsage:\nCreate [packs:Text - Packs separated by space, or * for all of them.] [-v v:Switch - Vote mode - players vote instead of having a card czar.] cah End Ends a Cards Against Humanity game that is ongoing in this channel.\nUsage:\nEnd cah Kick Kicks a player from the ongoing Cards Against Humanity game in this channel.\nUsage:\nKick \u0026lt;user:Mention/ID\u0026gt; cah Packs Lists all available packs.\nUsage:\nPacks Trivia Asks a random question, you have got 30 seconds to answer!\nUsage:\nTrivia Debug \u0026amp; Maintenance 🖥 Ping Shows the latency from the bot to the discord servers. Note that high latencies can be the fault of ratelimits and the bot itself, it\u0026rsquo;s not a absolute metric.\nUsage:\nPing ViewPerms Shows you or the target\u0026rsquo;s permissions in this channel\nUsage:\nViewPerms [target:Mention/ID] TopServers Responds with the top 20 servers I\u0026rsquo;m on. *Bot admin only.\nUsage:\nTopServers [Skip:Whole number - Entries to skip] [-id id:Whole number] CurrentShard Aliases: cshard\nShows the current shard this server is on (or the one specified)\nUsage:\nCurrentShard [serverid:Whole number] IsGuildUnavailable Returns whether the specified guild is unavailable or not\nUsage:\nIsGuildUnavailable \u0026lt;guildid:Whole number\u0026gt; Yagstatus Aliases: status\nShows yagpdb status, version, uptime, memory stats, and so on\nUsage:\nYagstatus Roledbg Returns count of autorole assignments currently being processed\nUsage:\nRoledbg Moderation 👮 Ban Aliases: banid\nBans a member, specify number of days of messages to delete with -ddays (0 to 7)\nUsage:\nBan \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Duration:Duration\u0026gt; \u0026lt;Reason:Text\u0026gt; Ban \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; \u0026lt;Duration:Duration\u0026gt; Ban \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Duration:Duration\u0026gt; Ban \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; Ban \u0026lt;User:Mention/ID\u0026gt; [-ddays ddays:Whole number - Number of days of messages to delete] Unban Aliases: unbanid\nUnbans a user. Reason requirement is same as ban command setting.\nUsage:\nUnban \u0026lt;User:Mention/ID\u0026gt; [Reason:Text] Kick Kicks a member\nUsage:\nKick \u0026lt;User:Mention/ID\u0026gt; [Reason:Text] [-cl cl:Whole number - Messages to delete] Mute Mutes a member\nUsage:\nMute \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Duration:Duration\u0026gt; \u0026lt;Reason:Text\u0026gt; Mute \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; \u0026lt;Duration:Duration\u0026gt; Mute \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Duration:Duration\u0026gt; Mute \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; Mute \u0026lt;User:Mention/ID\u0026gt; Unmute Unmutes a member\nUsage:\nUnmute \u0026lt;User:Mention/ID\u0026gt; [Reason:Text] Timeout Aliases: to\nTimeout a member\nUsage:\nTimeout \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Duration:Duration\u0026gt; \u0026lt;Reason:Text\u0026gt; Timeout \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; \u0026lt;Duration:Duration\u0026gt; Timeout \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Duration:Duration\u0026gt; Timeout \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; Timeout \u0026lt;User:Mention/ID\u0026gt; RemoveTimeout Aliases: untimeout/cleartimeout/deltimeout/rto\nRemoves a member\u0026rsquo;s timeout\nUsage:\nRemoveTimeout \u0026lt;User:Mention/ID\u0026gt; [Reason:Text] Report Reports a member to the server\u0026rsquo;s staff\nUsage:\nReport \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; Clean Aliases: clear/cl\nDelete the last number of messages from chat, optionally filtering by user, max age and regex or ignoring pinned messages. Specify a regex with \u0026ldquo;-r regex_here\u0026rdquo; and max age with \u0026ldquo;-ma 1h10m\u0026rdquo; You can invert the regex match (i.e. only clear messages that do not match the given regex) by supplying the -im flag Note: Will only look in the last 1k messages\nUsage:\nClean \u0026lt;Num:Whole number\u0026gt; Clean \u0026lt;Num:Whole number\u0026gt; \u0026lt;User:Mention/ID\u0026gt; Clean \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Num:Whole number\u0026gt; [-r r:Text - Regex] [-im im:Switch - Invert regex match] [-ma ma:Duration - Max age] [-minage minage:Duration - Min age] [-i i:Switch - Regex case insensitive] [-nopin nopin:Switch - Ignore pinned messages] [-a a:Switch - Only remove messages with attachments] [-to to:Whole number - Stop at this msg ID] [-from from:Whole number - Start at this msg ID] Reason Add/Edit a modlog reason\nUsage:\nReason \u0026lt;Message-ID:Whole number\u0026gt; \u0026lt;Reason:Text\u0026gt; Warn Warns a user, warnings are saved using the bot. Use -warnings to view them.\nUsage:\nWarn \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Reason:Text\u0026gt; Warnings Aliases: Warns\nLists warning of a user.\nUsage:\nWarnings \u0026lt;User:Mention/ID\u0026gt; [Page:Whole number] [-id id:Whole number - Warning ID] EditWarning Edit a warning, id is the first number of each warning from the warnings command\nUsage:\nEditWarning \u0026lt;Id:Whole number\u0026gt; \u0026lt;NewMessage:Text\u0026gt; DelWarning Aliases: dw/delwarn/deletewarning\nDeletes a warning, id is the first number of each warning from the warnings command\nUsage:\nDelWarning \u0026lt;Id:Whole number\u0026gt; [Reason:Text] ClearWarnings Aliases: clw\nClears the warnings of a user\nUsage:\nClearWarnings \u0026lt;User:Mention/ID\u0026gt; [Reason:Text] TopWarnings Aliases: topwarns\nShows ranked list of warnings on the server\nUsage:\nTopWarnings [Page:Whole number] [-id id:Switch - List userIDs] GiveRole Aliases: grole/arole/addrole\nGives a role to the specified member, with optional expiry\nUsage:\nGiveRole \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Role:Role\u0026gt; [Duration:Duration] RemoveRole Aliases: rrole/takerole/trole\nRemoves the specified role from the target\nUsage:\nRemoveRole \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Role:Role\u0026gt; automod Rulesets Aliases: r/list/l\nLists all rulesets and their status\nUsage:\nRulesets automod Toggle Aliases: t\nToggles a ruleset on/off\nUsage:\nToggle \u0026lt;Ruleset-Name:Text\u0026gt; automod Logs Aliases: log\nShows the log of the last triggered automod rules, optionally filtering by user\nUsage:\nLogs [Page:Whole number] [-user user:Mention/ID] automod ListViolations Aliases: Violations/ViolationLogs/VLogs/VLog\nLists Violations of specified user old flag posts oldest violations in first page ( from oldest to newest ).\nUsage:\nListViolations \u0026lt;User:Mention/ID\u0026gt; [Page-Number:Whole number] [-old old:Switch - Oldest First] automod ListViolationsCount Aliases: ViolationsCount/VCount\nLists Violations summary in entire server or of specified user optionally filtered by max violation age. Specify number of violations to skip while fetching using -skip flag ; max entries fetched 500\nUsage:\nListViolationsCount [User:Mention/ID] [-ma ma:Duration - Max Violation Age] [-skip skip:Whole number - Amount Skipped] automod DeleteViolation Aliases: DelViolation/DelV/DV\nDeletes a Violation with the specified ID. ID is the first number of each Violation in the ListViolations command.\nUsage:\nDeleteViolation \u0026lt;ID:Whole number\u0026gt; automod ClearViolations Aliases: ClearV/ClrViolations/ClrV\nClears Violations of specified user (or global if User ID = 0 or unspecified) optionally filtered by Name, Min/Max age and other conditions. By default, more recent violations are preferentially cleared. Maximum of 2000 can be cleared at a time.\nUsage:\nClearViolations \u0026lt;User:Mention/ID\u0026gt; \u0026lt;Violation-Name:Text\u0026gt; ClearViolations \u0026lt;User:Mention/ID\u0026gt; ClearViolations \u0026lt;Violation-Name:Text\u0026gt; ClearViolations [-ma ma:Duration - Max Violation Age] [-minage minage:Duration - Min Violation Age] [-num num:Whole number - Max Violations Cleared] [-old old:Switch - Preferentially Clear Older Violations] [-skip skip:Whole number - Amount Skipped] Rolemenu 🔘 RoleMenu Create Aliases: c\nSet up a role menu. Specify a message with -m to use an existing message instead of having the bot make one\nTo get the id of a message you have to turn on developer mode in Discord\u0026rsquo;s appearances settings then right click the message and copy id.\nUsage:\nCreate \u0026lt;Group:Text - The role command group\u0026gt; [-m m:Whole number - Message ID] [-nodm nodm:Switch - Disable DM] [-rr rr:Switch - Remove role on reaction removed] [-skip skip:Whole number - Number of roles to skip] RoleMenu Remove Aliases: rm\nRemoves a rolemenu from a message. The message won\u0026rsquo;t be deleted and the bot will not do anything with reactions on that message\nTo get the id of a message you have to turn on developer mode in Discord\u0026rsquo;s appearances settings then right click the message and copy id.\nUsage:\nRemove \u0026lt;Message-ID:Whole number\u0026gt; RoleMenu Update Aliases: u\nUpdates a rolemenu, toggling the provided flags and adding missing options, aswell as updating the order.\nTo get the id of a message you have to turn on developer mode in Discord\u0026rsquo;s appearances settings then right click the message and copy id.\nUsage:\nUpdate \u0026lt;Message-ID:Whole number\u0026gt; [-nodm nodm:Switch - Disable DM] [-rr rr:Switch - Remove role on reaction removed] RoleMenu ResetReactions Aliases: reset\nRemoves all reactions on the specified menu message and re-adds them. Can be used to fix the order after updating it.\nTo get the id of a message you have to turn on developer mode in Discord\u0026rsquo;s appearances settings then right click the message and copy id.\nUsage:\nResetReactions \u0026lt;Message-ID:Whole number\u0026gt; RoleMenu EditOption Aliases: edit\nAllows you to reassign the emoji of an option, tip: use ResetReactions afterwards.\nTo get the id of a message you have to turn on developer mode in Discord\u0026rsquo;s appearances settings then right click the message and copy id.\nUsage:\nEditOption \u0026lt;Message-ID:Whole number\u0026gt; RoleMenu Complete Aliases: finish\nMarks the menu as done.\nTo get the id of a message you have to turn on developer mode in Discord\u0026rsquo;s appearances settings then right click the message and copy id.\nUsage:\nComplete \u0026lt;Message-ID:Whole number\u0026gt; RoleMenu Listgroups Aliases: list/groups\nLists all role groups\nUsage:\nListgroups Tickets 🎫 tickets Open Aliases: create/new/make\nOpens a new ticket\nUsage:\nOpen \u0026lt;subject:Text\u0026gt; tickets AddUser Adds a user to the ticket in this channel\nUsage:\nAddUser \u0026lt;target:Member\u0026gt; tickets RemoveUser Removes a user from the ticket\nUsage:\nRemoveUser \u0026lt;target:Member\u0026gt; tickets Rename Renames the ticket\nUsage:\nRename \u0026lt;new-name:Text\u0026gt; tickets Close Aliases: end/delete\nCloses the ticket\nUsage:\nClose [reason:Text] tickets AdminsOnly Aliases: adminonly/ao\nToggle admins only mode for this ticket\nUsage:\nAdminsOnly Events 🎟 events Create Aliases: new/make\nCreates an event, You will be led through an interactive setup\nUsage:\nCreate events Edit Edits an event\nUsage:\nEdit \u0026lt;ID:Whole number\u0026gt; [-title title:Text - Change the title of the event] [-time time:Text - Change the start time of the event] [-max max:Whole number - Change max participants] events List Aliases: ls\nLists all events in this server\nUsage:\nList events Delete Aliases: rm/del\nDeletes an event, specify the event ID of the event you wanna delete\nUsage:\nDelete \u0026lt;ID:Whole number\u0026gt; events StopSetup Aliases: cancelsetup\nForce cancels the current setup session in this channel\nUsage:\nStopSetup ","date":"0001-01-01","id":14,"permalink":"/docs/core/all-commands/","summary":"\u003cp\u003eList of all available commands offered by YAGPDB and their syntax.\u003c/p\u003e\n\u003ch2 id=\"legend\"\u003eLegend\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;required arg\u0026gt;\u003c/code\u003e \u003ccode\u003e[optional arg]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eText arguments containing multiple words needs be to put in quotes (\u0026ldquo;arg here\u0026rdquo;) or code ticks (\u003ccode\u003earg here\u003c/code\u003e) if it\u0026rsquo;s not the last argument and there\u0026rsquo;s more than 1 text argument.\u003c/p\u003e\n\u003cp\u003eFor example with the poll command if you want the question to have multiple words: \u003ccode\u003e-poll \u0026quot;whats your favorite color\u0026quot; red blue green2\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"All Commands"},{"content":"When we were starting to write Custom Commands, we stuck to a somewhat static custom command\u0026mdash;one that doesn\u0026rsquo;t take any arguments and has a fixed output. This is a good starting point, but it\u0026rsquo;s not very useful in practice. In this chapter, we\u0026rsquo;ll learn how to create custom commands that take inputs.\nParsing Arguments Because parsing arguments is no easy task, we provide a convenience function, parseArgs, to parse the arguments passed to a custom command. For simple commands, this is the recommended way to handle user input. In a later chapter, we will explore a more hands-on approach to parsing arguments.\nDefining Arguments The first step is to define the arguments that the command will take. This is done using the aforementioned parseArgs function. The syntax is as follows:\n{{ $args := parseArgs required_args error_message ...cargs }} The first argument required_args is the number of required arguments.\nAfter that, we can provide a custom error message that will be displayed if the arguments are not valid. Passing an empty string \u0026quot;\u0026quot; will generate one based on the argument definitions. This is useful for providing more context to the user about what went wrong.\nThe ...carg is a variadic argument, that is, it can take any number of arguments. Each carg is a single argument definition. The carg function has the following syntax:\n{{ carg \u0026lt;\u0026#34;type\u0026#34;\u0026gt; \u0026lt;\u0026#34;description\u0026#34;\u0026gt; }} Following types are supported:\nint: whole number float: decimal number string: text user: user mentions, resolves to a user object userid: mentions or user IDs, resolves to the ID itself member: mentions or user IDs, resolves to a member object channel: channel mention or ID, resolves to a channel object role: role name or ID, resolves to a role object duration: duration that is human-readable, i.e 10h5m or 10 hour 5 minutes would both resolve to the same duration The description is a human-readable description of the argument. This is used in the error message if the argument is not valid.\nCombining all of this, let\u0026rsquo;s create a custom command that takes two arguments: a coolness level and a user that is part of the server to apply said level to.\n{{ $args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34;) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) }} Accessing Arguments Currently, our code doesn\u0026rsquo;t do anything with the arguments. To access the arguments, we use the .Get method on the $args variable. The syntax is as follows:\n{{ $args.Get \u0026lt;index\u0026gt; }} The index is the position of the argument, starting from 0. The arguments are stored in the order they are defined in the parseArgs function call. Let us now modify our custom command to access these arguments:\n{{ $args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34;) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) }} coolness: {{ $args.Get 0 }} member: {{ ($args.Get 1).Nick }} Validating Arguments Specifying Valid Ranges Now, we want to limit the coolness level to a number between 0 and 100. We can do this by adding a simple check:\n{{ $args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34;) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) }} {{ if or (gt ($args.Get 0) 100) (lt ($args.Get 0) 0) }} Invalid coolness level. Must be between 0 and 100. {{ return }} {{ end }} coolness: {{ $args.Get 0 }} member: {{ ($args.Get 1).Nick }} There is one major thing to note about this code: we\u0026rsquo;re starting to repeat a lot of our $args.Get N calls! Let\u0026rsquo;s fix that first.\n{{ $args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34;) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) }} {{ $coolness := $args.Get 0 }} {{ $member := $args.Get 1 }} {{ if or (gt $coolness 100) (lt $coolness 0) }} Invalid coolness level. Must be between 0 and 100. {{ return }} {{ end }} coolness: {{ $coolness }} member: {{ $member.Nick }} Now, we can make use of another great feature of parseArgs: Certain types support additional arguments that can be used to validate the input. For example, the int type supports two additional arguments that can be used to specify a range of valid values, such that the bot will do the validation for us.\n{{ $args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34; 0 100) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) }} {{ $coolness := $args.Get 0 }} {{ $member := $args.Get 1 }} coolness: {{ $coolness }} member: {{ $member.Nick }} Following types support these validation ranges:\nint float duration (in time.Duration format) Make sure to use these instead of manually verifying a valid range, if possible, as it makes your code cleaner and easier to read.\nTesting For Optional Arguments If you have optional arguments, you can check if they were provided by using the .IsSet method on the $args variable. The syntax is as follows:\n{{ $args.IsSet \u0026lt;index\u0026gt; }} Let us modify our custom command to introduce a third optional argument, a message to send to the user.\n{{ $args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34; 0 100) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) (carg \u0026#34;string\u0026#34; \u0026#34;message\u0026#34;) }} {{ $coolness := $args.Get 0 }} {{ $member := $args.Get 1 }} coolness: {{ $coolness }} member: {{ $member.Nick }} {{ if $args.IsSet 2 -}} message: {{ $args.Get 2 }} {{ end }} Try it out and see how we only print message: and the message if it was provided.\n","date":"0001-01-01","id":15,"permalink":"/learn/beginner/command-arguments/","summary":"\u003cp\u003eWhen we were starting to write Custom Commands, we stuck to a somewhat static custom command\u0026mdash;one that doesn\u0026rsquo;t take\nany arguments and has a fixed output. This is a good starting point, but it\u0026rsquo;s not very useful in practice. In this\nchapter, we\u0026rsquo;ll learn how to create custom commands that take inputs.\u003c/p\u003e\n\u003ch2 id=\"parsing-arguments\"\u003eParsing Arguments\u003c/h2\u003e\n\u003cp\u003eBecause parsing arguments is no easy task, we provide a convenience function, \u003ccode\u003eparseArgs\u003c/code\u003e, to parse the arguments passed\nto a custom command. For simple commands, this is the recommended way to handle user input. In a later chapter, we will\nexplore a more hands-on approach to parsing arguments.\u003c/p\u003e","tags":[],"title":"Command Arguments"},{"content":"","date":"0001-01-01","id":16,"permalink":"/docs/custom-commands/","summary":"","tags":[],"title":"Custom Commands"},{"content":"","date":"0001-01-01","id":17,"permalink":"/learn/intermediate/","summary":"","tags":[],"title":"Intermediate"},{"content":"The commands page displays all custom commands and allows you to add, delete, or edit custom commands and custom command groups.\n1 Create Custom Command 2 List of Commands in Selected Group 3 Edit this Custom Command 4 Delete this Custom Command 5 Run this Command Now 6 Selected Group 7 Group Tabs 8 Name of Selected Group 9 Delete Selected Group 10 Channel and Role Restrictions 11 Save group settings\nCreating a Custom Command Clicking the Create Custom Command (1) creates a new command within the selected group (6) and redirects you to a page to edit it.\nA new custom command has the default response:\nEdit this to change the output of the custom command {{.CCID}}! Each custom command is assigned a unique incrementing ID, which cannot be modified after creation.\nTip: Troubleshooting\nIf the bot is sending messages such as this in your server, you are likely accidentally triggering CCs with the default response. Check the commands page to find any CCs with empty responses.\nCommand List The commands page lists the commands (2) in the selected group (6). They are ordered by ID and display their name (if set), trigger type, and trigger text (if applicable). You can expand the command by clicking on it, which displays the full command response.\nDelete a Command Deleting a custom command (4) will permanently delete the command after confirmation. This cannot be undone.\nRun Now The Run now button (5) appears on interval trigger commands. When clicked, it executes the command immediately as long as the command isn\u0026rsquo;t disabled and a channel is selected.\nRunning an interval command using this button reschedules all subsequent runs based off the current time.\nCommand Groups Command groups allow you to organize your custom commands and apply role and channel restrictions to multiple commands.\nThe group tabs at the top of the page (7) allow you to switch to any of your created groups. The + button allows you to create a new group.\nEditing a Group Selecting a group allows you to edit it. Changes must be saved (11) to take effect.\nName (8): Name your custom command group (100 characters max). Delete group (9): Permanently delete the group after confirmation. Role/Channel restrictions (10): Restrict commands within the group based on roles or channels executed in. Save group settings (11): Update the group with the new values. Role/Channel Restrictions Using role/channel restrictions, it is possible to set conditions on which users can trigger a custom command.\nSpecifically, allowed roles or channels are required to run the command, whereas denied roles or channels cannot use the command at all. These role restrictions are unrelated to member permissions. Having Administrator permissions will not override these restrictions.\nNote: Priority of Ignored vs. Required Roles\nYAGPDB was raised well and honors a \u0026ldquo;no\u0026rdquo; when told \u0026ldquo;no\u0026rdquo;. In other words, a denylist takes precedence over an allowlist.\nEditing a Custom Command Editing a custom command (3) opens a separate page for configuration.\n1 ID 2 Name 3 Trigger Type 4 Trigger Text 5 Case Sensitivity Toggle 6 Message Edits Trigger Toggle 7 Response 8 Add Response 9 Custom Command Group 10 Channel and Role Restrictions 11 Execution Statistics 12 Error Output Toggle 13 Enable Command Toggle 14 Save Command 15 Delete command button\nID and Name Custom commands are identified by either their ID or their name.\nWhen a custom command is created, it is assigned a numeric ID (1) starting at 1. The number increases with each custom command created on your server. It is not based on the current number of custom commands, but the total commands that have ever been created on the server. IDs cannot be changed by the user.\nThe ID uniquely identifies a custom command, and is therefore used in a variety of contexts where one needs to supply a specific custom command. For instance, the execCC custom command function targets a specific CC ID, and some built-in commands like customcommands accept a CC ID as an argument.\nWithin a command response, the ID may be retrieved using the {{ .CCID }} template.\nDanger: Deleting is Irreversible\nDeleting a custom command does not allow its ID to be reassigned. If you delete a CC, its ID is lost forever.\nA Custom Command\u0026rsquo;s name (2), conversely, is defined by the user. It is an optional argument that can be used to identify the command in the control panel and with the CustomCommands command. Max 100 characters.\nTriggers A trigger (3) defines conditions under which the command will be executed. Depending on the type of trigger, you may also need to specify additional configuration. For example, most trigger types require a Trigger (4) field defining the text the command should match against new messages. Max 1000 characters.\nTrigger types Command Messages starting with the prefix for your server (- by default) OR by mentioning the bot followed by the trigger text (4) will trigger the command.\nExample Trigger: say\nMatches:\n-say\n-say hello\n@YAGPDB.xyz say hello\nDoesn\u0026rsquo;t match:\nsay hello\n-sayl hello\nStarts With Messages starting with the trigger text (4) will trigger the command.\nContains Messages containing the trigger text (4) will trigger the command.\nRegex Messages matching the trigger text (4) as a regex pattern will trigger the command.\nExact Match Messages which exactly match the trigger text (4) will trigger the command.\nReaction Reactions to a message will trigger the command.\nCan specify Added Only, Removed Only, or Both to restrict which types of Reactions will trigger the command.\nTip: Filtering Emojis\nYou cannot specify which emojis the command will trigger on. If you\u0026rsquo;d like to limit which emojis run the code, you will need to write that code yourself in the response.\nExample:\n{{ if eq .Reaction.Emoji.APIName \u0026#34;😀\u0026#34; \u0026#34;⭐️\u0026#34; }} This is an allowed reaction! {{ else if eq .Reaction.Emoji.APIName \u0026#34;🦆\u0026#34; }} This is not an allowed reaction. {{ end }} {{/* Emojis other than 😀, ⭐️, and 🦆 do not produce any response. */}} Hourly/Minute Interval These triggers will run the command at a regular interval of time \u0026ndash; for instance, every 2 hours \u0026ndash; in the selected channel.\nWhen using a time-based trigger, the custom command does not receive any user or member context. Thus, {{ .User.ID }} and similar templates will result in no value and member-dependent functions such as addRoleID will fail.\n1 Interval 2 Channel 3 Excluding hours/weekdays\nInterval (1) sets how often the command will run in hours or minutes.\nWarning: Interval duration limits\nThe minimum interval is 5 minutes, and the max is 1 month. Up to 5 interval triggers may have an interval of 10 minutes or shorter.\nChannel (2) specifies a channel to run the command in. The response, if any, will be sent to this channel.\nYou must specify a channel to run time-based commands in even if the command doesn\u0026rsquo;t output a message.\nExcluding hours and/or weekdays (3) prevents the command from triggering during those hours or weekdays. This uses UTC time, not your local timezone.\nWhen editing an interval command, a Run Now button appears at the bottom of the page. It executes the command as long as the command is not disabled and a channel is selected. Running an interval command using this button reschedules all subsequent runs based off the current time.\nComponent In-depth Interactions Guide\nThe component trigger is used to trigger custom commands via buttons or select menus.\nThe trigger is matched using RegEx.\nModal In-depth Interactions Guide\nThe modal trigger is used to trigger custom commands via submitting a modal.\nThe trigger is matched using RegEx.\nCrontab This trigger will run the command periodically using Cron Syntax to schedule runs. In contrast to interval triggers, which run a command with a fixed delay but unknown time, cron triggers can be made to execute periodically at fixed times, dates, and/or intervals. For instance, you could schedule execution for 23:45 every Saturday.\nWhen using a time-based trigger, the custom command does not receive any user or member context. Thus, {{ .User.ID }} and similar templates will result in no value and member-dependent functions such as addRoleID will fail.\n1 Cron Expression 2 Channel 3 Excluding hours/weekdays\nCron Expression (1) defines the expression used to schedule the cron job. It uses the standard expression format (see below). It does not support predefined schedules such as @hourly. The cron scheduler uses UTC always.\nRead more on Cron Expressions below.\nChannel (2) specifies a channel to run the command in. The response, if any, will be sent to this channel.\nExcluding hours and/or weekdays (3) prevents the command from triggering during those hours or weekdays. This uses UTC time, not your local timezone.\nYou must specify a channel to run time-based commands in even if the command doesn\u0026rsquo;t output a message.\nCron Expressions A cron expression represents a set of times, using 5 space-separated fields.\nField name Mandatory? Allowed values Allowed special characters Minutes Yes 0-59 * / , - Hours Yes 0-23 * / , - Day of month Yes 1-31 * / , - ? Month Yes 1-12 or JAN-DEC * / , - Day of week (DOW) Yes 0-6 or SUN-SAT * / , - ? To read more about the supported format of cron expressions, visit Robfig\u0026rsquo;s Cron package documentation - Expression Format.\nTip: Debugging Cron Expressions\nTo help build and debug cron expressions, we recommend using Cronitor\u0026rsquo;s Crontab Guru or a similar site. Note that predefined schedules such as @hourly, and the use of 7 in the DOW field may parse correctly on Corntab Guru, but are not supported with YAGPDB.\nSpecial Characters Asterisk ( * ) The asterisk indicates that the cron expression will match for all values of the field; e.g., using an asterisk in the 5th field (month) would indicate every month.\nSlash ( / ) Slashes are used to describe increments of ranges. For example 3-59/15 in the 1st field (minutes) would indicate the 3rd minute of the hour and every 15 minutes thereafter. The form \u0026ldquo;*/\u0026hellip;\u0026rdquo; is equivalent to the form \u0026ldquo;first-last/\u0026hellip;\u0026rdquo;, that is, an increment over the largest possible range of the field. The form \u0026ldquo;N/\u0026hellip;\u0026rdquo; is accepted as meaning \u0026ldquo;N-MAX/\u0026hellip;\u0026rdquo;, that is, starting at N, use the increment until the end of that specific range. It does not wrap around.\nComma ( , ) Commas are used to separate items of a list. For example, using \u0026ldquo;MON,WED,FRI\u0026rdquo; in the 5th field (day of week) would mean Mondays, Wednesdays and Fridays.\nHyphen ( - ) Hyphens are used to define ranges. For example, 9-17 would indicate every hour between 9am and 5pm inclusive.\nQuestion mark ( ? ) Question mark may be used instead of \u0026lsquo;*\u0026rsquo; for leaving either day-of-month or day-of-week blank.\nQuick Examples:\n45 23 * * 6 Run once a week, on Saturday at 23:45. 0 * * * * Run once an hour, beginning of hour. 0 0 * * * Run once a day, midnight. 0 0 * * 0 Run once a week, midnight between Sat/Sun. 0 0 1 * * Run once a month, midnight, first of month. 0 0 1 1 * Run once a year, midnight, Jan. 1st. Warning: Cron interval limits\nYour cron expression must schedule jobs with greater than a 10 minute interval between executions.\nCase Sensitivity Any commands which allow you to specify trigger text (command, regex, exact match, and so on) have a Case sensitivity toggle (5) which is off by default. A case-sensitive trigger yagPDB will trigger on \u0026ldquo;yagPDB\u0026rdquo; but not \u0026ldquo;yagpdb\u0026rdquo; or \u0026ldquo;YAGPDB\u0026rdquo;.\nEdit Message Trigger This feature is premium only.\nCommands which trigger on messages have a Trigger on message edits toggle (6) which is off by default. If a message is edited and matches the trigger text, it will trigger the command.\nThe edited message toggle is an additional trigger to the normal message trigger. If you\u0026rsquo;d like to only trigger on message edits, you will need to use a conditional branch on {{ .IsMessageEdit }} in the custom command response.\nResponse The response (7) defines the message the bot will send once the command is triggered.\nOptionally define multiple responses which the bot will randomly select from when the command is run. Add a response with the plus button on the right of the response (8).\nThe response supports the custom template script, allowing for more complex functionality such as assigning roles, getting data from users, sending messages to other channels, and more. Visit the Templates reference page to learn more.\nTemplates\nCustom Command Group Dropdown selection (9) to change which command group the command is in. Select None to ungroup the command.\nChannel and Role Restrictions Group restrictions operate identically to command-specific restrictions.\nCC Groups A user executing a command must obey both the overarching group\u0026rsquo;s restrictions and the command restrictions. Command-specific allowlists will not override the group restrictions.\nExecution Statistics The execution statistics (11) show details about the custom command\u0026rsquo;s executions. It is updated after each command run.\nLast Error The most recent error which occurred running the command, UTC timestamped. The error display is not cleared when the command runs successfully.\nRun Count A count of how many times the command executed the response. This counter increases even if the command errors, or does not send a response. It also increases if the command is run via execCC.\nThe run count will not increase if the user who ran the command did not pass the restrictions.\nTip: Troubleshooting\nIf your command fails to run, check the run count. If the run count increases when you attempt to run the command, the issue is with your code. Otherwise, the issue may be with YAGPDB\u0026rsquo;s permissions in your server, or improperly configured role/channel restrictions in the command and/or command group.\nLast Run A UTC timestamp of the last time the command executed the response.\nNext Scheduled Run Only shown on Interval type commands. A UTC timestamp of the next time the command is scheduled to run.\nOutput errors as command response This toggle (12) determines whether errors during command execution are sent in the command response after the command fails. Does not affect logging of Last Error to the statistics.\nCommand Enabled This toggle (13) enables the command. A disabled command will never run (not even with execCC) or count against the trigger limit.\nSaving Your Command Saving (14) the command updates it with the new values if there are no errors.\nAlt + Shift + S also saves the custom command.\nA custom command will not save if there is an error in your input. Examples of errors which prevent you from saving:\nThere is a syntax error in the response You have reached the maximum CC limit You are attempting to save an empty response If you save a command with an interval trigger which has never been run, it will run immediately upon saving.\nTip: Keeping Your Code Safe\nIt is recommended to code your custom command using a local editor on your device. You will not be able to save your code on the dashboard if there are syntax errors in your code. Use an editor like Vim, VS Code, or Notepad++ for the best coding experience.\nDanger: Remember to Save\nCustom commands do not autosave.\nDelete Current Command Deleting the custom command (15) will permanently delete the command after confirmation. This cannot be undone.\n","date":"0001-01-01","id":18,"permalink":"/docs/custom-commands/commands/","summary":"\u003cp\u003eThe commands page displays all custom commands and allows you to add, delete, or edit custom commands and custom command\ngroups.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-3b37737e7de498448ecd1531f11852e3-lightbox\"\u003e\n\u003cimg alt=\"Overview of the Commands page.\" height=\"1258\" id=\"h-rh-i-3b37737e7de498448ecd1531f11852e3\" src=\"/docs/custom-commands/command_overview.png\" width=\"1007\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-3b37737e7de498448ecd1531f11852e3-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of the Commands page.\" height=\"1258\" id=\"h-rh-i-3b37737e7de498448ecd1531f11852e3\" src=\"/docs/custom-commands/command_overview.png\" width=\"1007\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ccenter\u003e\n\u003cp\u003e\u003cstrong\u003e1\u003c/strong\u003e Create Custom Command \u003cstrong\u003e2\u003c/strong\u003e List of Commands in Selected Group \u003cstrong\u003e3\u003c/strong\u003e Edit this Custom Command \u003cstrong\u003e4\u003c/strong\u003e Delete this\nCustom Command \u003cstrong\u003e5\u003c/strong\u003e Run this Command Now \u003cstrong\u003e6\u003c/strong\u003e Selected Group \u003cstrong\u003e7\u003c/strong\u003e Group Tabs \u003cstrong\u003e8\u003c/strong\u003e Name of Selected Group \u003cstrong\u003e9\u003c/strong\u003e\nDelete Selected Group \u003cstrong\u003e10\u003c/strong\u003e Channel and Role Restrictions \u003cstrong\u003e11\u003c/strong\u003e Save group settings\u003c/p\u003e","tags":[],"title":"Commands"},{"content":"Until now, we have just used the default response behavior to make our custom commands respond with some text. This makes sense for quick mockups or relatively simple commands. However, this may be inconvenient or Not What You Want in some cases. In this chapter, we will explore how to send messages to different channels, edit existing messages, and send messages with embeds, vastly expanding your toolbox for creating complex custom command systems.\nSending Messages We provide several sendMessage* functions that all do the same thing: send a message to a channel. The difference between them is how they handle special mentions like @everyone and @here, and whether to return the ID of the message after sending it. We will cover these functions in detail in the following sections, and when to best use them.\nLet\u0026rsquo;s get started with the simplest of them all, sendMessage. Its syntax is the following:\n{{ sendMessage channel_id message_to_be_sent }} The channel_id is the ID of the channel to send the message to. If you want to send the message in the same channel as the one in which the custom command was triggered, simply set channel_id to nil.\nIntuitively, message_to_be_sent denotes the output that is to be sent as a message. For now, we will just use a string with the content you want to send. We will cover sending embeds in a later section on this page.\nSpecial Mentions By default, the bot will escape special mentions like @everyone, @here, and role mentions (note that user mentions are not escaped by default). If you want to send a message with these mentions, you\u0026rsquo;ll need to tell the bot to not escape them. You can do this by using the sendMessageNoEscape function instead of sendMessage.\n{{ sendMessageNoEscape channel_id message_to_be_sent }} Returning the Message ID If you want to store the ID of the message you just sent, for example to later edit it, use the sendMessageRetID function and assign the result to a variable.\n{{ $messageID := sendMessageRetID channel_id message_to_be_sent }} Naturally, we provide a variant of the sendMessageRetID function that does not escape mentions:\n{{ $messageID := sendMessageNoEscapeRetID channel_id message_to_be_sent }} It is quite the mouthful to write, but just roll with it.\nBuilding Embeds Embeds are a powerful way to display information in a structured and visually appealing way. They can contain a title, description, fields, images, and more. We provide a function to build embeds in a way that closely resembles the structure as defined by the Discord API.\nWe will illustrate this with a simple example. For a full breakdown of all available fields, please refer to our custom embeds documentation.\n{{ $embed := cembed \u0026#34;title\u0026#34; \u0026#34;This is a title\u0026#34; \u0026#34;description\u0026#34; \u0026#34;This is a description.\u0026#34; \u0026#34;color\u0026#34; 0xff0000 \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;name\u0026#34; \u0026#34;Field 1\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Value 1\u0026#34; \u0026#34;inline\u0026#34; true) (sdict \u0026#34;name\u0026#34; \u0026#34;Field 2\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Value 2\u0026#34; \u0026#34;inline\u0026#34; true) ) \u0026#34;author\u0026#34; (sdict \u0026#34;name\u0026#34; .User.Username \u0026#34;icon_url\u0026#34; (.User.AvatarURL \u0026#34;256\u0026#34;) ) }} {{ sendMessage nil $embed }} The above code will generate an embed as shown on the left. Let us dissect it a bit. First, we simply define a variable $embed and assign it the result of the cembed function. This function takes a series of key-value pairs, where the key is the embed field you want to set, and the value is the value you want to set for that field. The cembed function will return a structured object that can be sent as a message, as demonstrated in the last line of the code.\nThe \u0026quot;title\u0026quot; and \u0026quot;description\u0026quot; fields are self-explanatory\u0026mdash;we can use Discord Markdown in the latter. The \u0026quot;color\u0026quot; field takes an integer color value, for which we can conveniently use hexadecimal formatting as mentioned in Variables and Data Types, but it can also take a decimal value.\nThe \u0026quot;fields\u0026quot; field is a list (more precisely a slice) of dictionaries, where each dictionary represents a field in the embed. Each field dictionary must contain a \u0026quot;name\u0026quot; and a \u0026quot;value\u0026quot; field, and can optionally contain an \u0026quot;inline\u0026quot; field. This field is a boolean that determines whether the field should be displayed inline with the previous field.\nThe \u0026quot;author\u0026quot; field is a dictionary that contains the name and icon URL of the author of the embed. In this case, we use the username of the user who triggered the custom command as the name, and the user\u0026rsquo;s avatar URL as the icon URL.\nTip: Custom Commands Embed Generator\nThere is a community-made embed visualizer that can help you create custom command embeds more easily. However, it is still a good idea to not wholly rely on the GUI and understand the structure of the embeds yourself.\nFor your convenience, we have prefilled the above example in the visualizer.\nEditing Messages Sending a message is nice and all, but for the sake of keeping things clean, you might want to edit a message instead of creating a new one each time something changes. We provide the editMessage function for this purpose.\n{{ editMessage channel_id message_id new_message_content }} The channel_id is the ID of the channel containing the message. The message_id is the ID of the message you want to edit. The new_message_content is the new content of the message, which will completely overwrite the existing content. See Editing Embeds if you only want to change certain fields of an existing embed while leaving others intact. You should note that YAGPDB can only edit messages from itself, just like you cannot edit someone else\u0026rsquo;s messages.\nFor a quick demonstration, consider the following code:\n{{ $messageID := sendMessageRetID nil \u0026#34;Hello, World!\u0026#34; }} {{ sleep 5 }} {{ editMessage nil $messageID \u0026#34;Goodbye, World!\u0026#34; }} This code sends a message saying \u0026ldquo;Hello, World!\u0026rdquo; and then, after 5 seconds, edits the message to say \u0026ldquo;Goodbye, World!\u0026rdquo;, all in the same channel where the custom command was triggered.\nEditing Embeds Editing embeds is a little more involved than editing regular messages. Since the data provided to editMessage completely overwrites the existing content, it is necessary to retrieve the existing embed object, modify the desired fields, and provide the whole embed to editMessage.\nAn elaborate example all within the same custom command looks like the following:\n{{ $embed := cembed \u0026#34;title\u0026#34; \u0026#34;This is a title\u0026#34; \u0026#34;description\u0026#34; \u0026#34;This is a description.\u0026#34; \u0026#34;color\u0026#34; 0xff0000 \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;name\u0026#34; \u0026#34;Field 1\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Value 1\u0026#34; \u0026#34;inline\u0026#34; true) (sdict \u0026#34;name\u0026#34; \u0026#34;Field 2\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Value 2\u0026#34; \u0026#34;inline\u0026#34; true) ) \u0026#34;author\u0026#34; (sdict \u0026#34;name\u0026#34; .User.Username \u0026#34;icon_url\u0026#34; (.User.AvatarURL \u0026#34;256\u0026#34;) ) }} {{ $messageID := sendMessageRetID nil $embed }} {{ sleep 5 }} {{ $newEmbed := structToSdict $embed }} {{ $newEmbed.Set \u0026#34;title\u0026#34; \u0026#34;This is a new title\u0026#34; }} {{ $newEmbed.Set \u0026#34;description\u0026#34; \u0026#34;This is a new description.\u0026#34; }} {{ $newEmbed.Set \u0026#34;fields\u0026#34; (cslice) }} {{ editMessage nil $messageID (cembed $newEmbed) }} In the second part, after {{ sleep 5 }}, we first convert the original embed object to a dictionary using the structToSdict function. We then modify the fields we want to change using the Set method. In this case, we change the title and description of the embed, and remove all fields. Finally, we send the modified embed object back to the editMessage function.\nAs mentioned previously, this example is contrived: in practice, we\u0026rsquo;re more likely to use .Message.Embeds to get the original embed object, convert and modify it as shown above, then send it back to the editMessage function.\nNote: Full Conversion\nstructToSdict does not perform deep conversion. For a full conversion of an embed to a dictionary, you can use the following code snippet:\n{{ if not .Message.Embeds }} {{/* no point converting non-existent embed */}} {{ return }} {{ end }} {{ $embed := structToSdict (index .Message.Embeds 0) }} {{ range $k, $v := $embed }} {{- if eq (kindOf $v true) \u0026#34;struct\u0026#34; }} {{- /* convert nested struct */}} {{- $embed.Set $k (structToSdict $v) }} {{- end -}} {{ end }} {{/* also add old fields */}} {{ $embed.Set \u0026#34;Fields\u0026#34; (cslice.AppendSlice $embed.Fields) }} {{ range $i, $field := $embed.Fields }} {{- $embed.Fields.Set $i (structToSdict $field) -}} {{ end }} {{/* ensure all parts of the embed are reconstructed */}} {{ if $embed.Author }} {{ $embed.Author.Set \u0026#34;Icon_URL\u0026#34; $embed.Author.IconURL }} {{ end }} {{ if $embed.Footer }} {{ $embed.Footer.Set \u0026#34;Icon_URL\u0026#34; $embed.Footer.IconURL }} {{ end }} Complex Message Builder We learned how to send messages and embeds individually\u0026mdash;we can also combine them in a single message. This is where we have to use the complexMessage builder function. In this case, we will use the \u0026quot;content\u0026quot; and \u0026quot;embed\u0026quot; key to set the respective parts of our message:\n{{ $embed := cembed \u0026#34;title\u0026#34; \u0026#34;This is a title\u0026#34; \u0026#34;description\u0026#34; \u0026#34;This is a description.\u0026#34; \u0026#34;color\u0026#34; 0xff0000 \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;name\u0026#34; \u0026#34;Field 1\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Value 1\u0026#34; \u0026#34;inline\u0026#34; true) (sdict \u0026#34;name\u0026#34; \u0026#34;Field 2\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Value 2\u0026#34; \u0026#34;inline\u0026#34; true) ) \u0026#34;author\u0026#34; (sdict \u0026#34;name\u0026#34; .User.Username \u0026#34;icon_url\u0026#34; (.User.AvatarURL \u0026#34;256\u0026#34;) ) }} {{ $message := complexMessage \u0026#34;content\u0026#34; \u0026#34;This is some content, appearing above the embed below.\u0026#34; \u0026#34;embed\u0026#34; $embed }} {{ sendMessage nil $message }} Similarly, we provide a complexMessageEdit function to edit messages with both content and embeds. The syntax is the same as complexMessage, minus a few keys that cannot be edited. Please refer to the documentation below.\nThe complexMessage builder takes a lot more keys that give you fine-grained control over the message you want to send. Refer to the message functions documentation for a complete description. You\u0026rsquo;re already quite far into the course, so you should be able to understand this documentation without much trouble.\n","date":"0001-01-01","id":19,"permalink":"/learn/intermediate/embeds-and-messages/","summary":"\u003cp\u003eUntil now, we have just used the \u003ca href=\"/learn/beginner/simple-responses/\"\u003edefault response behavior\u003c/a\u003e to make our custom\ncommands respond with some text. This makes sense for quick mockups or relatively simple commands. However, this may be\ninconvenient or Not What You Want in some cases. In this chapter, we will explore how to send messages to different\nchannels, edit existing messages, and send messages with embeds, vastly expanding your toolbox for creating complex\ncustom command systems.\u003c/p\u003e","tags":[],"title":"Embeds and Messages"},{"content":"The Custom Command Database is used for persistent storage between custom command executions. The database page displays all database entries created by custom commands, allowing you to view details on or delete individual entries.\n1 Entry ID 2 Created Timestamp 3 Updated Timestamp 4 Expiry Timestamp 5 User ID 6 Key 7 Value 8 Size of Value 9 Delete Entry 10 Page Navigation 11 Search Query 12 Search Bar\nEntries Entry ID The ID is assigned by the system and unique within YAGPDB\u0026rsquo;s database. The database page is sorted by descending ID. You may search for a specific ID using the Search Bar (11) with ID Query (10).\nCreated Timestamp UTC timestamp of when the entry was created.\nUpdated Timestamp UTC timestamp of when the entry was updated. Increasing or setting a database value updates this timestamp.\nExpiry Timestamp UTC timestamp of when the entry will expire. An expired entry will not be retrieved by database functions, but will appear on the database page.\nUser ID The user-defined ID of the entry (does not have to be a user\u0026rsquo;s ID, accepts any int64). You may search for a specific ID using the Search Bar (11) with User ID Query (10).\nKey The user-defined key of the entry. A key is a string, max 256 characters. You may search for a specific key using the Search Bar (11) with Key Query (10).\nValue The serialized value of the database entry.\nSize of Value Size of the value in bytes. YAGPDB database entries have a max value size of 100 kB.\nDelete Entry Deletes the individual entry after confirmation. You may only delete one entry at a time.\nPage Navigation Navigates to the next or previous page of entries. Each page lists 100 entries at a time.\nSearch Query Dropdown selection of the type of value to search by. Available options are ID, User ID, and Key.\nSearch Bar Number or Text to match against database entries. Results will only include entries that exactly match the search pattern.\nWhen searching for a Key, the search query supports PostgreSQL patterns.\n_ matches any single character. % matches any sequence of zero or more characters. To search for any database entries whose Key contains yagpdb, use %yagpdb% as your search pattern.\n","date":"0001-01-01","id":20,"permalink":"/docs/custom-commands/database/","summary":"\u003cp\u003eThe Custom Command Database is used for persistent storage between custom command executions. The database page displays\nall database entries created by custom commands, allowing you to view details on or delete individual entries.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-b9e1a5fbebb0d277df16b0e317ba0145-lightbox\"\u003e\n\u003cimg alt=\"Overview of the Database page.\" height=\"831\" id=\"h-rh-i-b9e1a5fbebb0d277df16b0e317ba0145\" src=\"/docs/custom-commands/overview_database.png\" width=\"1319\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-b9e1a5fbebb0d277df16b0e317ba0145-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of the Database page.\" height=\"831\" id=\"h-rh-i-b9e1a5fbebb0d277df16b0e317ba0145\" src=\"/docs/custom-commands/overview_database.png\" width=\"1319\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ccenter\u003e\n\u003cp\u003e\u003cstrong\u003e1\u003c/strong\u003e Entry ID \u003cstrong\u003e2\u003c/strong\u003e Created Timestamp \u003cstrong\u003e3\u003c/strong\u003e Updated Timestamp \u003cstrong\u003e4\u003c/strong\u003e Expiry Timestamp \u003cstrong\u003e5\u003c/strong\u003e User ID \u003cstrong\u003e6\u003c/strong\u003e Key \u003cstrong\u003e7\u003c/strong\u003e\nValue \u003cstrong\u003e8\u003c/strong\u003e Size of Value \u003cstrong\u003e9\u003c/strong\u003e Delete Entry \u003cstrong\u003e10\u003c/strong\u003e Page Navigation \u003cstrong\u003e11\u003c/strong\u003e Search Query \u003cstrong\u003e12\u003c/strong\u003e Search Bar\u003c/p\u003e","tags":[],"title":"Database"},{"content":"When you first started this course, you learned about primitive data types. In the previous chapter we name-dropped two more types: \u0026ldquo;slice\u0026rdquo;, and \u0026ldquo;sdict\u0026rdquo; (\u0026ldquo;map\u0026rdquo;), both without much elaboration. In this chapter, we will explore these data types in more detail.\nSlices A slice is an ordered list of items. In custom commands, we can create a slice by providing the items in order to the cslice function:\n{{ $fruits := cslice \u0026#34;banana\u0026#34; \u0026#34;orange\u0026#34; \u0026#34;apple\u0026#34; }} All the elements in the $fruits slice happen to have the same type (string), but this is not a requirement: it is valid, though rare, for a slice to contain elements of different types.\nBesides primitives, slices may also contain more complex data types. In previous chapters, for instance, we represented the fields of an embed as a slice of dictionaries.\nFor available operations on slices, please refer to our template documentation.\nTip: Truthiness of Empty Slices\nEmpty slices are falsy, so can be used directly in conditional statements; it is not necessary to explicitly check the length:\n{{ $users := cslice }} {{/* imagine this data is dynamically generated */}} {{ if $users }} one or more users {{ else }} no users {{ end }} Maps A map is a table that associates values with keys, such that it is easy and efficient to retrieve the value corresponding to a given key.\nFor example, a program that implements a reputation system might wish to use a map from user IDs (key) to reputation points (value) internally. Using this map, the program can quickly look up and modify the reputation points for any given user.\nCustom commands offer two kinds of maps: sdicts and dicts. A sdict only supports string keys (hence the name: string dictionary), whereas a dict supports all comparable data types.\nTo create a map, provide a sequence of key-value pairs to the sdict or the dict function as appropriate:\n{{ $fruitPrices := sdict \u0026#34;pineapple\u0026#34; 3.50 \u0026#34;apple\u0026#34; 1.50 \u0026#34;banana\u0026#34; 2.60 }} {{/* For readability, it\u0026#39;s common to put each key/value pair on a new line. */}} {{ $userReputation := dict 935212563644420158 3 204255221017214977 5 }} {{/* Pass no arguments for an empty map. */}} {{ $empty := sdict }} As with slices, empty maps are falsy and so can be used directly in conditional statements.\nFor available operations on maps, please refer to our template documentation.\nNote: Maps Print Ordered by Key\nConsider the following code that displays the value of $fruitPrices as defined in the previous example:\n{{ $fruitPrices := sdict \u0026#34;pineapple\u0026#34; 3.50 \u0026#34;apple\u0026#34; 1.50 \u0026#34;banana\u0026#34; 2.60 }} {{ $fruitPrices }} yielding\nmap[apple:1.5 banana:2.6 pineapple:3.5] Though the output is ordered by key, this feature is only implemented for ease for debugging: maps are otherwise unordered data structures. If your program relies on the entries of a map being ordered, consider using a slice instead.\n","date":"0001-01-01","id":21,"permalink":"/learn/intermediate/maps-and-slices/","summary":"\u003cp\u003eWhen you first started this course, you learned about \u003ca href=\"/learn/beginner/variables-and-data-types/\"\u003eprimitive data types\u003c/a\u003e.\nIn the previous chapter we name-dropped two more types: \u0026ldquo;slice\u0026rdquo;, and \u0026ldquo;sdict\u0026rdquo; (\u0026ldquo;map\u0026rdquo;), both without much elaboration.\nIn this chapter, we will explore these data types in more detail.\u003c/p\u003e\n\u003ch2 id=\"slices\"\u003eSlices\u003c/h2\u003e\n\u003cp\u003eA slice is an ordered list of items. In custom commands, we can \u003cstrong\u003ec\u003c/strong\u003ereate a \u003cstrong\u003eslice\u003c/strong\u003e by providing the items in order\nto the \u003ccode\u003ecslice\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv class=\"expressive-code\"\u003e\n      \u003cfigure class=\"frame not-content\"\u003e\n        \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e{{ $fruits := cslice \u0026#34;banana\u0026#34; \u0026#34;orange\u0026#34; \u0026#34;apple\u0026#34; }}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n        \u003c/figure\u003e\n      \u003c/figure\u003e\n    \u003c/div\u003e\u003cp\u003eAll the elements in the \u003ccode\u003e$fruits\u003c/code\u003e slice happen to have the same type (\u003cem\u003estring\u003c/em\u003e), but this is not a requirement: it is\nvalid, though rare, for a slice to contain elements of different types.\u003c/p\u003e","tags":[],"title":"Maps and Slices"},{"content":"In a previous chapter, we learned about conditional branching. In this chapter, we will discuss more advanced control flow actions: namely, range, while, and with actions.\nLoop Fundamentally, loops provide a way to perform repeated actions. There are two loop actions available in custom commands: range, which repeats an action for each entry in a data structure, and while, which repeats an action as long as a condition holds.\nRange The range action performs an action for each entry in a slice or map; we say that range iterates over the slice or map. If you have experience with other programming languages, range is roughly equivalent to a for-each loop.\nRanging over slices We will explain how range works with a slice using an illustrative example. The program below iterates over a slice of snacks and generates a line of output for each one.\n{{ $snacks := cslice (sdict \u0026#34;Name\u0026#34; \u0026#34;chips\u0026#34; \u0026#34;Calories\u0026#34; 540) (sdict \u0026#34;Name\u0026#34; \u0026#34;peanuts\u0026#34; \u0026#34;Calories\u0026#34; 580) (sdict \u0026#34;Name\u0026#34; \u0026#34;crackers\u0026#34; \u0026#34;Calories\u0026#34; 500) }} {{ range $snacks }} {{ .Name }} contain {{ .Calories }} calories. {{ end }} The loop body—that is, the code between the opening range $snacks and the closing end—is executed multiple times, with the dot . set to each element of the slice in succession.\nFor instance, in the first iteration, the . holds the first element of the slice: (sdict \u0026quot;Name\u0026quot; \u0026quot;chips\u0026quot; \u0026quot;Calories\u0026quot; 540). So\n{{ .Name }} contain {{ .Calories }} calories. evaluates to\nchips contain 540 calories. Likewise, the second iteration produces peanuts contain 580 calories, and the third produces crackers contain 500 calories. The complete output of the program is\nchips contain 540 calories. peanuts contain 580 calories. crackers contain 500 calories. Notice that this output contains some unwanted whitespace: ideally, we want each snack to appear on a separate line with no leading indentation. However, the extra whitespace is to be expected with our current program; the range block is indented, and YAGPDB is simply reproducing that indentation:\n{{ range $snacks }} {{ .Name }} contain {{ .Calories }} calories. ^^^^ {{ end }} To fix the excess whitespace in the output, then, one solution is to remove the corresponding whitespace in our source code:\n{{ range $snacks }}{{ .Name }} contains {{ .Calories }} calories. {{ end }} However, though this version works, we have sacrificed readability in the process. Can we find a way to keep our source code indented while simultaneously hiding this indentation from the final output? It turns out that we can, by carefully adding trim markers.\n{{ range $snacks }} {{- .Name }} contain {{ .Calories }} calories. ^^^ {{ end }} {{- is a left trim marker that instructs YAGPDB to ignore all leading whitespace, so this new version is functionally equivalent to the previous solution. A corresponding right trim marker, -}}, also exists and trims all trailing whitespace.\nTip: Trim Markers\nUse trim markers {{- and -}} to control the whitespace output by your program.\nA mnemonic to help remember what {{- and -}} do is to view them as arrows that gobble up whitespace in the direction they point; for instance, {{- points left, and eats all whitespace to the left.\nRanging over maps It is also possible to range over the (key, value) pairs of a map. To do so, assign two variables to the result of the range action, corresponding to the key and value respectively. (Note that the dot . is still overwritten when ranging with variables.)\nFor example, the following program displays the prices of various types of fruit, formatted nicely to 2 decimal places with the printf function.\n{{ $fruitPrices := sdict \u0026#34;pineapple\u0026#34; 3.50 \u0026#34;apple\u0026#34; 1.50 \u0026#34;banana\u0026#34; 2.60 }} {{ range $fruit, $price := $fruitPrices }} {{- $fruit }} costs ${{ printf \u0026#34;%.02f\u0026#34; $price }}. {{ end }} The names of the variables assigned to the key and value are arbitrary; instead of range $fruit, $price := $fruitPrices, we could also have written range $k, $v := $fruitPrices. However, if we use the names $k, $v, we must consistently refer to those in the loop body. That is, the following program is erroneous:\n{{ range $k, $v := $fruitPrices }} {{- /* ERROR: $fruit and $price are undefined; must use $k and $v instead */}} {{- $fruit }} costs ${{ printf \u0026#34;%.02f\u0026#34; $price }}. {{ end }} Note: Index-Value-Pairs of a Slice\nThis two-variable form of range can also be used with a slice, in which case the first variable tracks the position of the element starting from 0.\nRarer forms of range There are a few other, less common ways to invoke the range action.\nIterating n times. To iterate a fixed number of times, provide an integer to range:\n{{ range 5 }} {{/* executed 5 times */}} {{ end }} To iterate over an interval of integers (say, the integers between 5 and 10 exclusive), use the seq function to generate a slice of integers and then range over the result:\n{{ range seq 5 10 }} {{/* executed with the dot . set to 5, 6, 7, 8, 9 in succession */}} {{ end }} Single-variable range. Instead of using the dot . to access the current element or value, one can also assign it to a variable:\n{{ $sports := cslice \u0026#34;tennis\u0026#34; \u0026#34;basketball\u0026#34; \u0026#34;soccer\u0026#34; }} {{ range $sport := $sports }} {{/* executed with $sport set to \u0026#34;tennis\u0026#34;, \u0026#34;basketball\u0026#34;, \u0026#34;soccer\u0026#34; in succession */}} {{ end }} Note that the dot . is still overwritten when using a variable.\nRange with else branch. Similar to an if conditional, a range action may also have an else block, executed if the slice or map is empty.\n{{ $users := cslice }} {{/* imagine this data is dynamically generated */}} {{ range $user := $users }} {{/* do something with $user */}} {{ else }} no users {{ end }} Accessing global context data in range The following program illustrates a common error for first-time users of range.\n{{ $nums := cslice 1 2 3 }} {{ range $nums }} {{/* ... */}} {{ .User.Username }} {{/* ERROR: can\u0026#39;t evaluate field User in type interface {} */}} {{ end }} The problem is that, inside the range block, the dot . is overwritten by successive elements of the slice 1, 2, 3. While this behavior is generally useful—we often want to refer to the current element in a range action—it is counterproductive here, as .User.Username tries to look up the field User on an integer (and fails to do so.) What we really want is to access the global context data as it was before the range loop. One solution is to save the original context data in a variable prior to the loop:\n{{ $dot := . }} {{ range ... }} {{ $dot.User.Username }} {{ end }} To make this pattern easier, before each custom command execution, YAGPDB predefines the variable $ as the initial context data for you.\nAccessing Global Context Data\nIn a range block, the dot is overwritten by elements of the slice or map, so code such as .User.Username is likely to error. If you need to access the global context data, do so through the predefined $ variable instead.\n{{ range ... }} {{ $.User.Username }} {{/* instead of .User.Username */}} {{ end }} While while loops as long as the specified condition is truthy. Unlike the range action, the dot . is not affected.\nFor instance, the following code loops as long as $n is not 1. In each iteration, $n is updated to either n/2 or 3n+1.\n{{ $n := 19 }} {{ print $n \u0026#34; \u0026#34; -}} {{ while ne $n 1 }} {{- if eq (mod $n 2) 0. }} {{- $n = div $n 2 }} {{- else }} {{- $n = mult $n 3 | add 1 }} {{- end -}} -\u0026gt; {{ print $n \u0026#34; \u0026#34; -}} {{ end }} As with range, it is also possible to attach a else branch to a while loop, executed if the condition is falsy initially.\nTip: Idiomatic Iteration\nMany while loops can be written as a more idiomatic range loop instead. In particular, to iterate a fixed number of times, use {{ range n }} as in {{ range 5 }} instead of maintaining your own counter variable with while.\nBreak and Continue In custom commands, we provide two actions to control the flow of loops: {{ break }} and {{ continue }}. break exits the loop prematurely, whereas continue skips the remainder of the current iteration and jumps to the next one. These can prove very useful to optimize your code for size and readability, with similar benefits to guard clauses with {{ return }} introduced in earlier chapters.\n","date":"0001-01-01","id":22,"permalink":"/learn/intermediate/loops/","summary":"\u003cp\u003eIn a previous chapter, we learned about \u003ca href=\"/learn/beginner/conditional-branching/\"\u003econditional branching\u003c/a\u003e.\nIn this chapter, we will discuss more advanced control flow actions: namely, \u003ccode\u003erange\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, and \u003ccode\u003ewith\u003c/code\u003e actions.\u003c/p\u003e\n\u003ch2 id=\"loop\"\u003eLoop\u003c/h2\u003e\n\u003cp\u003eFundamentally, loops provide a way to perform repeated actions. There are two loop actions available in custom commands:\n\u003ccode\u003erange\u003c/code\u003e, which repeats an action for each entry in a data structure, and \u003ccode\u003ewhile\u003c/code\u003e, which repeats an action as long as a\ncondition holds.\u003c/p\u003e\n\u003ch3 id=\"range\"\u003eRange\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003erange\u003c/code\u003e action performs an action for each entry in a slice or map; we say that range \u003cem\u003eiterates\u003c/em\u003e over the slice or\nmap. If you have experience with other programming languages, \u003ccode\u003erange\u003c/code\u003e is roughly equivalent to a for-each loop.\u003c/p\u003e","tags":[],"title":"Loops"},{"content":"YAGPDB provides a database for use in your CCs. Entries in this database are used to store persistent data that you want to keep between custom command executions. You access and manipulate these entries with the database functions, which we will elaborate on in this guide.\nOverall This section covers the structure of a database entry, the database\u0026rsquo;s size limits, as well as the entry\u0026rsquo;s size limit and lastly the interaction limit per custom command execution.\nStructure of an Entry A database entry has the following structure:\nField Description .ID The ID of this entry. Not to be confused with the User ID. .GuildID The server ID. .UserID ID of the associated user. .User The associated user object. .CreatedAt When this entry was created. .UpdatedAt When this entry was last updated. .ExpiresAt When this entry will expire. .Key The key of this entry. .Value The value of this entry. .ValueSize The size of the value in bytes. The fields .CreatedAt, .UpdatedAt, and .ExpiresAt all evaluate to a time.Time object, so all methods on time.Time are applicable.\nNote: About That User ID\nThe user ID does not have to point to a valid Discord user—it can be any integer. For instance, it is conventional (but not required) to store server-global data under the user ID 0, in which case the UserID field will be 0 and the User field will be invalid. See also Global vs. User Entries.\nSize Limitations All things computers and data have limitations, and the YAGPDB database is no exception. However, we have tried to set these limits generously (within reason), and we expect most custom commands will never run afoul of them.\nLimit on total entries. You can have up to 50 * member_count entries in your server\u0026rsquo;s database. If your server has premium activated, this limit increases to 500 * member_count.\nFor instance, if your server has 75 members and does not have premium, your database entry limit is\n50 * member_count = 50 * 75 = 3750 and hence if you exceed 3750 database entries, all functions that create new entries will fail with the error Above DB Limit.\nNote that although the entry limit is a function of your server member count, there is no per-user limit. That is, a single user can have more than 50 entries under their ID as long as the total number of entries in the server remains under the limit.\nLimits on individual entries. Database entry keys are limited to 256 bytes in length; dbSet and dbSetExpire will silently truncate your input key if its length exceeds this limit.\nThe size of a database entry, as reported by the ValueSize field, is limited to 100 kB. (Internally, your data is serialized with msgpack and the length of the serialized sequence of bytes is what matters.)\nInteraction Limits In addition to limiting the size of your server database, we also limit the number of times you interact with the database within a custom command execution. Specifically, you can only call database functions\u0026mdash;those prefixed by db \u0026mdash;up to 10 times within a custom command execution. The limit increases to 50 if you have premium active.\nBesides the main limit, database functions that act on multiple entries, namely dbCount, dbGetPattern, dbGetPatternReverse, dbTopEntries, and dbBottomEntries, also count toward a separate limit. Specifically, these \u0026lsquo;multiple interaction\u0026rsquo; database functions can only be used twice in a custom command execution (10 with premium.)\nThat concludes the overview, now let\u0026rsquo;s get into basic interactions!\nBasic Interactions dbSet dbSet creates or overwrites an entry in the database.\n{{ dbSet user_id key value }} where user_id is any integer, key is the name of the entry, and value is arbitrary.\nWarning: Storing IDs\nNumbers are stored as 64-bit floats internally, which can result in a loss of precision when storing IDs or similarly large integers. Instead, convert IDs to strings before storing them in database and convert back to integer on retrieval.\nSee Storing IDs for more information.\ndbGet We know how to create database entries; now, how do we retrieve them?\nThis is where dbGet comes in: as its name suggests, it fetches the database entry with the given user ID and key. If no such entry exists, it returns nil.\n{{ dbGet user_id key }} Note: Beware the Return Type\ndbGet returns the database entry object, not the value. To access the value, read the Value field:\n{{ (dbGet user_id key).Value }} dbDel Now we know how to create and fetch entries from the database. But a good program also frees unused storage, and custom commands are no exception. Use dbDel to delete a database entry:\n{{ dbDel user_id key }} Advanced Interactions Now, you might want to become a little more special with your database—that\u0026rsquo;s why we have a few more functions, dbIncr and dbSetExpire. With these functions, you are able to do more complex things with the database that would otherwise be quite hard to achieve, or at least not very efficient.\ndbIncr dbIncr increases the value of the entry by the given number and returns the incremented value in the same action, allowing you to further use the value. Said increment can be any valid number, that is, integers and float. Do note, however, that the return type of dbIncr is always a float, even if you use an integer for the increment argument.\n{{dbIncr \u0026lt;UserID\u0026gt; \u0026lt;Key\u0026gt; \u0026lt;Increment\u0026gt;}} dbIncr also conveniently initializes a database entry to the given increment should one with the given UserID and Key not already exist. Try thinking about how you would implement a custom command that increases a given entry by a set amount, gets the value, but also sets a new entry if it doesn\u0026rsquo;t already exist.\n{{$db := dbGet .User.ID \u0026#34;someKey\u0026#34;}} {{$add := add (toFloat $db.Value) $x}} {{dbSet .User.ID \u0026#34;someKey\u0026#34; (str $add)}} {{$add}} As you see, using only basic functions essentially requires you to waste a database function call you can probably better use elsewhere. And as we discussed in the beginning, those are limited at 10 (50 with premium), so quite a precious resource that should not be wasted.\ndbSetExpire Now you might want to set entries which get deleted after a while. To do so, you can use dbSetExpire.\nAs we recall from the beginning, database entries have an .ExpiresAt field of type time.Time. The dbSetExpire function adds a timestamp to this field, telling the bot that we only want to use the DB entry until then.\n{{dbSetExpire \u0026lt;userID\u0026gt; \u0026lt;Key\u0026gt; \u0026lt;Value\u0026gt; \u0026lt;Expires in\u0026gt;}} The Expires in is given in seconds.\nA common use case for this function is a cooldown: As long as the entry exists, the command is still on cooldown.\n{{ if $db := dbGet 2000 \u0026#34;cooldown\u0026#34; }} Command is on cooldown :( Cooldown will be over at {{ $db.ExpiresAt.Format \u0026#34;Mon 02 Jan 15:04:05\u0026#34; }} {{ return }} {{ end }} {{ dbSetExpire 2000 \u0026#34;cooldown\u0026#34; \u0026#34;true\u0026#34; 60 }} Command is not on cooldown :) Note: Backend Expiry Behavior\nAs a side effect, expired entries will be considered gone (i.e. deleted) by YAGPDB, but still remain in the underlying database. You can observe this effect by visiting your database view page.\nMultiple Interactions Lastly there are special functions which allow you to get multiple entries. We coincidentally call those multiple entry interactions. Every function except one returns a slice of entries. Depending on what function you use, this slice is sorted by certain criteria.\ndbCount This is the only function interacting with multiple entries that doesn\u0026rsquo;t return a slice. Since this function is fairly easy to understand, we\u0026rsquo;ll start with that. As usual, first the syntax:\n{{dbCount \u0026lt;userID\u0026gt;}} {{/* or */}} {{dbCount \u0026lt;pattern\u0026gt;}} {{/* or as query */}} {{dbCount (sdict \u0026#34;userID\u0026#34; \u0026lt;userID\u0026gt; \u0026#34;pattern\u0026#34; \u0026lt;pattern\u0026gt;)}} dbCount counts the entries either for the given database userID or the pattern for database keys. Alternatively, you can make it count entries that match both conditions by passing in an sdict with the keys userID for the ID and pattern for database keys that are to be counted. The function returns the number of entries that match the given criteria.\npattern is a basic PostgreSQL pattern, which we explain further down in the Patterns section.\ndbTopEntries / dbBottomEntries These functions return a slice of DB entry objects ordered by the value. dbTopEntries orders by descending value, and dbBottomEntries by ascending value. Both of these are hard-limited to at most 100 entries (for premium as well), and this can be limited further with the amount argument.\n{{dbTopEntries \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt;}} {{dbBottomEntries \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt;}} Let\u0026rsquo;s walk through these arguments one by one. For pattern, we use basic PostgreSQL patterns. The amount specifies how many entries we want to retrieve. Lastly, you tell YAGPDB how many entries it should skip using the nSkip argument.\nNow, to retrieve the value of each entry, we range over the given slice and access the .Value field:\n{{$entries := dbTopEntries \u0026#34;someKey\u0026#34; 10 0}} {{range $entries}} Current Entry Value: {{.Value}} {{end}} In analogy to the above code example, you can access any other field as well.\ndbGetPattern / dbGetPatternReverse These two functions allow you to get multiple entries under one user ID with matching keys, again using patterns. They return a slice of entries sorted by value, just as the above functions. The only difference here is only the limitation to one UserID instead of all UserIDs.\n{{dbGetPattern \u0026lt;userID\u0026gt; \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt;}} {{/* or */}} {{dbGetPatternReverse \u0026lt;userID\u0026gt; \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt;}} Just as above, we range over the given slice to access fields of the entry object. For simplicity\u0026rsquo;s sake however, no code example, as it should be pretty clear how to do this.\ndbDelMultiple This function allows you to delete multiple entries in one go, instead of one at a time with dbDel. Its syntax is a little more intricate than other functions:\n{{dbDelMultiple \u0026lt;query\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;skip\u0026gt;}} query is a sdict with the following keys:\nuserID: delete entries under this user ID. If this key is not provided, it\u0026rsquo;ll default to all IDs. pattern: delete entries with keys matching this pattern. reverse: if true, start deleting entries with the lowest value first. Defaults to false. amount specifies how many entries should be deleted in one go, maxing out at 100. skip specifies how many of matching entries should be skipped. Note that this function also returns the amount of deleted entries, which is likely most useful assigned to a variable.\nWith all that in mind, the following example code deletes up to 100 matching entries with Keys matching the pattern test% and UserID of the current user, finally outputting the number of entries deleted:\n{{$deleted := dbDelMultiple (sdict \u0026#34;userID\u0026#34; .User.ID \u0026#34;pattern\u0026#34; \u0026#34;test%\u0026#34;) 100 0}} Deleted {{$deleted}} entries! dbRank This function returns the rank (that is, the position in an ordered list) of a specified entry in the set of entries matching criteria provided by query.\n{{dbRank \u0026lt;query\u0026gt; \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt;}} query is as above a sdict with the following options:\nuserID: search only through entries stored under this ID. Will default to all IDs, if not provided. pattern: only count entries with matching keys; defaults to entries with any key. reverse: if true, lower valued entries will have a higher (better) rank. Default is false. As an example, to find the rank of the entry with the key test for the current user in all of this user\u0026rsquo;s entries, you may want to use the following code:\n{{$rank := dbRank (sdict \u0026#34;userID\u0026#34; .User.ID) .User.ID \u0026#34;test\u0026#34;}} The specified entry\u0026#39;s rank is {{$rank}}. Appendix Patterns As mentioned earlier, we use patterns for a set of functions. Obviously, you need to know what they are and how to use them. The patterns are based on SQL LIKE patterns, so if you\u0026rsquo;re familiar with them, you\u0026rsquo;re good to go. If not, don\u0026rsquo;t worry, they\u0026rsquo;re quite easy to understand.\nThere\u0026rsquo;s only two special characters you need to know: % and _. That\u0026rsquo;s right, just those two! In case you need to use those literally in a pattern, escape them with a backslash (\\% and \\_). Their respective purpose is also quite simple:\nThe percent sign % matches any sequence of zero or more characters The underscore _ matches any single character Okay, with that in mind, let\u0026rsquo;s take a look at an example. The following pattern will match anything that starts with the letter l and ends in n.\nl%n The following example showcases the usage of _.\nhel_o This pattern matches words such as hello, helgo, heloo.\nSerialization Saving values with custom types to database may result in their values being serialized to a different type, meaning that you might have to convert it back to its original type when retrieving. For example, saving the result of a cembed to call to database will result in it becoming a map[string] interface{}. The following code will showcase this behavior:\n{{$embed := cembed \u0026#34;description\u0026#34; \u0026#34;Serialization!\u0026#34;}} {{printf \u0026#34;Type before storing: %T\u0026#34; $embed}} {{dbSet .User.ID \u0026#34;serialization_example\u0026#34; $embed}} {{$embed_retrieved := (dbGet .User.ID \u0026#34;serialization_example\u0026#34;).Value}} {{printf \u0026#34;Type after retrieving, before converting: %T\u0026#34; $embed_retrieved}} {{printf \u0026#34;Type afer retrieving, after converting: %T\u0026#34; (cembed $embed_retrieved)}} {{dbDel .User.ID \u0026#34;serialization_example\u0026#34;}} However, most commonly used types will be saved with their type information intact, meaning that there will be no need to convert them after retrieval. In particular, sdict, dict, and cslice may be saved directly to database and will retain their original types.\nStoring IDs You might have noticed that, whenever you\u0026rsquo;re storing a user ID, channel ID, etc. into your database, it will come back as a weird value, such as 5.241379415938826e+17. This is because they\u0026rsquo;re saved as floats, hence the bot formatting it in scientific notation. Even converting back to an integer will not solve this, because of how floats are represented they will round ID numbers. To prevent this, simply convert them to a string before storing and converting back to int upon retrieving, like so:\n{{ dbSet 2000 \u0026#34;someKey\u0026#34; (str .User.ID) }} {{ $userID_received := toInt (dbGet 2000 \u0026#34;someKey\u0026#34;).Value }} {{ eq .User.ID $userID_received }} {{ dbDel 2000 \u0026#34;someKey\u0026#34; }} Try removing str, and observe that the IDs no longer match.\nGlobal vs. User Entries When you\u0026rsquo;ve been using the database for quite a while now, you surely have heard of so-called \u0026ldquo;global\u0026rdquo; and \u0026ldquo;per-user\u0026rdquo; entries.\nThese terms are often used and help get the point across when explaining the effect, but when it comes to understanding the workings behind it, this is not the right way to think about it.\nWhen you do so, you exclude all possible variations and just think \u0026ldquo;If I have a 0 as the user ID, it\u0026rsquo;s a global db and if it\u0026rsquo;s .User.ID, it becomes a per-user db\u0026rdquo;. You block yourself from creating systems that are case-dependent, over-complicate things and confuse yourself.\nThe way to go about this is to think of it in terms of the database entries themselves, and how they\u0026rsquo;re used / going to be used in your system. As we talk about this further, we do so with the assumption that you have used at least a few database functions already.\nUnderstanding a Database Entry Vaguely In a map, you have key-value pairs, where each value corresponds to its key. Database entries work similarly, except each value corresponds to the combination of the UserID and key. Basically, two database entries are unique if either the UserID or Key differ.\nEach of the following line corresponds to and returns different database entries, since they don\u0026rsquo;t share the same set of user ID and key.\n{{ dbGet 20 \u0026#34;apple\u0026#34; }} {{ dbGet 20 \u0026#34;banana\u0026#34; }} {{ dbGet 30 \u0026#34;apple\u0026#34; }} What do These Terms Mean? Having understood DB entries, we can now define these terms in a better way:\nGlobal Entries: If everyone/everything refers to the same database entry, we conventionally call it a global entry. User/Channel-specific entries: If different users/channels refer to different entries based on any set conditions, we call them per-user entries, or similar terms. Before you write your code, you need to decide how your command will use the CC database and then take action accordingly.\nNeed a different database entry in each channel that is independent of the user? Use dbSet channelID \u0026quot;key\u0026quot; value.\nNeed different database entries in separate channels that are dependent on the user? Use dbSet .User.ID \u0026quot;channelID\u0026quot; value or dbSet channelID (str .User.ID) value depending on what kind of data you\u0026rsquo;re expecting to get from dbTopEntries, or just any other custom command.\nIt\u0026rsquo;s all about playing with the userID and key to get what you need. This should hopefully give you a little better idea and push you to think in the right direction.\n","date":"0001-01-01","id":23,"permalink":"/learn/intermediate/database/","summary":"\u003cp\u003eYAGPDB provides a database for use in your CCs. Entries in this database are used to store persistent data that you want\nto keep between custom command executions. You access and manipulate these entries with the \u003ca href=\"/docs/reference/templates/functions/#database\"\u003edatabase functions\u003c/a\u003e,\nwhich we will elaborate on in this guide.\u003c/p\u003e\n\u003ch2 id=\"overall\"\u003eOverall\u003c/h2\u003e\n\u003cp\u003eThis section covers the structure of a database entry, the database\u0026rsquo;s size limits, as well as the entry\u0026rsquo;s size limit and\nlastly the interaction limit per custom command execution.\u003c/p\u003e","tags":[],"title":"Database"},{"content":"Below are some exercises to help you practice and reinforce your understanding of the concepts discussed in the previous sections. Remember to use the template reference if you need help. Do them at your own pace and whenever you feel like it.\nDuplicates in a List You are given a list of numbers having some repeated digits. Write a CC which will eliminate duplicate entries and return the cleaned list. The list is as follows: 42 1 2 81 3 5 42 19 2 42 19 81 46.\nHave the CC take a list of numbers as an argument instead and then return the cleaned list.\nStars Write a CC that will take a number as an argument and then print a pattern of stars as follows:\n* ** *** **** ***** ROT13 Substitution ROT13 (\u0026ldquo;rotate by 13 places\u0026rdquo;, sometimes hyphenated ROT-13) is a simple letter substitution cipher that replaces a letter with the 13th letter after it, in the alphabet. Because there are 26 letters (2×13) in the basic Latin alphabet, ROT13 is its own inverse; that is, to undo ROT13, the same algorithm is applied, so the same action can be used for encoding and decoding. The algorithm provides virtually no cryptographic security, and is often cited as a canonical example of weak encryption.\nWrite a CC that takes any string and returns the ROT13 version of the string; you may assume that the character set is ASCII and let \u0026ldquo;space\u0026rdquo; character be counted as well. Discard numbers.\nDecode lntcqo vf n pbby obg naq qhpxf ner onq.\nArithmetic Progression A sequence of numbers such that the difference between each term remains constant is called an Arithmetic Progression.\nWe start with a term and add the common difference . We do this for times. To find the sum of any such progression, we use the following formula.\nWrite a custom command for finding the sum of terms of an arithmetic progression, parameterized to , and verify it with above formula in the same command (use the right-hand side of the equation).\n","date":"0001-01-01","id":24,"permalink":"/learn/intermediate/exercises/","summary":"\u003cp\u003eBelow are some exercises to help you practice and reinforce your understanding of the concepts discussed in the previous\nsections. Remember to use the \u003ca href=\"/docs/reference/templates/\"\u003etemplate reference\u003c/a\u003e if you need help. Do them at your own pace\nand whenever you feel like it.\u003c/p\u003e\n\u003ch2 id=\"duplicates-in-a-list\"\u003eDuplicates in a List\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou are given a list of numbers having some repeated digits. Write a CC which will eliminate duplicate entries and\nreturn the cleaned list. The list is as follows: \u003ccode\u003e42 1 2 81 3 5 42 19 2 42 19 81 46\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Exercises"},{"content":"","date":"0001-01-01","id":25,"permalink":"/learn/advanced/","summary":"","tags":[],"title":"Advanced"},{"content":"","date":"0001-01-01","id":26,"permalink":"/docs/moderation/","summary":"","tags":[],"title":"Moderation"},{"content":"","date":"0001-01-01","id":27,"permalink":"/learn/advanced/custom-interactions/","summary":"","tags":[],"title":"Custom Interactions"},{"content":"Everything in moderation, including moderation.\n1 Mod Log Channel 2 Report Channel 3 Moderation DM Error Channel 4 Clean Command 5 Report Command 6 Unban Logging 7 Giverole/Takerole commands 8 Give/Takerole Permitted Roles 9 Give/Takerole Logging 10 External Ban Logging 11 External Kick Logging 12 External Timeout Logging 13 Moderation Tabs 14 Bot Permissions Notice\nModeration Page The moderation page allows configuration of common settings.\nMod Channels Mod Log - The mod log is the channel YAGPDB will send log messages to when most moderation commands are used. Log entries include username and user ID of both the moderator, and the moderated user. They additionally include the reason for relevant commands (defaults to \u0026lt;no reason provided\u0026gt; when not provided), and a log of the channel where the command was run. Report - The channel for YAGPDB to send report messages to when users use the report command. Similar to the mod log, report entries include username and user ID of the user reporting, and the user reported, as well as the reason and message log of the channel. Moderation DM Error - The channel where YAGPDB will send error messages from executing template script within moderation DMs. Command Toggles Certain potentially destructive moderation commands are disabled by default. These commands are:\nThe clean command (4) toggles the clean command. The report command (5) toggles the report command. Giverole/Takerole commands (7) toggle the giverole and takerole commands. Unban/Unmute Logging When the unban/unmute commands are used, YAGPDB will log their usage to the mod log similarly to the other moderation commands.\nWhen using the ban and mute commands with a duration, YAGPDB will automatically undo the punishment after the specified duration. For instance, if you execute ban @user 1d, YAGPDB will ban the user, and 1 day later YAGPDB will execute the unban command with reason \u0026ldquo;Timed ban expired.\u0026rdquo; This action appears in the mod log as YAGPDB being the moderator.\nToggling Unban Logging (6) allows you to enable or disable the logging of Unmute events.\nToggling Give/Takerole Logging (9) allows you to enable or disable the logging of Give/Takerole events.\nExternal Logging By default, only actions performed through YAGPDB will be recorded in the mod-log. Hence, kicking a user using YAGPDB\u0026rsquo;s kick command will result in a log entry, whereas kicking the user directly through Discord\u0026rsquo;s context menu will not be recorded. Enabling external logging for different moderation actions (10), (11), (12) allows the bot to use the server Audit Log to retrieve moderation actions taken by other bots or other users.\nYAGPDB must have View Audit Log permissions to use this feature.\nPermissions Notice The moderation plugin requires additional permissions to function properly. The notice at the top of the screen (14) will inform you of the required permissions for the plugin and alert you if the bot is missing permissions.\nModeration Tools Moderation tools are used to prevent members on your server from being abusive. They can be used via command or triggered by automoderator. Like all inbuilt commands, they may also be triggered within template script using exec/execAdmin.\nMost moderation tools allow you to specify a reason for the mod action. This is included when the action is logged in the mod log and is also, by default, DM\u0026rsquo;d to the offending user when using certain commands. This reason may be retroactively edited using the Reason Command.\nEach of the main moderation tools have individual configuration pages, accessible through the tabs (13).\nCommon Settings 1 Permitted Roles 2 Reason Optional Toggle 3 Moderation DM\nThere are common configuration options worth mentioning.\nPermitted Roles By default, any user with the relevant Discord permission in your server (timeout members for the timeout command, kick members for the kick command, etc.) are able to run the corresponding moderation command. Selecting permitted roles (1) will allow said roles to run the moderation commands even if they do not have required Discord permissions.\nGive/Takerole Permitted Roles (8) operate in the same way.\nReason Optional By default, Timeout, (Un)Mute, Kick, and Ban tools require the moderator to specify a reason. This forces your staff (and yourself, no exceptions!) to specify a reason for taking mod action for the mod logs, and also by default to be DM\u0026rsquo;d to the offending user.\nTo remove the requirement and make the reason optional, you may toggle this on (2).\nModeration DMs Moderation DMs are template scripts (3) which are executed within the offending user\u0026rsquo;s DM. Text output to the response will be directly sent to the offending user.\nTemplates Reference\nAdditional template dot context data is available for Moderation Actions:\n{{.Reason}}: The reason specified in the timeout. {{.Author}}: The author of the punishment, is a user object. {{.Duration}}: The duration of the mod action as a time.Duration format. {{.HumanDuration}}: The duration in a human friendly format (1 hour and 3 minutes for example). {{.WarningID}}: The ID of the warning (when using the warn command). Danger: Template Execution Errors\nAny errors which occur in the template execution will not be logged by default. The offending user will only receive a DM from your server saying Failed executing template. Setting a Moderation DM Error channel allows for the more detailed errors to be captured.\nModeration actions which send DMs are:\nTimeout Mute Kick Ban Warn Timeout Timing a member out employs Discord\u0026rsquo;s timeout feature to prevent users from interacting with your server, temporarily removing all permissions except to read messages. Owners and admin users with the Administrator permission are exempt.\nTimeout Default Duration Similarly to mute and ban, the timeout command has an optional duration. Unlike the mute and ban commands, the timeout tool requires a duration between 60 seconds and 4 weeks. This is a requirement by Discord. For this reason the timeout command has a default duration which is applied if the duration argument is omitted when running the command. By default, this default duration is set to 10 minutes, but can be changed via the timeout tab on the control panel.\nTimeout Command Syntax\nMute Muting a member assigns them the designated \u0026ldquo;Mute role\u0026rdquo; as specified in the Mute tab on the control panel. This allows for you to remove permissions from this role in all or specific channels on your server, effectively removing the user\u0026rsquo;s ability to send messages on your server when muted. You may optionally specify a duration for the mute, after which the user will be unmuted.\nManage Mute Role By default, the mute command will only assign the mute role to the user when they are muted. This allows you to fully customize the permissions granted to or removed from your mute role. Alternatively, enable the \u0026ldquo;Have the bot manage the mute role\u0026rdquo; toggle to allow the bot to automatically alter the permissions of your channels to prevent the muted role from sending messages.\nYou may also allow the bot to remove the muted role\u0026rsquo;s \u0026ldquo;Add Reactions\u0026rdquo; permission automatically by toggling on \u0026ldquo;Disallow Adding Reactions when muted\u0026rdquo; in the mute tab on the control panel. The bot must be automatically managing the mute role for this to work.\nRemove Roles Whilst Muted You may specify roles for YAGPDB to remove from a user whilst muted and give back after they are unmuted. This will let the bot log which of the selected roles the member has at the time of the mute, then return them to said member at the time of unmute.\nMute Default Duration The mute command has an optional duration argument. By default, if no duration is provided, the mute is permanent (or until manually unmuted). To override this, you may set a default duration with the \u0026ldquo;Default mute duration\u0026rdquo; field in the mute tab on the control panel.\nMute Command Syntax\nUnmute Command Syntax\nDanger: Discord Permission Precedence\nWithin a server channel\u0026rsquo;s permission overrides, allowing a permission to a specific role or user supersedes disallowing a permission to a specific role. This means if you grant Role X the permission to send messages in a channel and disallow the Muted role the same permission, a user with both Role X and Muted role will be allowed to send messages in the channel.\nTo solve this issue and allow the mute role to properly remove permissions, select the / instead of the checkmark when configuring other roles\u0026rsquo; permission overrides.\nNote: Unmute Author After Duration Expired\nIf you set a duration for the mute, the bot will unmute the user after the specified duration. When this occurs, it appears as an unmute action taken by YAGPDB in your mod log, regardless of which moderator initially muted the user.\nKick Kicking a user immediately removes them from your server. They may still join back if they use a valid invite link or code.\nDelete User\u0026rsquo;s Last Messages on Kick YAGPDB\u0026rsquo;s kick tool optionally allows you to delete the X most recent messages sent by that user within the channel the kick action takes place in. This can be done by specifying a number of messages to delete with the -cl flag when running the kick command. There is also a \u0026ldquo;Delete the user\u0026rsquo;s last 100 messages\u0026rdquo; toggle in the kick tab on the control panel which enables automatic deletion when the kick tool is used.\nKick Command Syntax\nBan Banning a user uses Discord\u0026rsquo;s native ban feature to remove a user from your server, and prevent that user from joining your server again with any invite code or link. You may optionally specify a duration for the ban, after which the user will be unbanned.\nDelete User\u0026rsquo;s Last Messages on Ban Discord natively allows you to delete a set amount of the offending user\u0026rsquo;s most recent messages upon banning them. This is measured by days\u0026rsquo; worth of messages. This can be done by specifying a number of days\u0026rsquo; worth of messages to delete with the -ddays flag when running the ban command. There is also a \u0026ldquo;Default number of days of messages to delete\u0026rdquo; field in the ban tab on the control panel which enables automatic deletion when the kick tool is used.\nBan Command Syntax\nUnban Command Syntax\nNote: Unban Author After Duration Expired\nIf you set a duration for the ban, the bot will unban the user after the specified duration. When this occurs, it appears as an unban action taken by YAGPDB in your mod log, regardless of which moderator initially banned the user.\nWarnings Warning a user adds an entry to the user\u0026rsquo;s warning log on the server, and optionally appears in the mod log as well. This can be used to better inform future moderation actions based on the user\u0026rsquo;s past behavior. Additionally, it sends a DM to the user with the warning reason, which can be used to dissuade a user from continuing harmful actions without needing to remove their access to your server.\nMessage Logs You may optionally allow YAGPDB to create a message log of the last 100 messages from all users in the channel a warning was issued in. This can help provide context for past warnings and further inform future mod actions. This is enabled in the warnings tab on the control panel.\nWarning Mod Log You may optionally send warnings to the mod log, this is enabled in the warnings tab on the control panel.\nManaging Warnings Warn Command Syntax\nWarnings Command Syntax - Lists warnings of a user.\nEditWarning Command Syntax - Retroactively edits a warning.\nDelWarning Command Syntax - Deletes a warning.\nClearWarnings Command Syntax - Clears the warnings of a user.\nTopWarnings Command Syntax - Shows ranked list of warnings on the server, allowing you to turn misbehavior into a fun minigame for your server members.\nTip: Taking Action on Warn Count\nSome users prescribe an \u0026ldquo;x warnings =\u0026gt; mute/kick/ban\u0026rdquo; rule for their servers. To have YAGPDB automatically take action based on warning count, you can take advantage of the template scripting within the warning DM.\nExample:\n{{/* Number of warnings at which action is to be taken (eg: for action to take place at 4 warnings set threshold to 4) */}} {{ $threshold := 4 }} {{ define \u0026#34;punish_check\u0026#34; }} {{ $threshold := toInt .TemplateArgs }} {{ $warnCount := len (getWarnings .User) }} {{if ge $warns_count $count}} {{/* Add required code for action to be taken when warning count exceeds the threshold. */}} Add code here {{/* Reset warnings for the user. Delete if you do not wish to reset the warnings. */}} {{ $silent := execAdmin \u0026#34;clearwarnings\u0026#34; .User }} {{ end }} {{ end }} {{ if .Channel }} {{ $s := sendTemplate .Channel.ID \u0026#34;punish_check\u0026#34; $count }} {{ else }} {{/* no context channel; use an arbitrary one */}} {{ $s := sendTemplate (index .Guild.Channels 0).ID \u0026#34;punish_check\u0026#34; $count }} {{ end }} ","date":"0001-01-01","id":28,"permalink":"/docs/moderation/moderation-tools/","summary":"\u003cp\u003eEverything in moderation, including moderation.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-501aa8721c8ee5c00782001d0d40d721-lightbox\"\u003e\n\u003cimg alt=\"Overview of the moderation page\" height=\"1363\" id=\"h-rh-i-501aa8721c8ee5c00782001d0d40d721\" src=\"/docs/moderation/overview_moderation.png\" width=\"1135\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-501aa8721c8ee5c00782001d0d40d721-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of the moderation page\" height=\"1363\" id=\"h-rh-i-501aa8721c8ee5c00782001d0d40d721\" src=\"/docs/moderation/overview_moderation.png\" width=\"1135\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ccenter\u003e\n\u003cp\u003e\u003cstrong\u003e1\u003c/strong\u003e Mod Log Channel \u003cstrong\u003e2\u003c/strong\u003e Report Channel \u003cstrong\u003e3\u003c/strong\u003e Moderation DM Error Channel \u003cstrong\u003e4\u003c/strong\u003e Clean Command \u003cstrong\u003e5\u003c/strong\u003e Report\nCommand \u003cstrong\u003e6\u003c/strong\u003e Unban Logging \u003cstrong\u003e7\u003c/strong\u003e Giverole/Takerole commands \u003cstrong\u003e8\u003c/strong\u003e Give/Takerole Permitted Roles \u003cstrong\u003e9\u003c/strong\u003e\nGive/Takerole Logging \u003cstrong\u003e10\u003c/strong\u003e External Ban Logging \u003cstrong\u003e11\u003c/strong\u003e External Kick Logging \u003cstrong\u003e12\u003c/strong\u003e External Timeout Logging \u003cstrong\u003e13\u003c/strong\u003e\nModeration Tabs \u003cstrong\u003e14\u003c/strong\u003e Bot Permissions Notice\u003c/p\u003e\n\u003c/center\u003e\n\u003ch2 id=\"moderation-page\"\u003eModeration Page\u003c/h2\u003e\n\u003cp\u003eThe moderation page allows configuration of common settings.\u003c/p\u003e","tags":[],"title":"Moderation Tools"},{"content":"\rDanger: Advanced Topic\nUse of interactions within YAGPDB is an advanced topic; you will need a thorough understanding of YAGPDB\u0026rsquo;s scripting language before learning interactions.\nInteractions within Discord allow server members to use alternative, built-in features to trigger bots to take action other than messages or reactions. These features include built-in buttons, dropdown selection menus, or submitting a modal (basically a pop-up form). Within custom commands it is possible to not only create and customize these new interactive features, but respond to them as well, opening up new possibilities for ephemeral message responses, modals, and more within custom commands.\nInteraction Lifetime An interaction\u0026rsquo;s lifetime starts with the initial interaction with an interactive element.\nA server member clicks on a button, uses a menu, or submits a modal after filling it out. This interaction is sent to YAGPDB, and becomes available to trigger any custom commands which match it. Within the triggered custom command(s), YAGPDB should then respond once to the interaction, sending a message, updating the triggering message, or sending a modal. This may only be done within the CC which was triggered by the interaction. (optional) Continue to send followup responses for up to 15 minutes until the interaction token expires. graph LR; A[Button pressed] --\u003e B{CC Triggered} C[Menu used] --\u003e B D[Modal submitted] --\u003e B B --\u003e E[Bot sends message response] B --\u003e G[Bot sends modal response] B --\u003e H[Bot updates message] E -.-\u003e F(Bot sends followups) G -.-\u003e F H -.-\u003e F Definitions On the following pages, we will use the listed terms with their respective definitions, which are also used as such by the Discord API.\nInteraction A user engaging with YAGPDB through one of Discord\u0026rsquo;s built-in features: Clicking a button, Making a selection with a select menu, or Submitting a modal. Response YAGPDB is required to respond promptly \u0026ndash; that is, within three (3) seconds \u0026ndash; after receiving an interaction by either sending a message or modal, or by updating the message on which the interaction was triggered. If it does not do this, the user triggering the interaction will see a \u0026ldquo;This application did not respond\u0026rdquo; error. The bot cannot respond to an interaction more than once. Followup Since YAGPDB may only respond to an interaction once, it is subsequently required to send an interaction followup if it still needs to interface with the interaction. These followups can be sent up to 15 minutes after the initial interaction, and you can send as many as you want. YAGPDB may only send a followup in one of the following ways: Sending a followup message, editing an initial response or previous followup message, or getting an initial response or previous followup message. Interactive Elements Elements users can interact with to send interactions, i.e. buttons, menus, and modals. Message Components Interactive Elements which can be attached to YAGPDB\u0026rsquo;s Discord messages, i.e. buttons and menus. Button A button appearing in or under a Discord message sent by YAGPDB. You can create and customize these buttons\u0026rsquo; appearance and behavior with color, emoji, label text, etc. When a button is clicked, an interaction is sent to the bot. Menu A dropdown select menu appearing in or under a Discord message sent by YAGPDB. You can create and customize these menus\u0026rsquo; appearance and behavior with placeholder text, predefined options with labels, descriptions, and/or emojis, designate the entire menu as a user or role select menu instead, etc. When a select menu is used, an interaction is sent to the bot. Modal A pop-up form YAGPDB can send in response to an interaction. It allows users to privately input text which is sent directly to YAGPDB for use in CC scripting. You can create and customize these modals\u0026rsquo; appearance and behavior with a title and fields. YAGPDB can both receive a submitted modal (which is an interaction), and send a modal for a member to fill out, (which is an interaction response). Ephemeral An ephemeral message is sent to a server channel but only appears to a single user. YAGPDB cannot send these ephemeral messages to users except in response to an interaction. Both response messages and followup messages can be ephemeral. ","date":"0001-01-01","id":29,"permalink":"/learn/advanced/custom-interactions/introduction/","summary":"\u003cdiv class=\"callout callout-danger d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/alert-octagon svg-inline callout-icon me-2 mb-3\" id=\"svg-alert-octagon\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M12.802 2.165l5.575 2.389c.48 .206 .863 .589 1.07 1.07l2.388 5.574c.22 .512 .22 1.092 0 1.604l-2.389 5.575c-.206 .48 -.589 .863 -1.07 1.07l-5.574 2.388c-.512 .22 -1.092 .22 -1.604 0l-5.575 -2.389a2.036 2.036 0 0 1 -1.07 -1.07l-2.388 -5.574a2.036 2.036 0 0 1 0 -1.604l2.389 -5.575c.206 -.48 .589 -.863 1.07 -1.07l5.574 -2.388a2.036 2.036 0 0 1 1.604 0z\" /\u003e\n  \u003cpath d=\"M12 8v4\" /\u003e\n  \u003cpath d=\"M12 16h.01\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eDanger: Advanced Topic\u003c/p\u003e","tags":[],"title":"Introduction"},{"content":"Before you can start triggering custom commands with interactive elements\u0026mdash;such as buttons\u0026mdash;you\u0026rsquo;ll obviously need to have elements to interact with. In this section, we\u0026rsquo;ll cover how to create these elements and explore their differences.\nMessage Components Buttons Buttons are probably the simplest interactive element to create, so we\u0026rsquo;ll start with them. To create a button, we use the cbutton function. In and of itself, that is rather useless, so we\u0026rsquo;ll also have to attach it to a message. We do that by calling the complexMessage builder and adding the result of cbutton to it. Finally, we send the message.\n{{ $button := cbutton \u0026#34;label\u0026#34; \u0026#34;My Cool Button\u0026#34; \u0026#34;custom-id\u0026#34; \u0026#34;buttons-duck\u0026#34; }} {{ $m := complexMessage \u0026#34;buttons\u0026#34; $button }} {{ sendMessage nil $m }} Result:\nWe\u0026rsquo;ve successfully crated a basic button! It doesn\u0026rsquo;t do anything yet, but we\u0026rsquo;ll cover that in a later section. In the meantime, play around with the values cbutton takes. Try to attach an emoji to it, or change its style!\nSelect Menus Select menus act as dropdowns, allowing users to select one or more of several options. To further complicate things, select menus come in different types, each offering different functionality. We\u0026rsquo;ll first focus on the most intuitive type, the Text select menu. This type allows you to define a custom list of options.\nAvailable select menu types are as follows:\nText - The options available to be selected are defined when creating the select menu. Options have labels, and can optionally have emojis and longer-form descriptions. User - The options are populated with users on the server by Discord. Role - The options are populated with roles on the server by Discord. Mentionable - The options are auto-populated with both users and roles on the server by Discord, allowing members to select both. Channel - The options are populated with channels on the server by Discord. You can limit which channel types appear as options when creating the select menu. Text Select Menus To create a text select menu, we use the cmenu function. Then, just like with a button, we attach it to a message and send it.\n{{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;text\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose a terrible thing\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Two Ducks\u0026#34; \u0026#34;value\u0026#34; \u0026#34;opt-1\u0026#34; \u0026#34;default\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;A Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;duck-option\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;)) (sdict \u0026#34;label\u0026#34; \u0026#34;Half a Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;third-option\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Don\u0026#39;t let the smaller amount fool you.\u0026#34;)) \u0026#34;max_values\u0026#34; 3 }} {{ sendMessage nil (complexMessage \u0026#34;menus\u0026#34; $menu) }} Opening the select menu that was sent using the above code should yield the following result:\nIn this menu, our first option (Ducks) is defined as default, which is why it is already selected when we look at the menu on our server. You can define multiple default options, however the amount of default options you define must fall between your min_values and max_values.\nWe have also set the max_values to 3, and we haven\u0026rsquo;t set a min_values argument. This means the server member could select anywhere between 1 and 3 of these options.\nOther Select Menu Types The other select menu types are created in the same way as the text select menu, but with a few differences. As Discord automatically populates the options, you need not\u0026mdash;nor can you\u0026mdash;define these options.\n{{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;role\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose roles who are secretly ducks\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck-roles\u0026#34; \u0026#34;max_values\u0026#34; 3 }} {{ sendMessage nil (complexMessage \u0026#34;menus\u0026#34; $menu) }} Channel Select Menus Channel select menus are a bit different from the other types, as they allow you to specify which channel types you want to include in the menu. You do this by using the channel_types field, which accepts a slice of channel types.\n{{ $issuesChannel := \u0026#34;1210135699135926312\u0026#34; }} {{ $updatesChannel := \u0026#34;1210135938722693151\u0026#34; }} {{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose channels which are secretly duck hideouts\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck-channels\u0026#34; \u0026#34;default_values\u0026#34; (cslice (sdict \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34; \u0026#34;id\u0026#34; $issuesChannel) (sdict \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34; \u0026#34;id\u0026#34; $updatesChannel) ) \u0026#34;max_values\u0026#34; 3 \u0026#34;channel_types\u0026#34; (cslice 5 15) }} {{ sendMessage nil (complexMessage \u0026#34;menus\u0026#34; $menu) }} This gives us a select menu that allows us to select only guild announcement and guild form channels.\nModals Modals are a pop-up form that YAGPDB can send in response to an interaction. It allows users to privately input text which is sent directly to YAGPDB for use in your custom command. Although modals are not interactive elements in the same way buttons and menus are, we will cover them here for completeness\u0026rsquo; sake.\nModals are created using the cmodal function. The modal is then sent with the sendModal function. Sending a modal is strictly a response, meaning it can only be sent once a user clicks a button or uses a select menu. You cannot send a modal as a response to a user submitting a modal.\nModal Structure Field Description Title The modal\u0026rsquo;s title, appears at the top of the modal while a user is filling it out. Custom ID The Custom ID is referenced to trigger a custom command when the modal is submitted (which you\u0026rsquo;ll need to do if you care about retrieving what the user inputted). Fields A slice of discordgo.TextInputComponent objects. Let\u0026rsquo;s consider the following piece of code:\n{{ $modal := cmodal \u0026#34;title\u0026#34; \u0026#34;My Custom Modal\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;modals-my_first_modal\u0026#34; \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Name\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Duck\u0026#34; \u0026#34;required\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;Do you like ducks?\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Heck no\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Duck hate essay\u0026#34; \u0026#34;min_length\u0026#34; 100 \u0026#34;style\u0026#34; 2)) }} {{ sendModal $modal }} This code will send a modal with three fields. The first field is a required text input, with \u0026ldquo;Duck\u0026rdquo; as a placeholder, the second field is a text input with a default value, and the third field is a long-form text input that requires at least 100 characters. The custom ID is set to modals-my_first_modal, which helps us identifying the modal when we use a modal submission trigger for a custom command.\nMultiple Components You learned how to create messages with just one component attached to it, but the whole point of components is to have a lot of them available. Let\u0026rsquo;s start with adding some more buttons!\nMore Buttons Note: Button Type Limitations\nButtons with the \u0026ldquo;link\u0026rdquo; style cannot have a Custom ID, and instead require a URL field.\nLink style buttons do not trigger interactions.\nTo add more buttons to a single row, simply toss them all into a slice, like so.\n{{ $button1 := cbutton \u0026#34;label\u0026#34; \u0026#34;Duck One\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck-alpha\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34; }} {{ $button2 := cbutton \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;) \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck-beta\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34; }} {{ $button3 := cbutton \u0026#34;label\u0026#34; \u0026#34;Duck Three\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;) \u0026#34;url\u0026#34; \u0026#34;https://yagpdb.xyz\u0026#34; \u0026#34;style\u0026#34; \u0026#34;link\u0026#34; }} {{ $message := complexMessage \u0026#34;buttons\u0026#34; (cslice $button1 $button2 $button3) }} {{ sendMessage nil $message }} At this stage we have three buttons. Both of the first two buttons will trigger our duck trigger custom command, but the third button will not trigger any custom command. Link buttons do not create interactions.\nWe can differentiate between the two buttons using .StrippedID, which, just like .StrippedMsg, returns our Custom ID without the trigger and everything else before that. In our example, .StrippedID will return -alpha for the first button and -beta for the second button.\nConfirming this behavior will be left as an exercise to the reader (you).\nLet\u0026rsquo;s add a select menu as well, now.\nButtons and a Select Menu We start by copying the previous code over, and define our menu using cmenu. Then, it\u0026rsquo;s just simply adding our newly created menu to the \u0026quot;menu\u0026quot; key of the complex message builder, and sending said message.\n{{ $button1 := cbutton \u0026#34;label\u0026#34; \u0026#34;Duck One\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck-alpha\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34; }} {{ $button2 := cbutton \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;) \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck-beta\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34; }} {{ $button3 := cbutton \u0026#34;label\u0026#34; \u0026#34;Duck Three\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;) \u0026#34;url\u0026#34; \u0026#34;https://yagpdb.xyz\u0026#34; \u0026#34;style\u0026#34; \u0026#34;link\u0026#34; }} {{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;text\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose a terrible thing\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck-alpha\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Ducks\u0026#34; \u0026#34;value\u0026#34; \u0026#34;opt-1\u0026#34; \u0026#34;default\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;opt-2\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;)) (sdict \u0026#34;label\u0026#34; \u0026#34;Half a Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;opt-3\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Don\u0026#39;t let the smaller amount fool you.\u0026#34;)) \u0026#34;max_values\u0026#34; 3 }} {{ $message := complexMessage \u0026#34;buttons\u0026#34; (cslice $button1 $button2 $button3) \u0026#34;menus\u0026#34; $menu }} {{ sendMessage nil $message }} Ordering Components Let\u0026rsquo;s say we want to play Tic-Tac-Toe. If we just add nine buttons into the same slice in our complex message builder, they will just fill the first row with five buttons, and the second row with four buttons, which is definitely not what we are looking for. The solution is to tell YAGPDB precisely how the rows look like and then pass each row to the \u0026quot;button\u0026quot; or \u0026quot;menu\u0026quot; key.\n{{ $blankEmoji := sdict \u0026#34;name\u0026#34; \u0026#34;⬜\u0026#34; }} {{ $row1 := cslice (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-1\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-2\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-3\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) }} {{ $row2 := cslice (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-4\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-5\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-6\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) }} {{ $row3 := cslice (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-7\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-8\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) (cbutton \u0026#34;emoji\u0026#34; $blankEmoji \u0026#34;custom_id\u0026#34; \u0026#34;tictactoe-button-9\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) }} {{ $message := complexMessage \u0026#34;buttons\u0026#34; $row1 \u0026#34;buttons\u0026#34; $row2 \u0026#34;buttons\u0026#34; $row3 }} {{ sendMessage nil $message }} Action Rows As you continue to attach more components, YAGPDB will automatically overflow into new rows. However, this may be undesirable in some cases, such as when you want to have a specific layout for your buttons and/or menus. For that purpose, complexMessage accepts another key, \u0026quot;components\u0026quot;, which is essentially just you providing all the action rows you want.\nTo illustrate, we\u0026rsquo;ll create a message with five action rows, each with a different number of buttons or menus in it.\n{{ $row1 := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 1\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 2\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 3\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 4\u0026#34;) }} {{ $row2 := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 2 - Button 1\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 2 - Button 1\u0026#34;) }} {{ $row3 := cslice (cmenu \u0026#34;type\u0026#34; \u0026#34;mentionable\u0026#34;) }} {{ $row4 := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 3 - Button 1\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 3 - Button 2\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 3 - Button 3\u0026#34;) }} {{ $row5 := cslice (cmenu \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34;) }} {{ $rows := cslice $row1 $row2 $row3 $row4 $row5 }} {{ $message := complexMessage \u0026#34;components\u0026#34; $rows }} {{ sendMessage nil $message }} Final Notes Using emojis Buttons and Select Menu Options both have an \u0026quot;emoji\u0026quot; field, but this field does not accept the regular unicode/name:id formula like reactions do. Emojis in components follow the partial emoji object structure, however only the ID or the Name fields are required, depending on if you are using a custom emoji or not.\nField Description ID ID of the emoji, only necessary when using Custom Emoji. Name Name of the emoji, use the unicode character here. Only necessary when using built-in unicode emojis. {{ $unicodeEmojiButton := cbutton \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;😀\u0026#34;) }} {{ $customEmojiButton := cbutton \u0026#34;emoji\u0026#34; (sdict \u0026#34;id\u0026#34; \u0026#34;733037741532643428\u0026#34;) }} {{ $animatedEmojiButton := cbutton \u0026#34;emoji\u0026#34; (sdict \u0026#34;id\u0026#34; \u0026#34;786307104247775302\u0026#34;) }} {{ $components := cslice $unicodeEmojiButton $customEmojiButton $animatedEmojiButton }} {{ sendMessage nil (complexMessage \u0026#34;components\u0026#34; $components)}} Using dictionaries instead As you probably already discovered when building embeds, you can use sdict in favor of cembed to create some sort of skeleton of your embed for later adjustments, with YAGPDB\u0026rsquo;s template engine automagically handling the conversion for you. This is also true for all the elements we covered in this section, which makes it far easier to conditionally change certain aspects of your interactive elements.\n","date":"0001-01-01","id":30,"permalink":"/learn/advanced/custom-interactions/creating-interactive-elements/","summary":"\u003cp\u003eBefore you can start triggering custom commands with interactive elements\u0026mdash;such as buttons\u0026mdash;you\u0026rsquo;ll obviously need\nto have elements to interact with. In this section, we\u0026rsquo;ll cover how to create these elements and explore their\ndifferences.\u003c/p\u003e\n\u003ch2 id=\"message-components\"\u003eMessage Components\u003c/h2\u003e\n\u003ch3 id=\"buttons\"\u003eButtons\u003c/h3\u003e\n\u003cp\u003eButtons are probably the simplest interactive element to create, so we\u0026rsquo;ll start with them. To create a button, we use\nthe \u003ca href=\"/docs/reference/templates/functions/#cbutton\"\u003e\u003ccode\u003ecbutton\u003c/code\u003e\u003c/a\u003e function. In and of itself, that is rather useless, so we\u0026rsquo;ll\nalso have to attach it to a message. We do that by calling the\n\u003ca href=\"/docs/reference/templates/functions/#complexmessage\"\u003e\u003ccode\u003ecomplexMessage\u003c/code\u003e\u003c/a\u003e builder and adding the result of \u003ccode\u003ecbutton\u003c/code\u003e to it.\nFinally, we send the message.\u003c/p\u003e","tags":[],"title":"Creating Interactive Elements"},{"content":"Custom Commands with the Message Component or Modal Submission trigger allow you to take action upon the press of a button, use of a select menu, or completion of a modal form. Interaction triggers provide new context data for templating.\nIn this section, we\u0026rsquo;ll cover the data available and how to make use of it.\nImportant Context Data A short list of the more important context data available is provided below. For a full list, please see the documentation on the interaction object.\nField Description .Interaction.Token The interaction\u0026rsquo;s token. Is unique to each interaction. Required for sending followup interactions. .CustomID The triggering component/modal\u0026rsquo;s Custom ID. Note: This custom ID excludes the templates- prefix which is added to all components and modals under the hood. .StrippedID \u0026ldquo;Strips\u0026rdquo; or cuts off the triggering part of the custom ID and prints out everything else after that. Bear in mind, when using regex as trigger, for example \u0026quot;day\u0026quot; and input custom ID is \u0026quot;have-a-nice-day-my-dear-YAG\u0026quot; output will be \u0026quot;-my-dear-YAG\u0026quot; \u0026mdash; rest is cut off. .Values Slice of all options selected with a select menu, OR all values input into a modal in order. .Interaction.Token must be provided to any followup functions you decide to use later. If you are using these in subsequent script executions, it\u0026rsquo;s a good idea to save this to database when the interaction occurs.\n.CustomID can be used to identify which component or modal triggered the command. .StrippedID can be used to quickly parse out arguments in your custom ID, and use them in your response.\n.Values is used to capture values a user selected in a select menu or submitted to a modal. When creating a select menu and defining the options, the \u0026quot;value\u0026quot; field for each option defines which values will show up in this slice if chosen. A modal\u0026rsquo;s values are simply the values of each field in order.\nParsing Buttons As buttons do not provide any .Values data, we have to rely on the custom ID to pass around any data that a button may carry. Let us consider a message with two buttons, one for joining a game of Uno, and the other one for leaving said game. We can set the custom IDs of these buttons to uno-join and uno-leave, respectively, and trigger our custom command on uno- as custom ID regex.\n{{ if eq .StrippedID \u0026#34;join\u0026#34; }} {{ sendResponse nil \u0026#34;You joined the UNO game!\u0026#34; }} {{ else if eq .StrippedID \u0026#34;leave\u0026#34; }} {{ sendResponse nil \u0026#34;You left the UNO game :(\u0026#34; }} {{ end }} Warning: Unique Custom ID\nMultiple buttons and menus cannot have the same custom ID in one message. It is a good idea to have a common prefix and then encode the action the menu or button carries in the custom ID.\nParsing Select Menus Select menus provide us with a .Values slice, which we can use to parse the values selected by the user. This slice is ordered by the order in which the user selected the options, so if a user selects the first option, then the third option, then the second option, the .Values slice will be [\u0026quot;first\u0026quot;, \u0026quot;third\u0026quot;, \u0026quot;second\u0026quot;]. Of course, when you set your menu to allow only one selection, this need not be a concern, as .Values will only ever contain one value.\nLet us consider a select menu with several options for Uno cards, where the user can choose only one card. We will have to verify that the user selected a valid option, that is, same color or same number. To simplify, we do not consider wildcards here. Our code could look similar to the following listing.\n{{ $selectedOptions := .Values }} {{/* [\u0026#34;blue-7\u0026#34;] */}} {{ $cardRaw := index $selectedOptions 0 }} {{/* \u0026#34;blue-7\u0026#34; */}} {{ $cardSplit := split $cardRaw \u0026#34;-\u0026#34; }} {{/* [\u0026#34;blue\u0026#34; \u0026#34;7\u0026#34;] */}} {{ $playedCard := sdict \u0026#34;Color\u0026#34; ( index $cardSplit 0 ) \u0026#34;Number\u0026#34; ( index $cardSplit 1 )}} {{ $previousCard := ( dbGet .Channel.ID \u0026#34;uno-last-card\u0026#34; ).Value }} {{ $validCard := or (eq $playedCard.Color $previousCard.Color) (eq $playedCard.Number $previousCard.Number) }} {{ if $validCard }} {{ sendResponse nil (print .User \u0026#34; played a \u0026#34; $playedCard.Color $playedCard.Number) }} {{ dbSet .Channel.ID \u0026#34;uno-last-card\u0026#34; $playedCard }} {{ else }} {{ sendResponse nil \u0026#34;You can\u0026#39;t play that card!\u0026#34; }} {{ end }} Having only one option users can choose certainly simplifies working with .Values under select menus, but most of the time it\u0026rsquo;s probably not that easy. Here, we encourage you to fully consider what .Values gives you and what specifically you\u0026rsquo;re interested in. If, for instance, you only want to find out whether a certain option was selected, we can use inFold. In some other cases, we simply may not care at all, just that we got a slice of things.\nParsing Modals Thankfully, YAGPDB handles the grunt work of parsing a modal for you, and populates .Values according to the order of the fields in your modal.\nConsider the following modal being submitted:\n{{ $m := cmodal \u0026#34;title\u0026#34; \u0026#34;UNO Setup\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;uno-setup\u0026#34; \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Number of decks (numbers only)\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;How many decks to use?\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Minimum cards to call uno (numbers only)\u0026#34; \u0026#34;Number of cards\u0026#34;) ) }} {{ sendModal $m }} We could store this setup for later use like so:\n{{ $numberOfDecks := index .Values 0 }} {{ $minCardsForUNO := index .Values 1 }} {{ dbSet .Channel.ID \u0026#34;uno-decks\u0026#34; ( toInt $numberOfDecks ) }} {{ dbSet .Channel.ID \u0026#34;uno-min_for_uno\u0026#34; ( toInt $minCardsForUNO ) }} ","date":"0001-01-01","id":31,"permalink":"/learn/advanced/custom-interactions/parsing-an-interaction/","summary":"\u003cp\u003eCustom Commands with the \u003ca href=\"/docs/custom-commands/commands/#component\"\u003eMessage Component\u003c/a\u003e or \u003ca href=\"/docs/custom-commands/commands/#modal\"\u003eModal\nSubmission\u003c/a\u003e trigger allow you to take action upon the press of a button, use of a\nselect menu, or completion of a modal form. Interaction triggers provide new context data for templating.\u003c/p\u003e\n\u003cp\u003eIn this section, we\u0026rsquo;ll cover the data available and how to make use of it.\u003c/p\u003e\n\u003ch2 id=\"important-context-data\"\u003eImportant Context Data\u003c/h2\u003e\n\u003cp\u003eA short list of the more important context data available is provided below. For a full list, please see the\n\u003ca href=\"/docs/reference/templates/syntax-and-data/#interaction\"\u003edocumentation on the interaction object\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"Parsing an Interaction"},{"content":"While technically not required, responding to an interaction with one of Discord\u0026rsquo;s allotted initial responses is crucial if you don\u0026rsquo;t want your users to see an error after interacting, greatly improving user experience. An interaction may be responded to only once.\nYou can only respond to an interaction within the custom command triggered by said interaction, with the exception that a CC executed with execCC by the triggered CC will be able to send initial responses to the triggering interaction as well.\nInitial Response An initial response is the first response sent to an interaction. This response must be sent within 3 seconds of the interaction being received, or the user will see a \u0026ldquo;This application did not respond\u0026rdquo; error.\nPossible initial responses:\nOutput text in your script response field. This text will be sent as an interaction response. You can even use the ephemeralResponse function to make it ephemeral. Use the sendResponse function to send a response as soon as the function runs. You can also use this to send embeds or complexMessages. You\u0026rsquo;ll need to send a complexMessage and pass it \u0026quot;ephemeral\u0026quot; true as an argument to send ephemeral messages. sendResponse comes in NoEscape and RetID variants too. When sending an initial response, sendResponse does not need an interaction token, nil can be used. Use the sendModal function to show the user a modal. You cannot respond to a user submitting a modal by sending them another modal. Use the updateMessage function to edit the message the command triggered from. This works the same way as editing a message, however because it automatically targets the triggering message, the only argument required is the new message. Interaction Function documentation\nFollowing Up Followups allow you to continue responding to an interaction after the initial response has been made. You can followup for up to 15 minutes after the user interacts, and you can follow up as many times as you\u0026rsquo;d like. Followups require the interaction token of the interaction they should be following up on.\nPossible followups:\nOutput text in your script response field. This text will be sent as an interaction followup. You can even use the ephemeralResponse function to make it ephemeral. Use the sendResponse function to send a followup as soon as the function runs. Note that this function morphs into sending followups if an initial response has already been made. You can also use this to send embeds or complexMessages. sendResponse comes in NoEscape and RetID variants too. It\u0026rsquo;s important to capture the message ID of any followups you\u0026rsquo;ll want to edit or retrieve later, especially if you follow up ephemerally. If you follow up ephemerally without saving the message ID, you\u0026rsquo;ll never be able to interface with that message again. Use the editResponse function to edit an initial response or a followup message. When editing an initial response, the messageID argument should be nil. When editing a followup message, the messageID argument is required. You can still edit any initial responses or followups using the standard editMessage function as long as they aren\u0026rsquo;t ephemeral. Use the getResponse function to get an initial response or a followup message. When getting an initial response, the messageID argument should be nil. When getting a followup message, the messageID argument is required. You can still get any initial responses or followups using the standard getMessage function as long as they aren\u0026rsquo;t ephemeral. Interaction Function documentation\nSnippet Here is a basic scenario where you need to use editResponse and getResponse to work with an ephemeral followup message. You cannot use the standard editMessage or getMessage for this because it is an ephemeral message.\n{{ $interactionToken := .Interaction.Token }} {{ sendResponse nil \u0026#34;Here\u0026#39;s the first message!\u0026#34; }} {{ $followupID := sendResponseRetID $interactionToken (complexMessage \u0026#34;content\u0026#34; \u0026#34;Here\u0026#39;s a sneaky one!\u0026#34; \u0026#34;ephemeral\u0026#34; true) }} {{ sleep 2 }} {{ editResponse $interactionToken $followupID (print \u0026#34;I\u0026#39;ve edited this message to say \u0026#34; noun) }} {{ $editedResponse := getResponse $interactionToken $followupID }} {{ editResponse $interactionToken nil $editedResponse.Content }} Here\u0026rsquo;s a scenario where you would want to update a message.\n{{ $button := cbutton \u0026#34;label\u0026#34; \u0026#34;I won!\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;i_won\u0026#34; }} {{ $content := printf \u0026#34;Press this button when you win! The last person who won was %s! They wanted to say they are a %s %s.\u0026#34; .User.Mention adjective noun }} {{ $message := complexMessageEdit \u0026#34;content\u0026#34; $content \u0026#34;buttons\u0026#34; $button }} {{ updateMessage $message }} ","date":"0001-01-01","id":32,"permalink":"/learn/advanced/custom-interactions/responding-to-an-interaction/","summary":"\u003cp\u003eWhile technically not required, responding to an interaction with one of Discord\u0026rsquo;s allotted initial responses is crucial\nif you don\u0026rsquo;t want your users to see an error after interacting, greatly improving user experience. An interaction may be\nresponded to only once.\u003c/p\u003e\n\u003cp\u003eYou can only respond to an interaction within the custom command triggered by said interaction, with the exception that\na CC executed with \u003ccode\u003eexecCC\u003c/code\u003e by the triggered CC will be able to send initial responses to the triggering interaction as\nwell.\u003c/p\u003e","tags":[],"title":"Responding to an Interaction"},{"content":"Intro Basic Automoderator lets you quickly set up basic automoderation, without much fuss. For that reason, its overall customizability is quite limited. If you would like a more detailed configuration, please use the Advanced Automoderator.\nYou configure violation thresholds and their expiry for predefined rules. These thresholds define when an offending user will be muted, kicked, or banned; a warning and a subsequent deletion of the offending message are always issued.\nConfiguration You can turn on individual rules as needed, however for them to work at all you must enable Basic Automoderator as a whole in the General tab.\nViolations Each rule has its own violation counter and expiry, granting you some control over how many times a user can break a specific rule. The expiry time of a violation is between 0 (\u0026ldquo;never\u0026rdquo;) and 44640 minutes (31 days).\nWithin each rule, you can configure after how many violations a given punishment will be issued, be that a mute, kick, or ban. Setting a threshold to 0 will disable that punishment.\nIgnored Role You can specify one role on a per-rule basis that will be ignored by that rule. This is useful for exempting moderators from certain rules, for example. If you do not specify an ignored role, the rule will apply to all users, including admins and the server owner.\nIgnored Channels Just like the ignored role, you can specify multiple channels that will be ignored by a rule. This may be useful for e.g. a testing channel where you want to allow certain behavior that would otherwise be disallowed.\nRules Basic Automoderator comes with the following set of rules that should cover most basic needs. To reiterate, a warning and a deletion of the offending message will always be issued, regardless of other configured thresholds.\nSlowmode This rule will trigger when a user sends more than the configured amount of messages within the configured time frame in seconds. It does not consider general spam across channels.\nSomething decent to just protect from raw spam could be five messages within two seconds. Normal users won\u0026rsquo;t easily come near that, and it would target actual spammers.\nMass Mention This rule will trigger when a user mentions more than the configured amount of users in a single message. It does not trigger for multiple mentions to the same user, nor does it apply cross-channel checks.\nServer Invites This rule will trigger when a user sends a message containing a server invite link. It does not trigger for invites pointing to the same server the message is sent in.\nLinks This rule will trigger when a user sends a message containing any link, GIFs from Discord\u0026rsquo;s GIF-Picker included. Unless you have a very specific use-case, and know what you\u0026rsquo;re doing, we recommend using Banned Websites instead.\nBanned Words This rule will trigger when a user sends a message containing any of the configured banned words; you can enable a pre-defined list of words generally considered bad, or define your own list of words, or both.\nIt is case-insensitive and does not trigger for words that are part of other words. See also the Scunthorpe Problem.\nTo add your own words, scroll to the bottom of the rule\u0026rsquo;s configuration page and add one word per line.\nBanned Websites This rule will trigger when a user sends a message containing a link to any of the configured banned websites. Additionally, you can enable the Google Safe Browsing integration to check links against Google\u0026rsquo;s database of known unsafe links, as well as another separately enabled integration to check links against a list of known phishing sites.\nTo add your own websites, scroll to the bottom of the rule\u0026rsquo;s configuration page and add one domain per line. For example, if you were to block Google, you\u0026rsquo;d enter google.com, not https://google.com. The rule will also consider subdomains.\n","date":"0001-01-01","id":33,"permalink":"/docs/moderation/basic-automoderator/","summary":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eBasic Automoderator lets you quickly set up \u003cem\u003ebasic\u003c/em\u003e automoderation, without much fuss. For that reason, its\noverall customizability is quite limited. If you would like a more detailed configuration, please use the\n\u003ca href=\"/docs/moderation/advanced-automoderator/overview/\"\u003eAdvanced Automoderator\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou configure violation thresholds and their expiry for predefined rules. These thresholds define when an offending user\nwill be muted, kicked, or banned; a warning and a subsequent deletion of the offending message are always issued.\u003c/p\u003e","tags":[],"title":"Basic Automoderator"},{"content":"","date":"0001-01-01","id":34,"permalink":"/docs/moderation/advanced-automoderator/","summary":"","tags":[],"title":"Advanced Automoderator"},{"content":"A sophisticated automoderator system, allowing for more complex configurations than basic automoderator.\nIntro Advanced Automoderator is (quite obviously) a more detailed system than Basic Automoderator. It allows for more flexibility and complex configurations, but the trade-off is that some time investment is required to set it up.\nAdvanced automoderator operates on the basis of user-configurable rules, which trigger on specific actions and conditions to produce certain effects. Collections of rules are referred to as rulesets.\nFinally, there are lists you can create, which can be used to denylist or allowlist words or domains.\nOverview First, let us explore the available tabs on the main page.\nGlobal Settings This tab is your first stop when starting with Advanced Automoderator, as it is where you create new rulesets. Give it a telling name and click the Create button. This will create a new tab with that name.\nFurthermore, this is also the place to create and manage your lists. Lists are used to store words or domains that you want to use as black- or allowlist triggers in your rules. More on that under Lists.\nLogs This tab can be useful when troubleshooting or testing your configuration, as it shows who fired what rule in what ruleset, at what time, with which trigger. However, it is not a full log of messages, nor does it log moderation actions.\nConfiguration With that out of the way, we\u0026rsquo;ll go through how to actually make Advanced Automoderator do the thing it\u0026rsquo;s designed to.\nLists As mentioned above, lists are used to store words or domains that you want to use as black- or allowlist triggers in your rules.\nMultiple entries in word lists are separated by either a newline or a space. Entries in word lists must be single words containing no spaces; to denylist complete phrases, use a regex trigger instead.\nFor website / link lists, specify just the site\u0026rsquo;s domain, without any protocol or path. Subdomains will be automatically included. Logically, if you want to only check against some specific subdomain (and its sub-subdomains), you will have to specify just that subdomain.\nLimitations You cannot have more than 5 (premium: 25) lists, and each list may not have more than 5000 characters.\nRulesets Rulesets are the overarching structure of your automoderator configuration. They are the containers for your rules, and can be toggled on or off on the control panel, or with the automod toggle \u0026lt;ruleset name\u0026gt; command.\nSeveral configuration options are available for each ruleset:\nName — The name of the ruleset. Enable ruleset — Whether the ruleset is active or not. Ruleset scoped conditions — Conditions that apply to all rules in the ruleset. Create a new rule — Add a new rule to the ruleset. Limitations You cannot have more than 10 (premium: 25) rulesets. If you run into that limit, consider merging some rulesets together, or removing some that are no longer needed.\nRules Rules are the actual meat of your automoderator configuration. They consist of triggers, conditions, and effects. We will call those three things collectively rule parts.\nA rule can have multiple triggers, conditions, and effects. All of them are optional, but a rule without at least one trigger and effect is pointless.\nWhen checking whether a rule applies, triggers follow the OR logic, while conditions and effects follow the AND logic. That means for a rule to apply, only one trigger has to be true, whilst all conditions need be met, which then fires all effects.\nLimitations Across all rulesets, you cannot have more than 25 (premium: 150) rules. A rule may not consist of more than 25 rule parts.\nRule Parts Triggers\rConditions\rEffects\r","date":"0001-01-01","id":35,"permalink":"/docs/moderation/advanced-automoderator/overview/","summary":"\u003cp\u003eA sophisticated automoderator system, allowing for more complex configurations than basic automoderator.\u003c/p\u003e","tags":[],"title":"Overview"},{"content":"Triggers define when a rule should be checked. This page will explain the available triggers and their configuration options.\nQuick Intro This page lists all the available triggers in the order as they appear on the control panel. Use the Table of Contents in the top left corner of this page alongside your browser\u0026rsquo;s search function to quickly navigate to the trigger you\u0026rsquo;re looking for.\nTrigger Logic Only one trigger has to be met for a rule to trigger — that is, the triggers are combined according to the logical OR operator.\nList of Triggers Following is a list of all available triggers, in the order they appear on the control panel.\nAll caps This trigger fires when a message exceeds a certain percentage of uppercase characters. Following parameters are available:\nMin number of all caps\nThe minimum number of uppercase characters in the message for the trigger to fire. (Default: 3)\nPercentage of all caps\nThe percentage of uppercase characters in the message for the trigger to fire. (Default: 100%)\nAlso match visually similar characters\nWhether to also match visually similar characters. (Default: off)\nBoth Min number of all caps and Percentage of all caps have to be met for this trigger to fire.\nMessage mentions This trigger will fire when a message exceeds the configured threshold for unique user @mentions.\nMin number of mentions\nThe minimum number of unique mentions in the message for the trigger to fire. (Default: 4) Any link This trigger will fire when a message contains any valid link.1\nFor more fine-grained control, consider using the Website denylist or Website allowlist trigger.\nX Violations in y minutes This will trigger when the offending user has amassed x violations in y minutes, filtered by the violation name.\nViolation name\nThe name of the violation to check for. (Default: name)\nNumber of violations\nThe number of violations in the specified time frame for the trigger to fire. (Default: 4)\nWithin (minutes)\nThe time frame in which the violations have to occur for the trigger to fire. (Default: 60)\nIgnore if a higher violation trigger of this name was activated\nWhether to ignore this if a trigger with a higher threshold for the same violation was activated. (Default: on)\nWord denylist This trigger will fire when a message contains any word from the specified list.\nList\nThe list to check against. (Default: first found list)\nAlso match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off)\nWord allowlist Triggers when a message contains words not in the specified list. See Word denylist for configuration.\nWebsite denylist This trigger will fire when a message contains any link to a domain from the specified list, subdomains included.\nList\nThe list to check against. (Default: first found list) Website allowlist Triggers when a message contains links not in the specified list. See Website denylist.\nDepending on your use-case, it may be more time-efficient to use a allowlist instead of a denylist.\nServer invites This trigger will fire when a message contains a server invite link, not counting invites to the current server.\nAlso includes some third-party websites, namely discord.me, invite.gg, discord.io, discord.li, disboard.org, and discordy.com, these however will not ignore the current server.\nGoogle flagged bad links This trigger will fire when a message contains a link that Google has flagged as malicious.\nx user messages in y seconds This trigger will fire when the offending user has sent x messages in y seconds.\nMessages\nThe number of messages in the specified time frame for the trigger to fire. (Default: 5)\nWithin (seconds)\nThe time frame in which the messages have to be sent for the trigger to fire. (Default: 5)\nx channel messages in y seconds This trigger will fire when the channel has received x messages in y seconds.\nMessages\nThe number of messages in the specified time frame for the trigger to fire. (Default: 5)\nWithin (seconds)\nThe time frame in which the messages have to be sent for the trigger to fire. (Default: 5)\nuser: x mentions within y seconds This trigger will fire when the offending user has mentioned x users in y seconds across several messages in one channel.2\nMentions\nThe number of mentions in the specified time frame for the trigger to fire. (Default: 20)\nWithin (seconds)\nThe time frame in which the mentions have to occur for the trigger to fire. (Default: 10)\nCount multiple mentions to the same user\nWhether to account for multiple mentions to the same user. (Default: off)\nchannel: x mentions within y seconds See user: x mentions within y seconds, but now applied to the channel as a whole, instead of a single user.\nMessage matches Regex This trigger will fire when a message matches the specified regular expression.3\nRegex\nThe regular expression to match against. (Default: (empty)) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) Message not matching Regex The inverse of Message matches Regex. See there for configuration.\nX consecutive identical messages This trigger will fire when the offending user has sent x identical messages in a row. Messages sent by other users in-between are ignored.2\nThreshold\nThe number of identical messages in a row for the trigger to fire. (Default: 4) Within (seconds)\nThe time frame in which the identical messages have to be sent for the trigger to fire. (Default: 60) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) Nickname matches regex This trigger will fire when the nickname of the user matches the specified regular expression.\nRegex\nThe regular expression to match against. (Default: (empty)) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) Nickname not matching regex The inverse of Nickname matches regex. See there for configuration.\nNickname word allowlist This trigger will fire when the nickname of the user contains words not in the specified list.\nList\nThe list to check against. (Default: first found list) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) Nickname word denylist This trigger will fire when the nickname of the user contains any word from the specified list. See Nickname word allowlist for configuration.\nList\nThe list to check against. (Default: first found list) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) X user attachments in Y seconds This trigger will fire when the offending user has sent x attachments in y seconds, in one single channel.2\nAttachments\nThe number of attachments in the specified time frame for the trigger to fire. (Default: 10) Within (seconds)\nThe time frame in which the attachments have to be sent for the trigger to fire. (Default: 60) Also count multiple attachments in single messages\nWhether to count multiple attachments in a single message. (Default: off) X channel attachments in Y seconds See X user attachments in Y seconds, but now applied to the channel as a whole, instead of a single user.\nJoin username word allowlist This trigger will fire when the username of a user joining the server contains words not in the specified list.\nList\nThe list to check against. (Default: first found list) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) Join username word denylist This trigger will fire when the username of a user joining the server contains any word from the specified list. See Join username word allowlist for configuration.\nJoin username matches regex This trigger will fire when the username of a user joining the server matches the specified regular expression.\nRegex\nThe regular expression to match against. (Default: (empty)) Also match visually similar characters\nWhether to also match visually similar characters, like Ĥéĺĺó. (Default: off) Join username not matching regex The inverse of Join username matches regex. See there for configuration.\nJoin username invite This trigger will fire when the username of a user joining the server contains a server invite link.\nNew Member This trigger will fire when a new member joins the server.\nMessage without attachments This trigger will fire when a message does not contain any attachments.\nMessage with attachments This trigger will fire when a message contains attachments.\nFlagged Scam links This trigger will fire when a message contains a link that has been flagged as a scam.\nMessage with more than x characters This trigger will fire when a message contains more than x characters.\nLength\nThe minimum number of characters in the message for the trigger to fire. (Default: 0) Message with less than x characters This trigger will fire when a message contains less than x characters. See Message with more than x characters for configuration.\nX user links in Y seconds This trigger will fire when the offending user has sent x links in y seconds, in one single channel.2\nLinks\nThe number of links in the specified time frame for the trigger to fire. (Default: 5) Within (seconds)\nThe time frame in which the links have to be sent for the trigger to fire. (Default: 60) Also count multiple links in single message\nWhether to count multiple links in a single message. (Default: off) X channel links in Y seconds See X user links in Y seconds, but now applied to the channel as a whole, instead of a single user.\nMessage triggers Discord Automod This trigger will fire when a message triggers Discord\u0026rsquo;s Automod.\nRule ID\nThe ID of the Automod rule to watch out for. Leave blank for all. (Default: (blank)) The regular expression used to match links is the following:\n(?i)([a-z\\d]+:[//])([\\w-._~:/?#\\[\\]@!$\u0026amp;'()*+,;%=]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%\u0026amp;:/~+#-]*[\\w@?^=%\u0026amp;/~+#-])\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUnder the hood, the bot will only check the last 1000 messages in the channel. If you have a high-traffic channel in combination with an extremely long time frame, the bot could (theoretically) miss some messages.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe RegEx engine used in YAGPDB is RE2. Some features are not supported, like lookaheads and lookbehinds. See regex101 for some help with writing RE2-compatible regular expressions.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"0001-01-01","id":36,"permalink":"/docs/moderation/advanced-automoderator/triggers/","summary":"\u003cp\u003eTriggers define when a rule should be checked. This page will explain the available triggers and their configuration\noptions.\u003c/p\u003e","tags":[],"title":"Triggers"},{"content":"Conditions impose more fine-grained control on Advanced Automoderator rules. This page will cover the different types of conditions and how to use them.\nQuick Intro This page lists all the available conditions in the order as they appear on the control panel. Use the Table of Contents in the top left corner of this page alongside your browser\u0026rsquo;s search function to quickly navigate to the condition you\u0026rsquo;re looking for.\nBy extension, these conditions are also available as ruleset scoped conditions.\nCondition Logic All conditions have to be met in order for a rule to execute — that is, the conditions are combined according to the logical AND operator.\nDanger: Mutual Exclusivity\nEnsure that the conditions you set are not in conflict or mutually exclusive, as this will cause your rule to never trigger.\nA common example of this is setting both Edited message and New message conditions in the same rule. Since a message can\u0026rsquo;t be both new and edited at the same time, the rule will never trigger.\nIgnored Roles Have the rule ignore users with selected roles. This is useful for excluding moderators or bots from the rule.\nRoles\nThe roles to ignore. Select as many as you like. (Default: None) Require Roles Like Ignored Roles, with following optional setting:\nRequire all selected roles\nWhether the user must have all selected roles, or just any. (Default: off) Ignore Channels Have the rule ignore messages from selected channels, for example, to exclude a bot channel.\nChannels\nThe channels to ignore. Select as many as you like. (Default: None) Active in channels Just like Ignore Channels, but only apply the rule to messages from selected channels.\nAccount age above Only apply this rule if the user\u0026rsquo;s account is older than the specified duration in minutes.\nAge in minutes\nThe minimum account age in minutes. (Default: 0) Account age below Only apply this rule if the user\u0026rsquo;s account is younger than the specified duration in minutes.\nAge in minutes\nThe maximum account age in minutes. (Default: 0) Server Member duration above Only apply this rule if the user has been a member of the server for longer than the specified duration in minutes.\nThis condition directly conflicts with the New Member trigger.\nAge in minutes\nThe minimum member duration in minutes. (Default: 0) Server Member duration below Like Server Member duration above, but only apply this rule if the user has been a member of the server for less than the specified duration in minutes.\nIgnore Bots Have the rule ignore messages from bots. This conflicts with the Only Bots condition.\nOnly Bots Only apply this rule to messages from bots. This conflicts with the Ignore Bots condition.\nIgnore Categories Have the rule ignore messages from channels in selected categories.\nCategories\nThe categories to ignore. Select as many as you like. (Default: None) Active in Categories Only apply this rule if it was triggered in one of the selected categories.\nCategories\nThe categories to apply this rule to. Select as many as you like. (Default: None) New message Only apply this rule to a newly sent message. This condition is mutually exclusive with Edited message.\nEdited message Only apply this rule to an edited message. This condition is mutually exclusive with New message.\nActive in threads Only apply this rule to messages in threads.\nIgnore threads Do not apply this rule to messages in threads.\nIgnore messages with forwards Do not apply this rule to messages that contain forwarded messages.\nOnly match messages with forwards Only apply this rule to messages that contain forwarded messages.\n","date":"0001-01-01","id":37,"permalink":"/docs/moderation/advanced-automoderator/conditions/","summary":"\u003cp\u003eConditions impose more fine-grained control on Advanced Automoderator rules. This page will cover the different types\nof conditions and how to use them.\u003c/p\u003e","tags":[],"title":"Conditions"},{"content":"Effects define what happens when a rule is triggered and all conditions are met. This page will cover the different kinds of effects available to you in Advanced Automoderator.\nQuick Intro This page lists all the available effects in the order as they appear on the control panel. Use the Table of Contents in the top left corner of this page alongside your browser\u0026rsquo;s search function to quickly navigate to the effect you\u0026rsquo;re looking for.\nEffect Logic All effects will be executed once all prior checks are met — that is, the effects are combined according to the logical AND operator.\nDelete Message Delete the message that triggered the rule.\n+Violation Add a violation to the user\u0026rsquo;s record. This is useful for tracking user behavior over time.\nName\nThe name of the violation. (Default: None) Kick user Kick the user that triggered the rule.\nCustom message\nA custom reason for the kick. (Default: None) Ban user Ban the user that triggered the rule.\nDuration\nThe duration of the ban in minutes. 0 for permanent. (Default: 0) Custom message\nA custom reason for the ban. (Default: None) Number of days to delete\nHow many days of that user\u0026rsquo;s message history to delete. 0 to 7 days. (Default: 0) Mute user Mute the user that triggered the rule.\nDuration\nThe duration of the mute in minutes. 0 for permanent. (Default: 0) Custom message\nA custom reason for the mute. (Default: None) Warn user Warn the user that triggered the rule.\nCustom message\nA custom reason for the warning. (Default: None) Set nickname Set the nickname of the user that triggered the rule.\nNew Nickname\nThe new nickname for the user. Empty for removal. (Default: None) Reset violations Reset the violations of the user that triggered the rule.\nName\nThe name of the violation to reset. (Default: None) Delete multiple messages Delete multiple messages from the user that triggered the rule.\nNumber of messages\nThe number of messages to delete. (Default: 3) Max age\nThe maximum age of the messages to delete in seconds. (Default: 15) Give role Give a role to the user that triggered the rule.\nDuration\nThe duration of the role in seconds. 0 for permanent. (Default: 0) Role\nThe role to give to the user. (Default: first role in hierarchy) Enable Channel slowmode Enable slowmode in the channel where the rule was triggered.\nDuration\nThe duration of the slowmode in seconds. 0 for permanent. (Default: 0) Ratelimit\nThe minimum time that has to pass between a single user\u0026rsquo;s messages. (Default: 0) Remove role Remove a role from the user that triggered the rule.\nDuration\nThe duration of the role in seconds. 0 for permanent. (Default: 0) Role\nThe role to remove from the user. (Default: first role in hierarchy) Send Message Send a custom message.\nCustom message\nThe message to send. Max 280 characters. (Default: (empty)) Delete after\nThe duration in seconds after which to delete the message. 0 for never. Max 3600 seconds. (Default: 0) Ping user\nWhether to ping the user that triggered the rule. (Default: false) Channel to send to\nThe channel to send the message to. (Default: same channel) Timeout user Timeout the user that triggered the rule. This is different from Mute user as it uses Discord\u0026rsquo;s timeout functionality instead of applying a muted role.\nDuration\nThe duration of the timeout in minutes. (Default: 0) Custom message\nA custom reason for the timeout. (Default: None) Send Alert Sends an embed to the specified channel with some information about the triggered rule, similar to Discord\u0026rsquo;s inbuilt automoderator alerts.\nCustom message\nThe message to send. Max 280 characters. (Default: (empty)) Channel to send alert embed in\nThe channel to send the alert to. (Default: same channel as the rule was triggered in) ","date":"0001-01-01","id":38,"permalink":"/docs/moderation/advanced-automoderator/effects/","summary":"\u003cp\u003eEffects define what happens when a rule is triggered and all conditions are met. This page will cover the different\nkinds of effects available to you in Advanced Automoderator.\u003c/p\u003e","tags":[],"title":"Effects"},{"content":"Capture a moment in time with message logging of the last messages in a channel when the log is created, including a limited number of deleted messages.\nNote: Not a Logging Bot\nYAGPDB IS NOT A LOGGING BOT.\nMessage logs capture X amount of messages from a channel, including any deleted messages cached by YAGPDB (the last 1 hour of deleted messages, or last 12 hours with premium, are recorded by YAGPDB).\nThe log is accessible on YAGPDB\u0026rsquo;s website for later viewing. It saves message timestamps, message author\u0026rsquo;s Username and User ID, and the message itself. If a message contains an attachment, the attachment URL is logged. If a message contains an embed, it is serialized and saved in JSON format.\nDanger: Maximum Log Retention\nMessage logs on the official YAGPDB instance will be automatically deleted after 30 days of their creation.\nIf you\u0026rsquo;re self-hosting, see Message Log Purge for more information.\nCreating Logs Logs Command By default, any member can run the logs command for any channel in which they have permission to Read Messages, Send Messages, and Read Message History. Members will be permitted to create logs regardless of their permission to view them.\nLogs Command Syntax\nModeration Actions Select moderation actions will generate message logs when used, and other actions allow you to enable logging if desired. A link for these logs is included in the mod log if mod log is enabled.\nActions Generating Logs These actions immediately create a log of the last 100 messages in the channel.\nReport Timeout Mute Kick Ban Actions Log Generation Optional These actions require logging to be enabled on their control panel.\nWarn Viewing Logs To view a message log after it has been created, you\u0026rsquo;ll need to visit its link in a browser. YAGPDB cannot send message logs to a Discord channel; they are only accessible online.\nWhen a log is created, the link to view it follows the pattern /public/\u0026lt;server ID\u0026gt;/log/\u0026lt;log count\u0026gt;. Note that this makes it easy to scrape through all the logs created on a server. Assume any member that can view a specific log can also view every other log on your server. You can view a list of all message logs created on your server on the Logging page of the control panel. When the logs command is executed, a link to the message log is sent as the response. When a moderation action creates a log, a link is included in the mod log entry if enabled. When viewing a log, YAGPDB colors the usernames of each message author based on their roles at the time of log viewing, similarly to how they would appear on your server.\nAccess Control Members can view message logs Selecting this mode on the control panel allows all members of your server to view any message logs created. Users will need to log in with their Discord account to view the message logs.\nRoles You may additionally choose to require roles for members to have in order to view message logs. Members with one or more of these roles will be permitted to view message logs.\nEveryone can view message logs Selecting this mode on the control panel allows anyone with a link to a log to view all the logs on your server without needing to log in.\nDeleted Messages A log contains any messages cached at the time of log creation. Deleted messages are cached for 1 hour before being removed. On premium servers, they are cached for 12 hours.\nIn a message log, deleted messages are shown to users permitted to view them. If a user is not permitted to view deleted messages, they will not be able to see deleted messages, or that a message was deleted at all.\nDisallowed Channels Under the Logging page on the control panel you may exclude certain channels from log creation. Using the logs command in a disallowed channel will return an error message. Moderation actions will also not generate or attach logs in such channels.\nDeleting Logs Users with write access to the control panel may delete individual logs or delete all logs on the server using the control panel.\nMessage Log Purge If you are self-hosting your own instance of YAGPDB, you can set enable_message_log_purge=true to automatically purge message logs older than 30 days. This option is enabled on the official instance of YAGPDB hosted by Botlabs but is disabled by default on a fresh self-host.\n","date":"0001-01-01","id":39,"permalink":"/docs/moderation/logging/","summary":"\u003cp\u003eCapture a moment in time with message logging of the last messages in a channel when the log is created, including a\nlimited number of deleted messages.\u003c/p\u003e","tags":[],"title":"Logging"},{"content":"Use Google reCAPTCHA v2 to verify your members before permitting them access to your server.\nThe verification plugin assigns a specified role to new members after they successfully complete Google reCAPTCHA v2 verification. This allows you to further verify new members as humans rather than bots before granting them access to your server.\nThis is accomplished by sending new members a customizable DM (which employs template scripting) containing a unique link to verify, tied to their User ID. This link takes them to a customizable verification page with a CAPTCHA challenge. Once completed, the User ID is assigned the verified role.\nNote: Verified Role\nYou must assign a \u0026ldquo;Verified Role\u0026rdquo; on the Verification page in the control panel. The plugin will not function if no role is selected.\nVerify Page The verification page uses markdown format to render the page. The CAPTCHA challenge and confirmation button are suffixed below the page content. A success message is displayed upon CAPTCHA completion. You can customize the page content in the Verification page on the control panel.\nVerification DMs The verification DM is a template script executed in the new member\u0026rsquo;s DM immediately upon joining. Text output to the response is sent in the member\u0026rsquo;s DM.\nYou may optionally send a re-notification message in the member\u0026rsquo;s DMs if they do not verify after X minutes. This message uses template script as well.\nYou can customize both messages in the Verification page on the control panel.\nTemplate Reference\nVerification scripts provide .Link as additional dot context data. This is the unique verification link the user must visit to verify.\nDanger: DMs may not be Received\nIf a user has disabled DMs from server members by default, upon joining your server YAGPDB will fail to send a verification DM to the user. It is recommended that you inform your new members about this possibility and how to fix it if they do not receive a DM from YAGPDB.\nKick After Unverified You may optionally configure YAGPDB to kick users who haven\u0026rsquo;t verified after X minutes. This is configured in the Verification page on the control panel.\nLogs You may optionally configure a channel to send verification logs to. This is done on the Verification page in the control panel.\nLogged events are:\nNew user joined, verification DM sent. New user verified. New user kicked after being unverified for X minutes (as configured). New user verified, alt accounts detected. New user banned, detected as alt account of banned user. Alt Detection Note: Disabled on Official Instance\nAlt Detection is currently disabled on the official instance of YAGPDB hosted by Botlabs. These features will not function on the official bot.\nBy default, upon successful verification YAGPDB will check the user\u0026rsquo;s IP (as captured by the verification page) against other users who have verified using YAGPDB.\nAlt Banning When a user is banned for any reason (including bans made outside the bot), YAGPDB will automatically ban any alt accounts detected for that user.\nIf a new user verifies who shares an IP with a previously banned user, they will be banned as well.\nAlt Reporting If a new user who verifies is detected as an alt but none of their associated accounts have been banned, YAGPDB will send a log to the verification log channel if specified, identifying the new user as an alt and listing other users who verified at the same IP address.\nDisable Alt Detection Globally For self hosters, the environment variable to enable this feature is verification.track_ips. It is true by default. Disabling IP tracking will also disable alt detection, but the CAPTCHA segment of the verification plugin will be unaffected.\nSelf Hosting YAGPDB Do not proceed unless you are hosting your own version of the YAGPDB codebase.\nEnabling Verification Verification requires the google.recaptcha_secret and google.recaptcha_site_key env variables to be configured and valid. To get a reCAPTCHA secret and site key, register a site on reCAPTCHA and copy the generated secret and key.\n","date":"0001-01-01","id":40,"permalink":"/docs/moderation/verification/","summary":"\u003cp\u003eUse Google reCAPTCHA v2 to verify your members before permitting them access to your server.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-246ff834678b639051f57582f109b0c5-lightbox\"\u003e\n\u003cimg alt=\"Default Verification Page\" height=\"358\" id=\"h-rh-i-246ff834678b639051f57582f109b0c5\" src=\"/docs/moderation/page_verification.png\" width=\"575\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-246ff834678b639051f57582f109b0c5-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Default Verification Page\" height=\"358\" id=\"h-rh-i-246ff834678b639051f57582f109b0c5\" src=\"/docs/moderation/page_verification.png\" width=\"575\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eThe verification plugin assigns a specified role to new members after they successfully complete Google reCAPTCHA v2\nverification. This allows you to further verify new members as humans rather than bots before granting them access to\nyour server.\u003c/p\u003e\n\u003cp\u003eThis is accomplished by sending new members a customizable DM (which employs \u003ca href=\"/docs/reference/templates/\"\u003etemplate scripting\u003c/a\u003e)\ncontaining a unique link to verify, tied to their User ID. This link takes them to a customizable verification page with\na CAPTCHA challenge. Once completed, the User ID is assigned the verified role.\u003c/p\u003e","tags":[],"title":"Verification"},{"content":"","date":"0001-01-01","id":41,"permalink":"/docs/notifications/","summary":"","tags":[],"title":"Notifications and Feeds"},{"content":"General notifications such as a welcoming direct message, a message in the server when users join or leave, as well as a simple message announcing when a channel\u0026rsquo;s topic has changed.\nJoin Message Channel: Choose what channel you want the bot to announce the message in.\nMessage: Write the message that you want the bot to say when someone joins.\nLeave Message Channel: Choose what channel you want the bot to announce the message in.\nMessage: Write the message that you want the bot to say when someone leaves.\nJoin Message in Direct Message Write a message that you want the bot to send to the user via DM whenever someone joins your server.\nTopic Change Message Choose what channel you want the bot to announce the topic change from a specific channel or the channel that the topic was changed in.\nTip: Custom Command Syntax\nCustom command templates are supported for usage in all the notification feeds provided.\n","date":"0001-01-01","id":42,"permalink":"/docs/notifications/general/","summary":"\u003cp\u003eGeneral notifications such as a welcoming direct message, a message in the server when users join or leave, as well as a\nsimple message announcing when a channel\u0026rsquo;s topic has changed.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-e09f7413b0e55b892dd0c6d9d6e5a272-lightbox\"\u003e\n\u003cimg alt=\"Overview of general feeds\" height=\"370\" id=\"h-rh-i-e09f7413b0e55b892dd0c6d9d6e5a272\" src=\"/docs/notifications/general_overview.png\" width=\"768\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-e09f7413b0e55b892dd0c6d9d6e5a272-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of general feeds\" height=\"370\" id=\"h-rh-i-e09f7413b0e55b892dd0c6d9d6e5a272\" src=\"/docs/notifications/general_overview.png\" width=\"768\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003ch3 id=\"join-message\"\u003eJoin Message\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eChannel:\u003c/strong\u003e Choose what channel you want the bot to announce the message in.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMessage:\u003c/strong\u003e Write the message that you want the bot to say when someone joins.\u003c/p\u003e\n\u003ch3 id=\"leave-message\"\u003eLeave Message\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eChannel:\u003c/strong\u003e Choose what channel you want the bot to announce the message in.\u003c/p\u003e","tags":[],"title":"General"},{"content":"Get notifications from your favorite subreddits directly in your Discord server.\nReddit Feed To get notifications from a subreddit, simply enter the name of the subreddit in the subreddit field without the r/ in front (for example, to add a feed for the r/jonas747, you would put \u0026ldquo;jonas747\u0026rdquo; as the subreddit name). Then, specify which channel you would like the bot to post the feed in.\nYou can toggle whether to post using embeds or without using them. With embeds, the feed will look nicer but videos and such will not be attached but just linked.\n","date":"0001-01-01","id":43,"permalink":"/docs/notifications/reddit/","summary":"\u003cp\u003eGet notifications from your favorite subreddits directly in your Discord server.\u003c/p\u003e","tags":[],"title":"Reddit"},{"content":"Get notifications from your favorite YouTubers directly in your Discord server.\nNote: Required Bot Permissions\nThe bot requires at least the \u0026ldquo;Read Messages\u0026rdquo; and \u0026ldquo;Send Messages\u0026rdquo; permissions in the channel you want to post the feed in.\nAdding a YouTube Feed To add a new feed simply copy the channel URL from YouTube and paste it into the \u0026ldquo;Link\u0026rdquo; field under \u0026ldquo;Add New Feed\u0026rdquo; (you may need to scroll down a bit); then select a channel to post it to. For a visual reference, please see the image below.\nIf you are unable to obtain a direct channel URL, similar to\nhttps://youtube.com/channel/UCuAXFkgsw1L7xaCfnd5JJOw, we also support the following URLs:\nVideo links (https://youtube.com/watch?v=dQw4w9WgXcQ) Shorts links (https://youtube.com/shorts/pBZ_2pX_8mg) Share links (https://youtu.be/dQw4w9WgXcQ) Live links (https://youtube.com/live/jfKfPfyJRdk) Playlist links (https://youtube.com/playlist?list=PLEamUZtdyTMxwDNQ97Y7im8EwqRyht12R) Although we make an attempt at extracting the channel from usernames (https://youtube.com/user/MontyPython), custom links (https://youtube.com/c/Taskmaster), and handles (https://youtube.com/@TomScottGo), these are not as reliable as the links listed above, as we use the first result of a YouTube search to determine the channel via these URLs.\nIf you find yourself having trouble adding a feed using these kinds of URLs, please try to use one of the links listed above before asking for help in the support server.\nWarning: Maximum Number of Feeds\nYou cannot have more than 10 active YouTube feeds at a time (250 with Premium). If you have that many feeds active, you cannot add more until you disable at least one of those. That disabled excess feed will be deleted once you add a new one.\nConfiguring a YouTube Feed During setup of a feed there are four more options you can configure, namely:\nmention @everyone in the announcement message mention a specific role also publish livestreams also publish shorts Note: Required Bot Permissions\nThe bot needs mention @everyone or \u0026ldquo;mention this role\u0026rdquo; permissions if you wish to mention everyone or a specific role of your choosing.\nYou need not configure any of these ahead of time, you can always edit the feed later.\nEditing a YouTube Feed To edit a feed, scroll down further until you reach the \u0026ldquo;Current subscribed channels\u0026rdquo; section. There you will find a list of all the feeds you have added.\nGoing from left to right of the editable options, you can change the following:\nThe Discord channel to post to Mention @everyone in the announcement message Mention a specific role Also publish livestreams Also publish shorts Disable the feed until you enable it again Once you have made your changes, click the \u0026ldquo;Save\u0026rdquo; button on the far right to save your changes. If you instead wish to delete the feed, click the \u0026ldquo;Delete\u0026rdquo; button just below the \u0026ldquo;Save\u0026rdquo; button. None of these options need to be equal across all your feeds, you can have different settings for each feed.\nYou can only save changes to a feed one at a time, so if there are multiple feeds you wish to edit, you have to do so separately, saving after each feed you edited.\nCustom Announcement If you take a look at the top-right of the configuration page, you\u0026rsquo;ll see a field for custom command templates for usage in the announcement message provided for YouTube feeds. The default response is the following code:\n{{.ChannelName}} published a new video! {{.URL}} You can customize this message to your liking, but bear in mind that using a custom announcement message will override the default announcement\u0026rsquo;s mention settings for all channels, therefore you will have to implement this logic by yourself. Refer to the mentions functions for more information.\nDanger: Custom Announcement Overrides Settings\nUsing a custom announcement message will override the default announcement\u0026rsquo;s mention settings for all channels. Really.\nAdditional Context Data In addition to the standard context data available to all custom commands, we provide the following additional context data:\n{{ .ChannelID }}: ID of the YouTube Channel. {{ .ChannelName }}: Name of the YouTube Channel. {{ .IsLiveStream }}: True, if the notification is for a livestream else False. {{ .IsUpcoming }}: True, if the notification is for a scheduled release else False. {{ .VideoID }}: ID of the video. {{ .VideoTitle }}: Title of the video. {{ .VideoThumbnail }}: Thumbnail image URL of the video. {{ .VideoDescription }}: Description of the video. {{ .VideoDurationSeconds }}: Duration of video in seconds. {{ .Video }}: Data of the video as available in the YouTube API. {{ .URL }}: Video URL. ","date":"0001-01-01","id":44,"permalink":"/docs/notifications/youtube/","summary":"\u003cp\u003eGet notifications from your favorite YouTubers directly in your Discord server.\u003c/p\u003e\n\u003cdiv class=\"callout callout-note d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eNote: Required Bot Permissions\u003c/p\u003e\n\r\n      \u003c/div\u003e\r\n    \u003cdiv class=\"callout-body\"\u003e\r\n      \u003cp\u003eThe bot requires at least the \u0026ldquo;Read Messages\u0026rdquo; and \u0026ldquo;Send Messages\u0026rdquo; permissions in the channel you want to post the feed\nin.\u003c/p\u003e","tags":[],"title":"YouTube"},{"content":"Let everyone know that someone is currently streaming.\nStreaming Feed Note: Announcements may not Post\nThere are currently some issues with the streaming announcement, and it may not always give the announcement. It will however, always assign the streamer role.\nDanger: Automatic Role Removal\nThe streaming role will be automatically removed from a member that is not streaming if it is given manually, so be careful! If YAGPDB is removing member\u0026rsquo;s roles without apparent reason, this may well be the cause.\nSteaming notification is triggered based on your Discord streaming status (When you go purple, AKA streaming). You can either have announcements, be assigned the streaming role or both.\nAnnounce Channel Choose the Channel that you want to bot to post the announcement in.\nAnnouncement Message Write the message that you want the announcement to say. The streaming announcements accept most templates, but have some additional special ones:\n{{ .URL }} outputs the URL of the stream. {{ .Game }} outputs the current game. {{ .StreamTitle }} outputs the stream title. {{ .User.Username }} outputs the Discord username of the person who is streaming. Game Regex Use regex to filter out games to post announcements and assign roles for specific games.\nCurrently Streaming Role Assign this role to the people streaming.\nAllowed Role Only assign a role and make announcement for the people with this role.\nIgnore Role Do not assign a role and make an announcement for people with this role.\nStream Title Regex Use regex to filter out streams based on the title of their stream.\n","date":"0001-01-01","id":45,"permalink":"/docs/notifications/streaming/","summary":"\u003cp\u003eLet everyone know that someone is currently streaming.\u003c/p\u003e\n\u003ch3 id=\"streaming-feed\"\u003eStreaming Feed\u003c/h3\u003e\n\u003cdiv class=\"callout callout-note d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eNote: Announcements may not Post\u003c/p\u003e\n\r\n      \u003c/div\u003e\r\n    \u003cdiv class=\"callout-body\"\u003e\r\n      \u003cp\u003eThere are currently some issues with the streaming announcement, and it may not always give the announcement. It will\nhowever, always assign the streamer role.\u003c/p\u003e","tags":[],"title":"Streaming"},{"content":"","date":"0001-01-01","id":46,"permalink":"/docs/roles/","summary":"","tags":[],"title":"Roles"},{"content":"\rNote: Required Permissions\nMake sure that the bot has permission to manage roles and that the role the bot is assigning is below the highest role the bot has.\nWarning: Discord Verification Levels\nBe careful when using autorole to automatically give new members roles. Discord\u0026rsquo;s in-built new member verification only works on members with no roles, rendering it useless if members are given roles right after they join.\nConfiguration The different parameters you can set up on this site are:\nAutomatically assign members this role: Select the role that you want to bot to auto assign (only one role can be auto assigned). Minutes of membership required for role: Requires that a member must be on the server for x minutes before assigning the role. Require one of these roles to be present on the member: If a person does not have one of the following roles on them they will not be given a role. Ignore people with the following roles: If a person has one of the following roles on them they will not be given a role. Only assign role when they join, do not give it back if it\u0026rsquo;s removed from them afterwards: Only assign the role to them once when they joined. If they lose the role sometime after, the bot will not give it back to them. Note that this means what it says - if this option is unticked and you remove this role manually from someone, it will be given back automatically. Only assign the role after a member has completed Discord\u0026rsquo;s Membership Screening: The autorole will only assign the set role after member has completed the server\u0026rsquo;s Membership Screening. Retroactive full scan This feature is only available for premium users and it scans the server completely, assigning the autorole to the eligible members (if they don\u0026rsquo;t have the role already).\n","date":"0001-01-01","id":47,"permalink":"/docs/roles/autorole/","summary":"\u003cdiv class=\"callout callout-note d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eNote: Required Permissions\u003c/p\u003e\n\r\n      \u003c/div\u003e\r\n    \u003cdiv class=\"callout-body\"\u003e\r\n      \u003cp\u003eMake sure that the bot has permission to manage roles \u003cstrong\u003eand\u003c/strong\u003e that the role the bot is assigning is below the highest\nrole the bot has.\u003c/p\u003e\n\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n\u003c/div\u003e\r\n\n\u003cdiv class=\"callout callout-caution d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/alert-triangle svg-inline callout-icon me-2 mb-3\" id=\"svg-alert-triangle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M12 9v4\" /\u003e\n  \u003cpath d=\"M10.363 3.591l-8.106 13.534a1.914 1.914 0 0 0 1.636 2.871h16.214a1.914 1.914 0 0 0 1.636 -2.87l-8.106 -13.536a1.914 1.914 0 0 0 -3.274 0z\" /\u003e\n  \u003cpath d=\"M12 16h.01\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eWarning: Discord Verification Levels\u003c/p\u003e","tags":[],"title":"Autorole"},{"content":"Tutorial Video Role Commands Warning: Required Bot Permissions\nMake sure that the bot has the manage role permission and that the bot\u0026rsquo;s role is above the role it is trying to assign.\nWarning: Required User Permissions\nIf you want to use any of the rolemenu commands, you need to have the MANAGE_GUILD permission, or the Manage Server permission. This is hard-coded, meaning that command overrides will not affect it.\nSimply give the role command a name and then select which role you want the bot to assign to the person.\nCommand Configuration Warning: Required and Ignored Roles\nDo not set the required role to the role you are assigning. You generally will not want to set the ignore role to the role you are assigning either, unless you wish to prevent the user from removing that role through the role-menu.\nRequire roles: require any of the selected roles. Ignore roles: ignore any of the selected roles. Group: Put the role in a role group (will be explained more further down). Role Groups Role groups are useful for applying restrictions on a group of roles such as only being able to have one or the other role etc. They\u0026rsquo;re also essential if you want to create a role menu. To create one, simply give the role group a name and then select which mode you want the role group to use.\nEvery role group, even Ungrouped has the option to delete all roles inside that group, other groups will not be affected. Be careful with that, it\u0026rsquo;s permanent and can\u0026rsquo;t be undone.\nThey\u0026rsquo;re essential if you want to create a role menu.\nThe different modes None: This mode does nothing other than checking against the roles required and ignored roles. Single: They can only have 1 role in the group. (e.g. for colors) Multiple: You can set the minimum and maximum number of roles a member can have in the group. Groups Configuration Warning: Required and Ignored Roles\nDo not set the required role to the role you are assigning. You generally will not want to set the ignore role to the role you are assigning either, unless you wish to prevent the user from removing that role through the rolemenu.\nRequire roles: require any of the selected roles. Ignore roles: ignore any of the selected roles. Mode: Select between none, single, multiple to restrict the number of roles they can assign them themselves. Role groups have additional options that can be enabled/disabled by selecting the corresponding checkbox such as:\nRequiring a user to have one of the following role at all time (after initial assignment). Removing the previous role when they assign themselves another role from the group. Example usage Say you have a server with 3 factions and want people to be able to assign their own faction when they join. That\u0026rsquo;s simple enough - all we have to do is:\nCreate the 3 roles Create 3 role commands for those roles Now everyone can assign themselves a faction! There are a couple of issues with this setup though:\nYou can assign yourself more than 1 faction. People can freely jump between factions. To fix these problems we can create a new group with the mode Single and assign the previous role commands to that group. Great! Now we can only have 1 faction! How can we solve jumping between factions then? You can enable the Require 1 role in group setting, now they can\u0026rsquo;t remove roles in the group, and they can have max. 1 role in the group, so they can\u0026rsquo;t jump around anymore!\nAdding roles to the role group Note: One Group Only\nRoles can only be assigned to one group.\nRefer back to the optional features for roles and select the role group you want to assign the role to.\nRole Menu Warning: Required Setup\nMake sure you created your role commands and assigned them a role group before starting. Role menu will not work if you have not done so.\nThe role menu makes it possible to have people assign roles by adding reactions to a message. If you\u0026rsquo;d like to create a message like in the example to create a rolemenu on, take a look at the Custom Embeds chapter.\nNote: Message Reactions Limit\nA role menu can only support up to 20 roles due to the reaction limit discord places on messages. If your role group has more than twenty you have to use the rolemenu finish sub-command and then add the rest of roles to a new message using the -skip flag.\nTo set up a role menu, the related roles have to be added to a role group, then you invoke the command -rolemenu create (role group name).\nThe group mode and other restrictions from the role group and role still apply to the roles in the role menu.\nAfter you type in the command, you will be taken through the setup process. If you want to disable DMs, create a custom message, or add new role to your role menu, be sure to read until the end.\nStep by step tutorial Make sure you created your role commands and assigned them a role group before starting. Role menu will not work if you have not done so. All switches and flags (nodm, rr, etc\u0026hellip;) start with hyphen symbol -, not your prefix.\nOnce you\u0026rsquo;ve made your role commands and assigned them to a role group, go to the channel in Discord where you want the role menu to be created. Then type -rolemenu create (group name); applying our \u0026ldquo;Sports\u0026rdquo; role group example, we\u0026rsquo;d have to send -rolemenu create Sports.\nAs you can see, the bot started creating the menu, and has asked you to add the emoji for the first role, Soccer. I\u0026rsquo;ll react on the message with my emoji of choice:\nNow the bot wants you to react with the emoji for the second role, Hockey:\nAnd similar for the final role, Basketball:\nAnd we\u0026rsquo;re done\u0026mdash;people can start using the menu by clicking on the reaction associated with their desired role. The setup message will be automatically deleted in a couple of minutes, but you can also delete it manually, if you so desire.\nCustom message To create a custom message for your role menu like event role menu you saw above, you will need to send a message. Then get the ID of the message by following the steps in how to get a message ID and type in the following command, -rolemenu create (group name) -m (message id). You would then complete the role menu like you would any normal role menu.\nDisabling DM confirmation If you do not want the bot to send you a DM when you are given or removed from a role, type in the following command -rolemenu update (message id) -nodm.\nAfter you have finish editing or creating your role menu, it will display whether DM notifications are enabled or not. Note that YAGPDB does not allow you to disable error messages such as cool-down messages with the nodm switch or any other method.\nRemove roles on reaction remove Remove roles on reaction remove, this means instead of the old toggling mode, adding reactions will strictly give you the role, and removing reactions will only take away the role from you. This mode is on by default for new menus.\nYou can set old menus to use this switch using the command rolemenu update (message id) -rr.\nRole Menu options Removing a role menu If you want to remove a role menu from a message, you can type in -rolemenu remove (message id) It will remove the role-menu from a message. The message itself won\u0026rsquo;t be deleted but the bot will now not do anything with reactions on that message.\nEditing a role menu If you want to change the emote for one your reaction, you can do so by typing in -rolemenu edit (message id) After you type it the command it will ask you to react on the emote you want to change. You will need to go to the role menu and react on the emote you want to change. After you have reacted on the desired emote, it will ask you to react with your new emote on the role menu.\nResetting all reactions If you edit your reaction emotes or simply want to give your emote a new clean slate. You can reset all the reactions by typing in -rolemenu resetreactions (message id). It will remove all reactions on this menu and re-adds them, can be used to fix the order.\nUpdating a role menu If you added a new role to your role group, you can update your role menu. Update it by typing in -rolemenu update (message id) and follow the instructions given.\nHow to get a message ID (Desktop) Make sure you have enabled developer mode in your Discord settings.\nTo get the ID of the message you want to set the custom role menu on, click on the three dots on the far right hand side of the message and click on Copy Message ID.\n","date":"0001-01-01","id":48,"permalink":"/docs/roles/self-assignable-roles/","summary":"","tags":[],"title":"Self Assignable Roles"},{"content":"\rWarning: Required Bot Permissions\nMake sure that the bot has permission to manage roles and that the role the bot is assigning is below the highest role the bot has.\nBulk role allows you to assign\u0026mdash;or remove\u0026mdash;a role en masse. YAGPDB provides several filters to narrow down assignment, which will be further explained below. You can only run one bulk role proess at any given time, so you\u0026rsquo;ll have to either wait until the current one completes or simply just cancel it.\nNote: Premium Only\nDue to the nature of this operation requiring a lot of API calls to Discord and the associated cost with that, we provide this as a premium-only feature.\nConfiguration Target Role Select the role that you wish to assign or remove. Make sure that the bot\u0026rsquo;s highest role is above this selected role.\nOperation Assign role: Assigns the selected role. Remove role: removes the selected role. Filter Type All members: Assign or remove the target role to/from all members indiscriminately. Bots only: Assign or remove the target role only to/from bots. Humans only: Assign or remove the target role only to/from humans. Has specific roles: Only care about members with at least one of these roles. Optionally you can tell the bot to require all of your selected roles. Missing specific roles: Like the above, but only on members without at least one of these roles. Optionally for all selected roles. Joined after date: Only care about members that joined after the selected date. Joined before date: Only care about members that joined before the selected date. Notification Channel Optionally select a channel you wish to receive notifications about the operation status of bulk assignment. The bot will let you know when it encountered an error during processing, otherwise after it wholly completed it.\nAfter you\u0026rsquo;ve configured everything to your liking, click the green \u0026ldquo;start\u0026rdquo; button and let the magic happen. If you changed your mind, you can always cancel it during the processing.\n","date":"0001-01-01","id":49,"permalink":"/docs/roles/bulk-role/","summary":"\u003cdiv class=\"callout callout-caution d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/alert-triangle svg-inline callout-icon me-2 mb-3\" id=\"svg-alert-triangle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M12 9v4\" /\u003e\n  \u003cpath d=\"M10.363 3.591l-8.106 13.534a1.914 1.914 0 0 0 1.636 2.871h16.214a1.914 1.914 0 0 0 1.636 -2.87l-8.106 -13.536a1.914 1.914 0 0 0 -3.274 0z\" /\u003e\n  \u003cpath d=\"M12 16h.01\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eWarning: Required Bot Permissions\u003c/p\u003e\n\r\n      \u003c/div\u003e\r\n    \u003cdiv class=\"callout-body\"\u003e\r\n      \u003cp\u003eMake sure that the bot has permission to manage roles \u003cstrong\u003eand\u003c/strong\u003e that the role the bot is assigning is below the highest\nrole the bot has.\u003c/p\u003e","tags":[],"title":"Bulk Role"},{"content":"Tickets let your members interact with your server staff in a private and more organized way. The bot will create a dedicated channel that can only be seen by the staff and the member who created the ticket, with the option to add more users as-needed.\nNote: Required Bot Permissions\nMake sure that the bot has permission to manage channels in the category you want the bot to create tickets in, as well as permission to send messages in said category, the transcript channels, and the ticket log channel.\nCommands See the Commands page for a listing of all commands. By default, we impose no restrictions on who can run these commands, though it may be pertinent to restrict sensitive commands such as the -tickets close command to staff members using Command overrides.\nConfiguration At the top of the tickets settings page, you will find a toggle to enable or disable the ticket system in its entirety. If you wish to disable certain parts, such as the tickets adduser command, please use a command override instead.\nIf you disable the ticket system, the bot will respond with an error message when you try to run ticket-related commands, unless they are also disabled using command overrides.\nAdmin Roles Individual tickets can be set to an admin-only mode, where only users with these specified roles will be able to view that ticket channel.\nToggling this mode is done by running -tickets adminonly in the ticket\u0026rsquo;s channel. Running the command again will deactivate the admin-only mode. This may serve useful when handling issues that require a higher level of privacy, such as complaints about staff members.\nSelect as many roles as you like\u0026mdash;they need not have \u0026ldquo;Administrator\u0026rdquo; or similar Discord permissions commonly associated with the term \u0026ldquo;admin\u0026rdquo;.\nMod Roles These roles will be excluded from viewing tickets that are set to admin-only mode. Select as many as you like\u0026mdash;they need not have \u0026ldquo;Manage Messages\u0026rdquo;, \u0026ldquo;Moderate Members\u0026rdquo; or other Discord permissions commonly associated with the term \u0026ldquo;moderator\u0026rdquo;.\nHaving selected separate roles for moderators and administrators can be useful in larger servers where the two roles have different responsibilities, but nothing prevents you from selecting the same role for both.\nTicket Category The bot uses channels for tickets, and these channels are created in a category of your choosing. This category should be set up with the necessary permissions for the bot to create channels in it.\nNote: Discord Channel Limit\nDiscord limits categories to contain at most 50 channels. If you experience a high volume of tickets, consider closing some or researching alternative bots that handle tickets differently.\nTicket Transcripts Channel This is the channel where text transcripts of tickets will be sent to, given that you activated the option to do so. This channel does not have to be part of the ticket category you selected further up.\nWe also provide a separate option to download attachments sent in the ticket, which will be posted as a ZIP archive in this channel.\nTo keep admin-only tickets private, you can select a separate transcripts channel for tickets that were closed when they are in the admin-only mode during closure\u0026mdash;if this is not necessary for your server, select the same channel as for the regular tickets.\nTicket Status Updates When a ticket is created or closed, the bot will send a message to this channel to inform your staff about this event. Selecting \u0026ldquo;None\u0026rdquo; will cause the bot to not send these updates.\nOpening Message This field supports custom command templating and will be executed in the newly created channel whenever a new ticket is created. Feel free to customize this as you see fit.\nThe default message is the following custom command code:\n{{$embed := cembed `description` (joinStr `` `Welcome ` .User.Mention ` Please describe the reasoning for opening this ticket, include any information you think may be relevant such as proof, other third parties and so on.` \u0026#34;\\n\\nuse the following command to close the ticket\\n\u0026#34; \u0026#34;`-ticket close reason for closing here`\\n\\n\u0026#34; \u0026#34;use the following command to add users to the ticket\\n\u0026#34; \u0026#34;`-ticket adduser @user`\u0026#34;)}} {{sendMessage nil $embed}} The user-provided reason for opening this ticket is available under the {{ .Reason }} template data.\n","date":"0001-01-01","id":50,"permalink":"/docs/tools-and-utilities/tickets/","summary":"\u003cp\u003eTickets let your members interact with your server staff in a private and more organized way. The bot will create a\ndedicated channel that can only be seen by the staff and the member who created the ticket, with the option to add more\nusers as-needed.\u003c/p\u003e\n\u003cdiv class=\"callout callout-note d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eNote: Required Bot Permissions\u003c/p\u003e","tags":[],"title":"Tickets"},{"content":"","date":"0001-01-01","id":51,"permalink":"/docs/tools-and-utilities/","summary":"","tags":[],"title":"Tools and Utilities"},{"content":"","date":"0001-01-01","id":52,"permalink":"/docs/fun/","summary":"","tags":[],"title":"Fun"},{"content":"The reputation system tracks each user\u0026rsquo;s reputation score, and allows users to add or remove reputation points from other users.\nSetup Reputation is not enabled by default. To enable it, please go to the control panel and check Reputation enabled.\nEnable giving rep when someone says \u0026ldquo;thanks @user\u0026rdquo;? This is an alternative way of -giverep.\nName for reputation points This will be displayed in the -rep command. By default, it is Rep.\nRep cooldown in seconds This is the cooldown for the -giverep and -takerep commands. It does not affect the -setrep command. No one can bypass this cooldown, including admins.\nMaximum amount of rep that can be given/taken away in one command This affects the -giverep and -takrep commands which users can choose to specify the number of points to be given/taken away.\nAdmin role Users with this role have access to the -setrep command and can freely change anyone\u0026rsquo;s points to any number.\nRequired role to give/remove points Users with this role have access to the -giverep and -takerep commands which is affected by the Rep cool down in seconds and the Maximum amount of rep that can be given/taken away in one command. If set to none, everyone will be able to use these commands.\nRequired role to receive/being taken away points from Users with this role participates in the point system which they can be given/taken away points from. If set to none, everyone will be participating.\nDisallowed role for giving/taking away points Users with this role cannot use the -giverep and -takerep commands. This also overrides the Required role to give/remove points.\nDisallowed role for receiving/being taken away points from Users with this role cannot participate in the point system which they can be given/taken away points from. This also overrides the Required role to receive/being taken away points from.\nReputation roles You can set up role rewards for reaching certain reputation amounts. Up to 5 rewards on free, 25 for premium. This system is basic and offers little customization. For more advanced setups, custom commands are recommended.\nCreate new reputation role Select a rep point threshold and role to assign when a user receives that many points.\nExisting reputation roles A listing of all your existing reputation roles with their respective threshold.\nReputation logs Besides using the command -replog , you can also check the logs from the control panel. Specify a user ID to check the logs affecting the points of the user.\nReset all user\u0026rsquo;s reputation This command is irreversible, and will reset everyone\u0026rsquo;s reputation point to 0.\n","date":"0001-01-01","id":53,"permalink":"/docs/fun/reputation/","summary":"\u003cp\u003eThe reputation system tracks each user\u0026rsquo;s reputation score, and allows users to add or remove reputation points from\nother users.\u003c/p\u003e\n\u003ch2 id=\"setup\"\u003eSetup\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"#h-rh-i-0a7999f6a5fcb1c9d6ff4e17cf05fb9e-lightbox\"\u003e\n\u003cimg alt=\"Overview of the Reputation System\" height=\"790\" id=\"h-rh-i-0a7999f6a5fcb1c9d6ff4e17cf05fb9e\" src=\"/docs/fun/overview_reputation.png\" width=\"1560\"\u003e\u003c/a\u003e\n\u003ca href=\"javascript:history.back();\" class=\"lightbox\" id=\"h-rh-i-0a7999f6a5fcb1c9d6ff4e17cf05fb9e-lightbox\"\u003e\n  \u003cimg loading=\"lazy\" alt=\"Overview of the Reputation System\" height=\"790\" id=\"h-rh-i-0a7999f6a5fcb1c9d6ff4e17cf05fb9e\" src=\"/docs/fun/overview_reputation.png\" width=\"1560\"\u003e\n\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eReputation is not enabled by default. To enable it, please go to the \u003ca href=\"https://yagpdb.xyz/manage\" rel=\"external\"\u003econtrol panel\u003c/a\u003e and\ncheck \u003cem\u003eReputation enabled.\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"enable-giving-rep-when-someone-says-thanks-user\"\u003eEnable giving rep when someone says \u0026ldquo;thanks @user\u0026rdquo;?\u003c/h3\u003e\n\u003cp\u003eThis is an alternative way of \u003ccode\u003e-giverep\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"name-for-reputation-points\"\u003eName for reputation points\u003c/h3\u003e\n\u003cp\u003eThis will be displayed in the \u003ccode\u003e-rep\u003c/code\u003e command. By default, it is \u003cem\u003eRep\u003c/em\u003e.\u003c/p\u003e","tags":[],"title":"Reputation"},{"content":"The soundboard system allows the bot to join a voice channel, and play sounds triggered by soundboard commands.\nUploading New Sounds The settings listed below only apply to that specific sound, and not the entire soundboard. Use a command override to restrict access to the soundboard system as a whole.\nName Give the sound a name. This name will be shown in the list to play later on. Avoid giving duplicated names for easier reference.\nAllowed roles Choose to require users to have a role in order to play this sound.\nDisallowed roles These roles cannot play the sound, even if they have an allowed role.\nUpload file Note: Choose Either URL or File Upload\nDo not fill in the URL if you are going uploaded from local files, and vice versa.\nYou have two options to upload sounds:\nUpload with local files Specify a URL Upload with local files Click on Choose file and select an audio file to upload. All types of sound files, including videos with soundtracks, are supported.\nSpecify a URL You can also specify a sound URL instead of uploading one.\nThis has to be the direct link to the media file, and not, for example, a YouTube Video link. A direct link should end with .mp3 (or other relevant audio/video type), such as https://www.myinstants.com/media/sounds/airhorn_1.mp3.\nFinish Click on Upload/Download after you are done with the previous steps. You should see a Success notification when the upload is completed. Check the status of the sound under Existing sounds. Wait for several minutes, and press Save again if the status does not show Ready.\nPlaying sounds You can check for an available list of sounds with the -soundboard command. Then, play it with the -sb \u0026lt;sound name\u0026gt; command. Make sure that YAGPDB has the right permissions (i.e. connect to and speak in the voice channel).\nDeleting sounds You can delete sounds from the control panel. Look for the desired sound name under Existing sounds and press Delete to remove it from the list.\n","date":"0001-01-01","id":54,"permalink":"/docs/fun/soundboard/","summary":"\u003cp\u003eThe soundboard system allows the bot to join a voice channel, and play sounds triggered by soundboard commands.\u003c/p\u003e\n\u003ch2 id=\"uploading-new-sounds\"\u003eUploading New Sounds\u003c/h2\u003e\n\u003cp\u003eThe settings listed below only apply to that specific sound, and not the entire soundboard. Use a \u003ca href=\"/docs/core/command-settings/\"\u003ecommand\noverride\u003c/a\u003e to restrict access to the soundboard system as a whole.\u003c/p\u003e\n\u003ch3 id=\"name\"\u003eName\u003c/h3\u003e\n\u003cp\u003eGive the sound a name. This name will be shown in the list to play later on. Avoid giving duplicated names for easier\nreference.\u003c/p\u003e","tags":[],"title":"Soundboard"},{"content":"","date":"0001-01-01","id":55,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"","date":"0001-01-01","id":56,"permalink":"/docs/reference/templates/","summary":"","tags":[],"title":"Templates"},{"content":"Library of base data accessible within custom scripting.\n\u0026ldquo;Go is all about type\u0026hellip; Type is life.\u0026rdquo; // William Kennedy\nPreface All available data that can be used in YAGPDB\u0026rsquo;s templating \u0026ldquo;engine\u0026rdquo; which is slightly modified version of Go\u0026rsquo;s stdlib text/template package; more in depth and info about actions, pipelines and global functions like printf, index, len,etc \u0026gt; https://golang.org/pkg/text/template/ . This section is meant to be a concise and to the point reference document for all available templates/functions. Functions are covered in Function documentation. For detailed explanations and a syntax guide, please refer to the learning resource.\nNote: Disable \u0026ldquo;Smart\u0026rdquo; Quotes\nTemplating system uses standard ASCII quotation marks: \u0026quot; for straight double quotes, ' for apostrophes or single quotes and` for backticks/back quotes; so make sure no \u0026ldquo;smart-quotes\u0026rdquo; are being used.\nThe difference between back quotes and double quotes in string literals is covered in the Go Language Specification.\nThe Dot and Variables The dot (also known as cursor) {{ . }} encompasses all active data available for use in the templating system, in other words it always refers to current context.\nFor example .User is a Discord User object/structure of current context, meaning the triggering user. To get user object for other users, functions getMember, userArg would help. Same meaning of object/struct applies to other Fields with dot prefix. If it is mentioned as a Method (for example, .Append for type cslice) or as a field on a struct (for example, .User.Bot) then it can not be used alone in template context and always belongs on a parent value. That is, {{.Bot}} would return \u0026lt;no value\u0026gt; whereas {{.User.Bot}} returns bool true/false. Another good example is .Reaction.Emoji.MessageFormat, here you can use .MessageFormat every time you get emoji structure of type discordgo.Emoji, either using reaction triggers or for example .Guild.Emojis.\nFrom official docs \u0026gt; \u0026ldquo;Execution of the template walks the structure and sets the cursor, represented by a period . and called \u0026ldquo;dot\u0026rdquo;, to the value at the current location in the structure as execution proceeds.\u0026rdquo; All following fields/methods/objects like User/Guild/Member/Channel etc are all part of that dot-structure and there are some more in tables below.\nFor commenting something inside a template, use this syntax: {{/* this is a comment */}}. May contain newlines. Comments do not nest, and they start and end at the delimiters.\n$ has a special significance in templates, it is set to the starting value of a dot. This means you have access to the global context from anywhere - e.g., inside range/with actions. $ for global context would cease to work if you redefine it inside template, to recover it {{ $ := . }}.\n$ also denotes the beginning of a variable, which maybe be initialized inside a template action. So data passed around template pipeline can be initialized using syntax \u0026gt; $variable := value. Previously declared variable can also be assigned with new data \u0026gt; $variable = value, it has to have a white-space before it or control panel will error out. Variable scope extends to the end action of the control structure (if, with, range, etc.) in which it is declared, or to the end of custom command if there are no control structures - call it global scope.\nPipes A powerful component of templates is the ability to stack actions - like function calls, together - chaining one after another. This is done by using pipes |. Borrowed from Unix pipes, the concept is simple: each pipeline’s output becomes the input of the following pipe. One limitation of the pipes is that they can only work with a single value and that value becomes the last parameter of the next pipeline. Example: {{randInt 41| add 2}} would pipelinerandInt function\u0026rsquo;s return to addition add as second parameter and it would be added to 2; this more simplified would be like {{40| add 2}} with return 42. If written normally, it would be {{ add 2 (randInt 41) }}. Same pipeline but using a variable is also useful one -{{$x:=40| add 2}} would not return anything as printout, 40 still goes through pipeline to addition and 42 is stored to variable $x whereas {{($x:=40)| add 2}} would return 42 and store 40 to $x.\nDanger: Use Sparingly\nPipes are useful in select cases to shorten code and in some cases improve readability, but they should not be overused. In most cases, pipes are unnecessary and cause a dip in readability that helps nobody.\nContext Data Context data refers to information accessible via the dot, {{ . }}. The accessible data ranges from useful constants to information regarding the environment in which the custom command was executed, such as the user that ran it, the channel it was ran in, and so on.\nFields documented as accessible on specific structures, like the context user .User, are usable on all values that share the same type. That is, given a user $user, $user.ID is a valid construction that yields the ID of the user. Similarly, provided a channel $channel, $channel.Name gives the name of the channel.\nField Description .BotUser Returns bot\u0026rsquo;s user object. .CCID The ID of currently executing custom command in type of int64. .CCRunCount Shows run count of triggered custom command, although this is not going to be 100% accurate as it\u0026rsquo;s cached up to 30 minutes. .CCTrigger If trigger type has a printable trigger, prints out its name. For example, if trigger type is regex and trigger is set to \\A, it would print \\A. .CustomID If triggered by a component or a modal, prints its full Custom ID. .DomainRegex Returns string value of in-built domain-matching regular expression. .IsMessageEdit Returns boolean true/false if message is edited and edit trigger for custom commands is enabled. Defaults to false. .IsPremium Returns boolean true/false whether guild is premium of YAGPDB or not. .LinkRegex Returns string value of in-built link-matching regular expression. .Permissions Returns all mapped-out permission bits available for Discord in their bitshifted decimal values; e.g. {{.Permissions.AddReactions}} would return 64, same as {{bitwiseLeftShift 1 6}}. More in Discord\u0026rsquo;s Permissions documentation. .ServerPrefix Returns server\u0026rsquo;s command-prefix. Channel Field Description .Channel.AppliedTags All tags applied to a forum channel post as []int64 slice of tag IDs. .Channel.AvailableTags All tags available for forum channel posts as a slice of []discordgo.ForumTag. .Channel.Bitrate Bitrate used; only set on voice channels. .Channel.GuildID Guild ID of the channel. .Channel.ID The ID of the channel. .Channel.IsForum Whether the channel is a forum channel. .Channel.IsPrivate Whether the channel is created for DM. .Channel.IsThread Whether the channel is a thread. .Channel.Mention Mentions the channel object. .Channel.Name The name of the channel. .Channel.NSFW Outputs whether this channel is NSFW or not. .Channel.OwnerID The ID of the creator of threads as int64. Returns 0 for normal channels. .Channel.ParentID The ID of the channel\u0026rsquo;s parent (category), returns 0 if none. .Channel.PermissionOverwrites A slice of Discord permission overwrite structures applicable to the channel. .Channel.Position Channel position from top-down. .Channel.ThreadMetadata Metadata for threads. Only present on threads. .Channel.Topic The topic of the channel. .Channel.Type The type of the channel. Explained further in Discord\u0026rsquo;s channel documentation Channel object in Discord documentation.\nChannel functions documentation.\nThread Metadata Field Description .Archived Whether the thread is archived. .AutoArchiveDuration Duration in minutes to automatically archive the thread after recent activity. .ArchiveTimestamp When the thread was archived. .Locked Whether the thread is locked. .Invitable Whether non-moderators can add other members to the thread. Guild / Server Field Description .Guild.AfkChannelID Outputs the AFK channel ID. .Guild.AfkTimeout Outputs the time when a user gets moved into the AFK channel while not being active. .Guild.Banner Returns guild banner hash if available. .Guild.Channels Outputs a slice of channels in the guild with type []dstate.ChannelState. .Guild.DefaultMessageNotifications Outputs the default message notification setting for the guild. .Guild.Emojis Outputs a list of emojis in the guild with type discordgo.Emoji. .Guild.ExplicitContentFilter Outputs the explicit content filter level for the guild. .Guild.Features The list of enabled guild features of type []string. .Guild.Icon Outputs the icon hash ID of the guild\u0026rsquo;s icon. Setting full icon URL is explained in Discord reference documentation. .Guild.ID Outputs the ID of the guild. .Guild.MemberCount Outputs the number of users on a guild. .Guild.MfaLevel The required MFA level for the guild. If enabled, members with moderation powers will be required to have 2-factor authentication enabled in order to exercise moderation powers. .Guild.Name Outputs the name of the guild. .Guild.OwnerID Outputs the ID of the owner. .Guild.PreferredLocale The preferred locale of a guild with the \u0026ldquo;PUBLIC\u0026rdquo; feature; used in server discovery and notices from Discord; defaults to \u0026ldquo;en-US\u0026rdquo; .Guild.Roles Outputs all roles and indexing them gives more information about the role. For example {{len .Guild.Roles}} gives you how many roles are there in that guild. Role struct has following fields. .Guild.Stickers A slice of all sticker objects in the guild. .Guild.Splash Outputs the splash hash ID of the guild\u0026rsquo;s splash. .Guild.SystemChannelID The ID of the channel where guild notices such as welcome messages and boost events are posted. .Guild.Threads Returns all active threads in the guild as a slice of type []dstate.ChannelState. .Guild.VerificationLevel Outputs the required verification level for the guild. .Guild.VoiceStates Outputs a slice of voice states (users connected to VCs) with type []discordgo.VoiceState. .Guild.WidgetChannelID Outputs the channel ID for the server widget. .Guild.WidgetEnabled Outputs whether or not the server widget is enabled. Method Description .Guild.BannerURL \u0026ldquo;256\u0026rdquo; Gives the URL for guild\u0026rsquo;s banner, argument “256” is the size of the picture and increases/decreases twofold (e.g. 512, 1024 or 128, 64 etc.). .Guild.GetChannel id Gets the channel with the ID provided, returning a *dstate.ChannelState. .Guild.GetEmoji id Gets the guild emoji with the ID provided, returning a *discordgo.Emoji. .Guild.GetMemberPermissions channelID memberID memberRoles Calculates full permissions that the member has in the channel provided, taking into account the roles of the member. Example: {{.Guild.GetMemberPermissions .Channel.ID .Member.User.ID .Member.Roles}} would retrieve the permissions integer the triggering member has in the context/triggering channel. .Guild.GetRole id Gets the role object with the integer ID provided, returning a struct of type *discordgo.Role. .Guild.GetVoiceState userID Gets the voice state of the user ID provided, returning a *discordgo.VoiceState. Example code to show if user is in VC or not: {{if .Guild.GetVoiceState .User.ID}} user is in voice channel {{else}} user is not in voice channel {{end}} .Guild.IconURL \u0026ldquo;size\u0026rdquo; Outputs the URL of guild’s avatar/icon. Size argument is the size of the picture and can increase/decrease twofold (e.g. 512, 1024 or 128, 64 etc.). Guild object in Discord documentation.\nInteraction Use of interactions within YAGPDB is an advanced topic; the documentation should be used only as reference. To learn about using interactions, please view our interactions cookbook.\nThis is available and part of the dot when a component or modal trigger is used.\nField Description .Interaction.ChannelID The ID of the channel the interaction was made in. .InteractionData Is either a discordgo.MessageComponentInteractionData (if triggered by a button/select menu) or a discordgo.ModalSubmitInteractionData (if triggered by a modal submission) object. .Interaction.ID The interaction\u0026rsquo;s ID. Is unique to each interaction, each button push/modal submission is a uniquely generated ID. .Interaction.Locale The locale of the user\u0026rsquo;s Discord client. .Interaction.Member The member who interacted. .Interaction.Message The message object the interaction was taken on. .Interaction.RespondedTo Boolean, true if this interaction has been responded to already. .Interaction.Token The interaction\u0026rsquo;s token. Is unique to each interaction. Required for sending followup interactions. Field Description .Args List of everything that is passed to .CustomID. .Args is a slice of type string. .Cmd .Cmd is of type string and shows all arguments that trigger custom command, part of .Args. Starting from {{index .Args 0}}. .CmdArgs List of all the arguments passed after .Cmd (.Cmd is the actual trigger) .CmdArgs is a slice of type string. For example {{$allArgs := (joinStr \u0026quot; \u0026quot; .CmdArgs)}} saves all the arguments after trigger to a variable $allArgs. .CustomID The triggering component/modal\u0026rsquo;s Custom ID. Note: This custom ID excludes the templates- prefix which is added to all components and modals under the hood. .IsButton Boolean, is true if the command was triggered by a button. .IsMenu Boolean, is true if the command was triggered by a select menu. .MenuType Type of select menu which triggered the command. Can be \u0026quot;string\u0026quot;, \u0026quot;user\u0026quot;, \u0026quot;role\u0026quot;, \u0026quot;mentionable\u0026quot;, or \u0026quot;channel\u0026quot;. .StrippedID \u0026ldquo;Strips\u0026rdquo; or cuts off the triggering part of the custom ID and prints out everything else after that. Bear in mind, when using regex as trigger, for example \u0026quot;day\u0026quot; and input custom ID is \u0026quot;have-a-nice-day-my-dear-YAG\u0026quot; output will be \u0026quot;-my-dear-YAG\u0026quot; - rest is cut off. .Values List of all options selected with a select menu, OR all values input into a modal in order. Interaction object in Discord documentation.\nInteraction functions are covered in their respective section on the functions page.\nMember Field Description .Member.Avatar Member’s avatar hash, if it is custom per server, then custom avatar hash. .Member.CommunicationDisabledUntil Returns time.Time when member’s time out expires. Time is in the past or nil if the user is not timed out.\nNB. was previously called TimeoutExpiresAt. .Member.Flags Guild member flags represented as a bit set, defaulting to 0. .Member.GuildID The guild ID on which the member exists. .Member.JoinedAt When member joined the guild/server of type discordgo.Timestamp. Method .Parse will convert this to of type time.Time. .Member.Nick The nickname for this member. .Member.Pending Returns bool true/false, whether member is pending behind Discord\u0026rsquo;s screening process. .Member.PremiumSince When the user started boosting the guild. .Member.Roles A slice of role IDs that the member has. .Member.User Underlying user object on which the member is based on. Method Description .Member.AvatarURL \u0026ldquo;256\u0026rdquo; Gives the URL for member’s avatar, argument “256” is the size of the picture and increases/decreases twofold (e.g. 512, 1024 or 128, 64 etc.). Member object in Discord documentation.\nMember functions documentation.\nMessage Field Description .Message.Activity Represents the activity sent with a message, such as a game invite, of type *discordgo.MessageActivity. Sent with Rich Presence-related chat embeds. .Message.ApplicationID If the message is an interaction- or application-owned webhook, this is the ID of that application. .Message.Attachments Attachments of this message (slice of attachment objects). .Message.Author Author of the message (User object). .Message.ChannelID Channel ID this message is in. .Message.Components Slice of discordgo.ActionsRows, which each contain components. Example on indexing the first button or menu under a message: ( index ( index .Message.Components 0 ).Components 0 ) .Message.Content Text content of this message. .Message.ContentWithMentionsReplaced Replaces all \u0026lt;@ID\u0026gt; mentions with the username of the mention. .Message.EditedTimestamp The time at which the last edit of the message occurred, if it has been edited. As with .Message.Timestamp, it is of type discordgo.Timestamp. .Message.Embeds Embeds of this message (slice of embed objects). .Message.Flags Message flags, represented as a bit set. .Message.GuildID Guild ID in which the message is. .Message.ID ID of the message. .Message.Link Discord link to the message. * .Message.Member Member object. * .Message.MentionEveryone Whether the message mentions everyone, returns bool true/false. .Message.MentionRoles The roles mentioned in the message, returned as a slice of type discordgo.IDSlice. .Message.Mentions Users this message mentions, returned as a slice of type []*discordgo.User. .Message.MessageReference MessageReference contains reference data sent with crossposted or reply messages. Has fields MessageID, ChannelID and GuildID. .Message.Pinned Whether this message is pinned, returns bool true/false. .Message.Reactions Reactions on this message, returned as a slice of type []*discordgo.MessageReactions. Reaction Object in Discord documentation. .Message.Reference Reference returns MessageReference of given message. .Message.ReferencedMessage Message object associated by message_reference, like a message that was replied to. .Message.MessageSnapshots A slice of message snapshot objects, which are slimmed down message objects, currently limited to Type, Content, Embeds, Attachments, Timestamp, EditedTimestamp, Flags, Mentions, MentionRoles, StickerItems, and Components. .Message.StickerItems A slice of sticker items attached to the message. .Message.Timestamp Timestamp of the message in type discordgo.Timestamp (use .Message.Timestamp.Parse to get type time.Time and .Parse.String method returns type string). .Message.TTS Whether the message is text-to-speech. * .Message.Type The type of the message. .Message.WebhookID If the message is generated by a webhook, this is the webhook\u0026rsquo;s id .Message.RoleSubscriptionData Data of the role subscription purchase or renewal that prompted this message. Only set on messages of type 25 (ROLE_SUBSCRIPTION_PURCHASE). Field Description .Args List of everything that is passed to .Message.Content. .Args is a slice of type string. .Cmd .Cmd is of type string and shows all arguments that trigger custom command, part of .Args. Starting from {{index .Args 0}}. .CmdArgs List of all the arguments passed after .Cmd (.Cmd is the actual trigger) .CmdArgs is a slice of type string. For example {{$allArgs := (joinStr \u0026quot; \u0026quot; .CmdArgs)}} saves all the arguments after trigger to a variable $allArgs. .StrippedMsg \u0026ldquo;Strips\u0026rdquo; or cuts off the triggering part of the message and prints out everything else after that. Bear in mind, when using regex as trigger, for example \u0026quot;day\u0026quot; and input message is \u0026quot;Have a nice day my dear YAG!\u0026quot; output will be \u0026quot;my dear YAG!\u0026quot; - rest is cut off. * denotes field that will not have proper return when using getMessage function.\nMessage object in Discord documentation.\nMessage functions documentation.\nRoleSubscriptionData Field Description .RoleSubscriptionListingID The ID of the SKU and listing that the user is subscribed to. .TierName The name of the tier that the user is subscribed to. .TotalMonthsSubscribed The cumulative number of months that the user has been subscribed for. .IsRenewal Whether this notification is for a renewal rather than a new purchase. Reaction This is available and part of the dot when reaction trigger type is used.\nField Description .Reaction Returns reaction object which has following fields UserID, MessageID, Emoji.(ID/Name/...), ChannelID, GuildID. The Emoji.ID is the ID of the emoji for custom emojis, and Emoji.Name will hold the Unicode emoji if its a default one. (otherwise the name of the custom emoji). .Reaction.Emoji.APIName Returns type string, a correctly formatted API name for use in the MessageReactions endpoints. For custom emojis it is emojiname:ID. .Reaction.Emoji.MessageFormat Returns a correctly formatted emoji for use in Message content and embeds. It\u0026rsquo;s equal to \u0026lt;:.Reaction.Emoji.APIName\u0026gt; and \u0026lt;a:.Reaction.Emoji.APIName\u0026gt; for animated emojis. .ReactionAdded Returns a boolean type bool true/false indicating whether reaction was added or removed. .ReactionMessage Returns the message object reaction was added to. Not all regular .Message fields are filled though e.g. .Member. {{range .ReactionMessage.Reactions}}\n{{.Count}} - {{.Emoji.Name}} {{end}}Returns emoji count and their name.Has an alias .Message and it works the same way. Reaction object in Discord documentation.\nEmoji object in Discord documentation.\nUser Field Description .User The user\u0026rsquo;s username together with discriminator. .User.Avatar The user\u0026rsquo;s avatar hash. .User.Bot Determines whether the target user is a bot - if yes, it will return true. .User.Discriminator The user\u0026rsquo;s discriminator/tag (The four digits after a person\u0026rsquo;s username). .User.Globalname User\u0026rsquo;s global username from the new naming system. .User.ID The user\u0026rsquo;s ID. .User.Mention Mentions user. .User.PrimaryGuild The user\u0026rsquo;s primary guild, which holds information about the guild tag, if it exists. .User.String The user\u0026rsquo;s username, with legacy discriminator if available, as string type. .User.Username The user\u0026rsquo;s username. .UsernameHasInvite Only works with join and leave messages (not join dms). It will determine does the username contain an invite link. .RealUsername Only works with join and leave messages (not join DMs). This can be used to send the real username to a staff channel when invites are censored. Method Description .User.AvatarURL \u0026ldquo;256\u0026rdquo; Gives the URL for user\u0026rsquo;s avatar, argument \u0026ldquo;256\u0026rdquo; is the size of the picture and can increase/decrease twofold (e.g. 512, 1024 or 128, 64 etc.). User object in Discord documentation.\nUser functions documentation.\nPrimary Guild Field Description .IdentityGuildID The ID of the user\u0026rsquo;s primary guild. .IdentityEnabled Whether the user is displaying the primary guild\u0026rsquo;s tag. .Tag The text of the user\u0026rsquo;s server tag. .Badge The server tag badge hash. Method Description .BadgeURL Gives the URL for user\u0026rsquo;s server tag badge. Actions Actions, or elements enclosed in double braces {{ }}, are what makes templates dynamic. Without them, templates would be no more than static text. In this section, we introduce several special kinds of actions which affect the control flow of the program. For example, iteration actions like range and while permit statements to be executed multiple times, while conditional actions like if and with allow for alteration of what statements are ran or are not ran.\nIf (conditional branching) Branching using if action\u0026rsquo;s pipeline and comparison operators - these operators don\u0026rsquo;t need to be inside if branch. if statements always need to have an enclosing end.\nSee also the conditional branching chapter in the learning resources.\nTip: Test Many Arguments at Once\neq, though often used with 2 arguments (eq x y) can actually be used with more than 2. If there are more than 2 arguments, it checks whether the first argument is equal to any one of the following arguments. This behavior is unique to eq.\nNote: Only Compare the Same Data Type\nComparison operators always require the same type: i.e comparing 1.23 and 1 would throw incompatible types for comparison error as they are not the same type (one is float, the other int). To fix this, you should convert both to the same type -\u0026gt; for example, toFloat 1.\nCase Example if {{if (condition)}} output {{end}}\nInitialization statement can also be inside if statement with conditional statement, limiting the initialized scope to that if statement.\n{{$x := 24}}\n{{if eq ($x := 42) 42}} Inside: {{$x}} {{end}}\nOutside: {{$x}} else if {{if (condition)}} output1 {{else if (condition)}} output2 {{end}}\nYou can have as many else if statements as many different conditionals you have. else {{if (condition)}} output1 {{else}} output2 {{end}} Boolean Logic Case Example and {{if and (cond1) (cond2) (cond3)}} output {{end}} not {{if not (condition)}} output {{end}} or {{if or (cond1) (cond2) (cond3)}} output {{end}} Comparison Operators Case Example Equal: eq {{if eq .Channel.ID ########}} output {{end}} Not equal: ne {{$x := 7}} {{$y := 8}} {{ne $x $y}} returns true Less than: lt {{if lt (len .Args) 5}} output {{end}} Less than or equal: le {{$x := 7}} {{$y := 8}} {{le $x $y}} returns true Greater than: gt {{if gt (len .Args) 1}} output {{end}} Greater than or equal: ge {{$x := 7}} {{$y := 8}} {{ge $x $y}} returns false Range range iterates over element values in variety of data structures in pipeline - integers, slices/arrays, maps or channels. The dot . is set to successive elements of those data structures and output will follow execution. If the value of pipeline has zero length, nothing is output or if an {{else}} action is used, that section will be executed.\nNote: Continue and Break a Loop\nTo skip execution of a single iteration and jump to the next iteration, the {{continue}} action may be used. Likewise, if one wishes to skip all remaining iterations, the {{break}} action may be used. These both are usable also inside while action.\nAffected dot inside range is important because methods mentioned above in this documentation:.Server.ID, .Message.Content etc are all already using the dot on the pipeline and if they are not carried over to the range control structure directly, these fields do not exists and template will error out. Getting those values inside range and also with action would need $.User.ID for example.\nrange on slices/arrays provides both the index and element for each entry; range on map iterates over key/element pairs. If a range action initializes a variable, that variable is set to the successive elements of the iteration. range can also declare two variables, separated by a comma and set by index and element or key and element pair. In case of only one variable, it is assigned the element.\nLike if, rangeis concluded with{{end}}action and declared variable scope inside range extends to that point.\\\n{{/* range over an integer */}} {{range 2}}{{.}}{{end}} {{range $k, $v := toInt64 2}}{{$k}}{{$v}}{{end}} **{{/* range over a slice */}} **{{ range $index, $element := cslice \u0026#34;YAGPDB\u0026#34; \u0026#34;IS COOL!\u0026#34; }} {{ $index }} : {{ $element }} {{ end }} {{/* range on a map */}} {{ range $key, $value := dict \u0026#34;SO\u0026#34; \u0026#34;SAY\u0026#34; \u0026#34;WE\u0026#34; \u0026#34;ALL!\u0026#34; }} {{ $key }} : {{ $value }} {{ end }} {{/* range with else and variable scope */}} {{ range seq 1 1 }} no output {{ else }} output here {{ end }} {{ $x := 42 }} {{ range $x := seq 2 4 }} {{ $x }} {{ end }} {{ $x }} Danger: Stripping Whitespace Characters\nIf you\u0026rsquo;re getting an error along the lines of Custom command response was longer than 2k or response grew too big (\u0026gt;25k), that means you\u0026rsquo;re rendering a lot of whitespace characters.\nConsider the following code:\n{{ range 10000 }} {{ $x := . }} {{ end }} Hello! This program iterates ten thousand times, adding a newline and a tab character on every iteration to the output\u0026mdash;we can fix this error by telling the bot to throw away (or \u0026ldquo;strip\u0026rdquo;) whitespace characters by using the trim indicator -:\n{{ range 10000 }} {{- $x := . -}} {{ end }} Hello! This code will work as expected: iterating 10000 times essentially doing nothing, then sending Hello! to the chat.\nTry-catch Multiple template functions have the possibility of returning an error upon failure. For example, dbSet can return a short write error if the size of the database entry exceeds some threshold.\nWhile it is possible to write code that simply ignores the possibility of such issues occurring (letting the error stop the code completely), there are times at which one may wish to write more robust code that handles such errors gracefully. The try-catch construct enables this possibility.\nSimilar to an if action with an associated else branch, the try-catch construct is composed of two blocks: the try branch and the catch branch. First, the code in the try branch is ran, and if an error is raised by a function during execution, the catch branch is executed instead with the context (.) set to the offending error.\nTo check for a specific error, one can compare the result of the Error method with a predetermined message. (For context, all errors have a method Error which is specified to return a message describing the reason that the error was thrown.) For example, the following example has different behavior depending on whether \u0026ldquo;Reaction blocked\u0026rdquo; is in the message of the error caught.\n{{ try }} {{ addReactions \u0026#34;👋\u0026#34; }} added reactions successfully {{ catch }} {{ if in .Error \u0026#34;Reaction blocked\u0026#34; }} user blocked YAG :( {{ else }} different issue occurred: {{ .Error }} {{ end }} {{ end }} While while iterates as long as the specified condition is true, or more generally evaluates to a non-empty value. The dot (.) is not affected, unlike with the range action. Analogous to range, while introduces a new scope which is concluded by the end action. Within the body of a while action, the break and continue actions can be used to appropriate effect, like in a range action.\n{{/* efficiently search for an element in a sorted slice using binary search */}} {{ $xs := cslice 1 3 5 6 6 8 10 12 }} {{ $needle := 8 }} {{ $lo := 0 }} {{ $hi := sub (len $xs) 1 }} {{ $found := false }} {{/* it\u0026#39;s possible to combine multiple conditions using logical operators */}} {{ while and (le $lo $hi) (not $found) }} {{- $mid := div (add $lo $hi) 2 }} {{- $elem := index $xs $mid }} {{- if lt $elem $needle }} {{- $lo = add $mid 1 }} {{- else if eq $elem $needle }} {{- print \u0026#34;found at index \u0026#34; $mid }} {{- $found = true }} {{- else }} {{- $hi = sub $mid 1 }} {{- end -}} {{ end }} {{ if not $found }} not found {{ end }} With with lets you assign and carry pipeline value with its type as a dot (.) inside that control structure, it\u0026rsquo;s like a shorthand. If the value of the pipeline is empty, dot is unaffected and when an else or else if action is used, execution moves on to those branches instead, similar to the if action. Affected dot inside with is important because methods mentioned above in this documentation:.Server.ID, .Message.Content etc are all already using the dot on the pipeline and if they are not carried over to the with control structure directly, these fields do not exists and template will error out. Getting those values inside with and also range action would need $.User.ID for example.\nLike if and range actions, with is concluded using {{end}} and variable scope extends to that point.\n{{/* Shows the scope and how dot is affected by object\u0026#39;s value in pipeline */}} {{ $x := \u0026#34;42\u0026#34; }} {{ with and ($z:= seq 0 5) ($x := seq 0 10) }} len $x: `{{ len $x }}` {{/* \u0026#34;and\u0026#34; function uses $x as last value for dot */}} same as len dot: `{{ len . }}` but len $z is `{{ len $z }}` {{ end }} Outer-scope $x len however: {{ len $x }} {{/* when there\u0026#39;s no value, dot is unaffected */}} {{ with false }} dot is unaffected {{ else }} printing here {{ .CCID }} {{ end }} {{/* using else-if chain is possible */}} {{ with false }} not executed {{ else if eq $x \u0026#34;42\u0026#34; }} x is 42, dot is unaffected {{ .User.Mention }} {{ else if eq $x \u0026#34;43\u0026#34; }} x is not 43, so this is not executed {{ else }} branch above already executed, so else branch is not {{ end }} Associated Templates Templates (i.e., custom command programs) may also define additional helper templates that may be invoked from the main template. Technically speaking, these helper templates are referred to as associated templates. Associated templates can be used to create reusable procedures accepting parameters and outputting values, similar to functions in other programming languages.\nDefinition To define an associated template, use the define action. It has the following syntax:\n{{ define \u0026#34;template_name\u0026#34; }} {{/* associated template body */}} {{ end }} Danger: Associated Templates at Top Level\nWarning: Template definitions must be at the top level of the custom command program; in other words, they cannot be nested in other actions (for example, an if action.) That is, the following custom command is invalid:\n{{ if $cond }} {{ define \u0026#34;hi\u0026#34; }} hi! {{ end }} {{ end }} The template name can be any string constant; however, it cannot be a variable, even if said variable references a value of string type. As for the body of the associated template body, it can be anything that is a standalone, syntactically valid template program. Note that the first criterion precludes using variables defined outside of the associated template; that is, the following custom command is invalid, as the body of the associated template references a variable ($name) defined in an outer scope:\n{{ $name := \u0026#34;YAG\u0026#34; }} {{ define \u0026#34;hello\u0026#34; }} Hello, {{ $name }}! {{ end }} If accessing the value of $name is desired, then it needs to be passed as part of the context when executing the associated template.\nWithin the body of an associated template, the variable $ and the context dot (.) both initially refer to the data passed as context during execution. Consequently, any data on the original context that needs to be accessed must be explicitly provided as part of the context data. For example, if one wishes to access .User.Username in an associated template body, it is necessary to pass .User.Username as part of the context data when executing said template.\nTo return a value from an associated template, use the return action. Encountering a return action will cause execution of the associated template to end immediately and control to be returned to the caller. For example, below is an associated template that always returns 1:\n{{ define \u0026#34;getOne\u0026#34; }} {{ return 1 }} {{ end }} Note that it is not necessary for a value to be returned; {{ return }} by itself is completely valid.\nTip: Clean up Your Code With return\nSince all custom commands are themselves templates, using a return action at the top level is perfectly valid, and will result in execution of the custom command being stopped at the point the return is encountered.\n{{ if not .CmdArgs }} no arguments passed {{ return }} {{/* anything beyond this point is not executed */}} {{ end }} {{ $firstArg := index .CmdArgs 0 }} {{/* safe since .CmdArgs is guaranteed to be non-empty here */}} Execution To execute a custom command, one of three methods may be used: template, block, or execTemplate.\nTemplate action template is a function-like action that executes the associated template with the name provided, ignoring its return value. Note that the name of the template to execute must be a string constant; similar to define actions, a variable referencing a value of string type is invalid. Data to use as the context may optionally be provided following the name.\nNote: Consider Using execTemplate\nWhile template is function-like, it is not an actual function, leading to certain quirks; notably, it must be used alone, not part of another action (like a variable declaration), and the data argument need not be parenthesized. Due to this, it is recommended that execTemplate, which has much more intuitive behavior, be used instead of the template action if at possible.\nBelow is an example of the template action in action:\n{{ define \u0026#34;sayHi\u0026#34; }} {{- if . -}} hi there, {{ . }} {{- else }} hi there! {{- end -}} {{ end }} {{ template \u0026#34;sayHi\u0026#34; }} {{/* hi there! */}} {{ template \u0026#34;sayHi\u0026#34; \u0026#34;YAG\u0026#34; }} {{/* hi there, YAG */}} Trim markers: {{- ... -}}were used in above example because whitespace is considered as part of output for associated template definitions (and actions in general).\nBlock action block has a structure similar to that of a define action. It is equivalent to a define action followed by a template action:\n{{ $name := \u0026#34;YAG\u0026#34; }} {{ block \u0026#34;sayHi\u0026#34; $name }} hi there, {{ . }} {{ end }} {{/* equivalent to above */}} {{ define \u0026#34;sayHi\u0026#34; }} hi there, {{ . }} {{ end }} {{ template \u0026#34;sayHi\u0026#34; $name }} execTemplate function execTemplate is essentially the same as the template action, but it provides access to the return value of the template and may be used as part of another action. Below is an example using execTemplate:\n{{ define \u0026#34;factorial\u0026#34; }} {{- $n := 1 }} {{- range seq 2 (add . 1) }} {{- $n = mult $n . }} {{- end }} {{- return $n -}} {{ end }} {{ $fac := execTemplate \u0026#34;factorial\u0026#34; 5 }} 2 * 5! = {{ mult $fac 2 }} Custom Types Go has built-in primitive data types (int, string, bool, float64, \u0026hellip;) and built-in composite data types (array, slice, map, \u0026hellip;) which also are used in custom commands.\nYAGPDB\u0026rsquo;s templating \u0026ldquo;engine\u0026rdquo; has currently two user-defined, custom data types - templates.Slice and templates.SDict. There are other custom data types used like discordgo.Timestamp, but these are outside of the main code of YAGPDB, so not explained here further. Type time.Time is covered in its own section.\nCustom Types section discusses functions that initialize values carrying those templates.Slice (abridged to cslice), templates.SDict (abridged to sdict) types and their methods. Both types handle type interface{} element. It\u0026rsquo;s called an empty interface which allows a value to be of any type. So any argument of any type given is handled. (In \u0026ldquo;custom commands\u0026rdquo;-wise mainly primitive data types, but slices as well.)\nDanger: Reference Type-Like Behavior\nSlices and dictionaries in CCs exhibit reference-type like behavior, which may be undesirable in certain situations. That is, if you have a variable $x that holds a slice/dictionary, writing $y := $x and then mutating $y via Append/Set/Del/etc. will modify $x as well. For example:\n{{ $x := sdict \u0026#34;k\u0026#34; \u0026#34;v\u0026#34; }} {{ $y := $x }} {{ $y.Set \u0026#34;k\u0026#34; \u0026#34;v2\u0026#34; }} {{/* modify $y */}} {{ $x }} {{/* k has value v2 on $x as well - that is, modifying $y changed $x too. */}} If this behavior is undesirable, copy the slice/dictionary via cslice.AppendSlice or a range + Set call.\n{{ $x := sdict \u0026#34;k\u0026#34; \u0026#34;v\u0026#34; }} {{ $y := sdict }} {{ range $k, $v := $x }} {{- $y.Set $k $v -}} {{ end }} {{ $y.Set \u0026#34;k\u0026#34; \u0026#34;v2\u0026#34; }} {{ $x }} {{/* $x is unmodified - k still has value v */}} Note that this performs a shallow copy, not a deep copy - if you want the latter you will need to perform the aforementioned operation recursively.\ntemplates.Slice templates.Slice - This is a custom composite data type defined using an underlying data type []interface{}. It is of kind slice (similar to array) having interface{} type as its value and can be initialized using cslice function. Retrieving specific element inside templates.Slice is by indexing its position number.\nFunction Description cslice value1 value2 ... Function creates a slice of type templates.Slice that can be used elsewhere (as an argument for cembed and sdict for example).\nExample: cslice 1 \u0026quot;2\u0026quot; (dict \u0026quot;three\u0026quot; 3) 4.5 returns [1 2 map[three:3] 4.5], having length of 4 and index positions from 0 to 3. Notice that thanks to type interface{} value, templates.Slice elements\u0026rsquo; inherent type does not change. Method Description .Append arg Creates a new cslice having given argument appended fully by its type to current value. Has max size of 10 000 length. .AppendSlice arg Creates a new cslice from argument of type slice appended/joined with current value. Has max size of 10 000 length. .Set int value Changes/sets given int argument as index position of current cslice to new value. Note that .Set can only set indexes which already exist in the slice. .StringSlice strict-flag Compares slice contents - are they of type string, based on the strict-flag which is bool and is by default false. Under these circumstances if the element is a string then those elements will be included as a part of the []string slice and rest simply ignored. Also time.Time elements - their default string notation will be included. If none are string an empty []string slice is returned.If strict-flag is set to true it will return []string only if all elements are pure string, else \u0026amp;#x3C;no value\u0026gt; is returned.Example in this section\u0026rsquo;s Snippets. This section\u0026rsquo;s snippets To demonstrate .StringSlice {{(cslice currentTime.Month 42 \u0026quot;YAGPDB\u0026quot;).StringSlice}} will return a slice [February YAGPDB]. If the flag would have been set to true - {{\u0026hellip;).StringSlice true}}, all elements in that slice were not strings and \u0026lt;no value\u0026gt; is returned. General example:\nCreating a new cslice: {{ $x := (cslice \u0026#34;red\u0026#34; \u0026#34;red\u0026#34;) }} **{{ $x }}** Appending to current cslice data and assigning newly created cslice to same variable: {{ $x = $x.Append \u0026#34;green\u0026#34; }} **{{ $x }}** Setting current cslice value in position 1: {{ $x.Set 1 \u0026#34;blue\u0026#34; }} **{{ $x }}** Indexing that position 1: **{{ index $x 1 }}** Appending a slice to current cslice data but not assigning newly created cslice to same variable: **{{ $x.AppendSlice (cslice \u0026#34;yellow\u0026#34; \u0026#34;magenta\u0026#34;) }}** Variable is still: **{{ $x }}** Type of variable: **{{ printf \u0026#34;%T\u0026#34; $x }}** templates.SDict templates.SDict - This is a custom composite data type defined on an underlying data type map[string]interface{}. This is of kind map having string type as its key and interface{} type as that key\u0026rsquo;s value and can be initialized using sdict function. A map is key-value store. This means you store value and you access that value by a key. Map is an unordered list and the number of parameters to form key-value pairs must be even, difference to regular map is that templates.SDict is ordered by its key. Retrieving specific element inside templates.Sdict is by indexing its key.\nFunction Description sdict \u0026quot;key1\u0026quot; value1 \u0026quot;key2\u0026quot; value2 ... Like dict function, creating a templates.SDict type map, key must be of type string. Can be used for example in cembed. If only one argument is passed to sdict function having type map[string]interface{}; for example .ExecData and data retrieved from database can be of such type if sdict was used, it is converted to a new sdict.Example: sdict \u0026quot;one\u0026quot; 1 \u0026quot;two\u0026quot; 2 \u0026quot;three\u0026quot; (cslice 3 4) \u0026quot;five\u0026quot; 5.5 returns unordered map[five:5.5 one:1 three:[3 4] two:2], having length of four and index positions are its keys. Notice that thanks to type interface{} value, templates.SDict elements\u0026rsquo; inherent type does not change. Method Description .Del \u0026ldquo;key\u0026rdquo; Deletes given key from sdict. .Get \u0026ldquo;key\u0026rdquo; Retrieves given key from sdict. .HasKey \u0026ldquo;key\u0026rdquo; Returns bool true/false regarding whether the key is set or not e.g. {{(sdict \u0026quot;YAGPDB\u0026quot; \u0026quot;is cool\u0026quot;).HasKey \u0026quot;YAGPDB\u0026quot;}} would return true. .Set \u0026ldquo;key\u0026rdquo; value Changes/sets given key to a new value or creates new one, if no such key exists in sdict. Creating sdict: {{ $x := sdict \u0026#34;color1\u0026#34; \u0026#34;green\u0026#34; \u0026#34;color2\u0026#34; \u0026#34;red\u0026#34; }} **{{ $x }}** Retrieving key \u0026#34;color2\u0026#34;: **{{ $x.Get \u0026#34;color2\u0026#34; }}** Changing \u0026#34;color2\u0026#34; to \u0026#34;yellow\u0026#34;: {{ $x.Set \u0026#34;color2\u0026#34; \u0026#34;yellow\u0026#34; }} **{{ $x }}** Adding \u0026#34;color3\u0026#34; as \u0026#34;blue\u0026#34;: {{ $x.Set \u0026#34;color3\u0026#34; \u0026#34;blue\u0026#34; }} **{{ $x }}** Deleting key \u0026#34;color1\u0026#34; {{ $x.Del \u0026#34;color1\u0026#34; }} and whole sdict: **{{ $x }}** Tip: Database Serialization\nPreviously, when saving cslices, sdicts, and dicts into database, they were serialized into their underlying native types - slices and maps. This meant that if you wanted to get the custom type back, you needed to convert manually, e.g. {{cslice.AppendSlice $dbSlice}} or {{sdict $dbDict}}. Recent changes to YAG have changed this: values with custom types are now serialized properly, making manual conversion unnecessary.\nDatabase You have access to a basic set of Database functions having return of type *customcommands.LightDBEntry called here DBEntry. This is almost a key value store ordered by the key and value combined.\nYou can have max 50 * user_count (or 500 * user_count for premium) values in the database, if you go above this all new write functions will fail, this value is also cached, so it won\u0026rsquo;t be detected immediately when you go above nor immediately when you\u0026rsquo;re under again.\nPatterns are basic PostgreSQL patterns, not RegEx: An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.\nKeys can be max 256 bytes long and has to be strings or numbers. Values can be anything, but if their serialized representation exceeds 100kB a short write error gets raised.\nYou can just pass a userIDof 0 to make it global (or any other number, but 0 is safe).\nThere can be 10 database interactions per CC, out of which dbTop/BottomEntries, dbCount, dbGetPattern, and dbDelMultiple may only be run twice. (50,10 for premium users).\nSee also the chapter on the database in the learning resources.\nDatabase functions documentation.\nDatabase example script.\nDBEntry Field Description .ID ID of the entry of type int64. .GuildID ID of the server of type int64. .UserID Value of type int64 for userID argument or ID of the user if for example .User.ID was used for dbSet. .User User object of type discordgo.User having only .ID field, .Mention is still usable with correct userID field entry. .CreatedAt When this entry was created, of type time.Time. .UpdatedAt When this entry was last updated, of type time.Time. .ExpiresAt When entry will expire, of type time.Time. .Key The key of the entry, of type string. .Value The value of the entry. All numbers will get returned as float64 and other set values are of varying types. .ValueSize Returns the entry’s value size in bytes. Tickets See createTicket for creating a ticket.\nTemplate Ticket Field Description .AuthorID Author ID of the ticket. .AuthorUsernameDiscrim The Discord tag of the author of the ticket, formatted like username#discrim. .ChannelID Channel ID of the ticket. .ClosedAt Time that the ticket was closed, of type null.Time. This is, for the most part, useless in custom commands. .CreatedAt Time that the ticket was created. .GuildID Guild ID of the ticket. .LocalID The ticket ID. .LogsID Log ID of the ticket. .Title Title of the ticket. Time Time and duration types use Go\u0026rsquo;s time package. Go by Example lists some examples of using time.Time in Go code, which can be referenced for similar use in YAGPDB\u0026rsquo;s templates.\nSome time types in the data that Discord API functions return instead use the discordgo.Timestamp type. These can be converted to time.Time with the .Parse method. These cases are mentioned in the type documentation on this page.\nField Description .DiscordEpoch Gives you Discord Epoch time in time.Time. {{.DiscordEpoch.Unix}} would return in seconds \u0026gt; 1420070400. .UnixEpoch Gives you Unix Epoch time in time.Time. .TimeHour Variable of time.Duration type and returns 1 hour \u0026gt; 1h0m0s. .TimeMinute Variable of time.Duration type and returns 1 minute \u0026gt; 1m0s. .TimeSecond Variable of time.Duration type and returns 1 second \u0026gt; 1s. Time functions documentation.\n","date":"0001-01-01","id":57,"permalink":"/docs/reference/templates/syntax-and-data/","summary":"\u003cp\u003eLibrary of base data accessible within custom scripting.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Go is all about type\u0026hellip; Type is life.\u0026rdquo; // William Kennedy\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"preface\"\u003ePreface\u003c/h2\u003e\n\u003cp\u003eAll available data that can be used in YAGPDB\u0026rsquo;s templating \u0026ldquo;engine\u0026rdquo; which is slightly modified version of Go\u0026rsquo;s\nstdlib text/template package; more in depth and info about actions, pipelines and global functions like \u003ccode\u003eprintf, index, len,\u003c/code\u003eetc \u0026gt; \u003ca href=\"https://golang.org/pkg/text/template/\" rel=\"external\"\u003ehttps://golang.org/pkg/text/template/\u003c/a\u003e . This section is meant to be\na concise and to the point reference document for all available templates/functions. \u003cstrong\u003eFunctions\u003c/strong\u003e are covered\nin \u003ca href=\"/docs/reference/templates/functions/\"\u003eFunction documentation\u003c/a\u003e. For detailed explanations and a syntax guide, please\nrefer to the \u003ca href=\"/learn/welcome/introduction/\"\u003elearning resource\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"Syntax and Data"},{"content":"Functions are used to take action within template scripts. Some functions accept arguments, and some functions return values you can send in your response or use as arguments for other functions.\nChannel These functions relate to channels and threads.\nTip: Current Channel or Thread\nUnless specified otherwise, these functions accept an ID, name, or nil for their thread or channel argument.\naddThreadMember {{ addThreadMember \u0026lt;thread\u0026gt; \u0026lt;member\u0026gt; }} Adds a member to an existing thread. Does nothing if either argument is invalid.\ncloseThread {{ closeThread \u0026lt;thread\u0026gt; \u0026lt;lock\u0026gt; }} Closes or locks the given thread. You cannot lock a closed thread, but you can close a locked thread.\nlock: whether to lock the thread instead. Default false. createForumPost {{ $post := createForumPost \u0026lt;channel\u0026gt; \u0026lt;name\u0026gt; \u0026lt;content\u0026gt; [values] }} Creates a new forum post. Returns a channel object on success.\nchannel: the forum channel to post to. name: The post title. May not be empty. Must be a string. content: the initial message\u0026rsquo;s content; may be a string, an embed, or a complex message. May not be empty. values (optional): Additional options for the post. May include: \u0026quot;slowmode\u0026quot;: The thread\u0026rsquo;s slowmode in seconds. \u0026quot;tags\u0026quot;: One or more forum tag name or ID. Duplicate and invalid tags are ignored. createThread {{ $thread := createThread \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;name\u0026gt; [private] [auto_archive_duration] [invitable] }} Creates a new thread in the specified channel. Returns a channel object on success.\nchannel: the parent channel to create the thread in. message: either nil to create a channel thread, or a message ID to create a message thread. private: whether the thread is private. Default false. auto_archive_duration: how long the thread will show in the channel list after inactivity.\nValid values are 60, 1440, 4320, and 10080 minutes. Defaults to 10080 (7 days). invitable: whether non-moderators can add other members to the thread. (true/false) Note: There is no functional difference between a channel thread and a message thread.\nBecause the optional arguments are positional, you must provide the preceding ones if you wish to override a later option. Consider the following example to create a public thread in the current channel with no message reference that is archived after an hour and allows non-moderators to add others:\n{{ createThread nil nil \u0026#34;new thread\u0026#34; false 60 true }} deleteForumPost {{ deleteForumPost \u0026lt;post\u0026gt; }} Deletes the given forum post.\nThis function is functionally the same to deleteThread. Use whichever function is semantically more meaningful in the context of your custom command.\ndeleteThread {{ deleteThread \u0026lt;thread\u0026gt; }} Deletes the given thread.\nThis function is functionally the same to deleteForumPost. Use whichever function is semantically more meaningful in the context of your custom command.\neditChannelName {{ editChannelName \u0026lt;channel\u0026gt; \u0026lt;newName\u0026gt; }} Edits the name of the given channel.\nnewName: the new name for the channel. Must be a string. This function is, together with editChannelTopic, limited to 10 calls per custom command execution. In addition to this, Discord limits the number of channel modifications to 2 per 10 minutes.\neditChannelTopic {{ editChannelTopic \u0026lt;channel\u0026gt; \u0026lt;newTopic\u0026gt; }} Edits the topic of the given channel.\nnewTopic: the channel\u0026rsquo;s new topic. Must be a string. Discord markdown is supported. This function is, together with editChannelName, limited to 10 calls per custom command execution. In addition to this, Discord limits the number of channel modifications to 2 per 10 minutes.\neditThread {{ editThread \u0026lt;thread\u0026gt; \u0026lt;opts\u0026gt; }} Edits the specified thread.\nopts: a sdict containing the thread parameters to edit, supporting the following keys (all optional): slowmode: the thread\u0026rsquo;s slowmode in seconds. tags: one or more forum tag name or ID. Duplicate and invalid tags are ignored. auto_archive_duration: how long the thread will show in the channel list after inactivity. invitable: whether non-moderators can add other members to the thread. Defaults to false. getChannelOrThread {{ $channel := getChannelOrThread \u0026lt;channel\u0026gt; }} Returns the full channel or thread object for the given channel.\ngetChannelPins {{ $pins := getChannelPins \u0026lt;channel\u0026gt; }} Returns a slice of message objects pinned to the given channel or thread.\nRate-limited to 2 (premium: 4) calls per custom command execution.\ngetChannel {{ $channel := getChannel \u0026lt;channel\u0026gt; }} Returns the full channel object for the given channel. Will not work for threads.\ngetPinCount {{ $numPins := getPinCount \u0026lt;channel\u0026gt; }} Returns the number of pinned messages in given channel.\ngetThread {{ $thread := getThread \u0026lt;thread\u0026gt; }} Returns the full thread object for the given thread. Will not work for channels.\nopenThread {{ openThread \u0026lt;thread\u0026gt; }} Reopens the given thread.\npinForumPost {{ pinForumPost \u0026lt;post\u0026gt; }} Pins the given forum post, which may be specified by its ID or name.\nremoveThreadMember {{ removeThreadMember \u0026lt;thread\u0026gt; \u0026lt;member\u0026gt; }} Removes the given member from the given thread.\nunpinForumPost {{ unpinForumPost \u0026lt;post\u0026gt; }} Unpins the given forum post, which may be specified by its ID or name.\nDatabase These functions help you interact with the custom command database.\ndbBottomEntries {{ $entries := dbBottomEntries \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt; }} Returns up to amount entries from the database, sorted in ascending order by the numeric value, then by entry ID.\namount: the maximum number of entries to return, capped at 100. pattern: the PostgreSQL pattern to match entries against. nSkip: the number of entries to skip before returning results. dbCount {{ $count := dbCount \u0026lt;userID|pattern|query\u0026gt; }} Returns the count of all matching database entries that are not expired.\nThe argument must be one of the following:\nuserID: count entries for the given user ID. pattern: count only entries with keys matching the given pattern. query: an sdict with the following (all optional) keys: userID: only count entries with a matching UserID field. Defaults to all UserIDs. pattern: only counts entries with keys matching the given pattern. Defaults to all keys. dbDelByID {{ dbDelByID \u0026lt;userID\u0026gt; \u0026lt;ID\u0026gt; }} Deletes a database entry under the given userID by its ID.\ndbDelMultiple {{ $numDeleted := dbDelMultiple \u0026lt;query\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt; }} Deletes up to amount entries from the database matching the given criteria. Returns the number of deleted entries.\nquery: an sdict with the following (all optional) keys: userID: only delete entries with a matching UserID field. Defaults to all UserIDs. pattern: only delete entries with keys matching the given pattern. Defaults to all keys. reverse: whether to delete entries with the lowest value first. Default is false (highest value first). amount: the maximum number of entries to delete, capped at 100. nSkip: the number of entries to skip before deleting. dbDel {{ dbDel \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt; }} Deletes the specified entry from the database.\ndbGetPatternReverse {{ $entries := dbGetPatternReverse \u0026lt;userID\u0026gt; \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt; }} Retrieves up to amount entries from the database in descending order as a slice.\nuserID: the user ID to retrieve entries for. pattern: the PostgreSQL pattern to match entries against. amount: the maximum number of entries to return, capped at 100. nSkip: the number of entries to skip before returning results. See dbGetPattern for a function that retrieves entries in ascending order.\ndbGetPattern {{ $entries := dbGetPattern \u0026lt;userID\u0026gt; \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt; }} Returns up to amount entries from the database in ascending order as a slice.\nuserID: the user ID to retrieve entries for. pattern: the PostgreSQL pattern to match entries against. amount: the maximum number of entries to return, capped at 100. nSkip: the number of entries to skip before returning results. See dbGetPatternReverse for a function that retrieves entries in descending order.\ndbGet {{ $entry := dbGet \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt; }} Returns the specified database entry.\ndbIncr {{ $newValue := dbIncr \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt; \u0026lt;incrBy\u0026gt; }} Increments the value of the specified database entry by incrBy. Returns the new value as a floating-point number.\nincrBy: the amount to increment the value by. Must be a valid number. dbRank {{ $rank := dbRank \u0026lt;query\u0026gt; \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt; }} Returns the rank of the specified entry in the set of entries as defined by query.\nquery: an sdict with the following (all optional) keys: userID: only include entries with the given user ID. pattern: only include entries with keys matching the given pattern. reverse: if true, entries with lower values have higher ranks. Default is false. dbSetExpire {{ dbSetExpire \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt; \u0026lt;value\u0026gt; \u0026lt;ttl\u0026gt; }} Same as dbSet but with an additional expiration ttl in seconds.\ndbSet {{ dbSet \u0026lt;userID\u0026gt; \u0026lt;key\u0026gt; \u0026lt;value\u0026gt; }} Sets the value for the specified key and userID to value.\nvalue: an arbitrary value to set. dbTopEntries {{ $entries := dbTopEntries \u0026lt;pattern\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;nSkip\u0026gt; }} Returns up to amount entries from the database, sorted in descending order by the numeric value, then by entry ID.\npattern: the PostgreSQL pattern to match entries against. amount: the maximum number of entries to return, capped at 100. nSkip: the number of entries to skip before returning results. Caution: Storing Numerical Values\nNumerical values are stored as floating-point numbers in the database; large numbers such as user IDs will lose precision. To avoid this, convert them to a string before writing to the database.\nNumerical dict keys are retrieved as an int64, therefore you\u0026rsquo;d have to write\n{{ $dict.Get (toInt64 N)}} to retrieve the value associated with the numerical key N.\nEncoding and Decoding decodeBase64 {{ $decoded := decodeBase64 \u0026lt;string\u0026gt; }} Undoes the transformation performed by encodeBase64, converting the base64-encoded string back to its original form.\nencodeBase64 {{ $encoded := encodeBase64 \u0026lt;string\u0026gt; }} Encodes the input string to base64.\nhash {{ $hash := hash \u0026lt;string\u0026gt; }} Generates the SHA256 hash of the input string.\njson {{ $json := json \u0026lt;value\u0026gt; [indent] }} Encodes value as JSON. If the indent flag is true, the output is pretty-printed with appropriate indentation.\njsonToSdict {{ $sdict := jsonToSdict \u0026lt;json\u0026gt; }} Parses the JSON-encoded data into a string-dictionary, returning an error if the input was invalid JSON.\nurlescape {{ $result := urlescape \u0026lt;string\u0026gt; }} Escapes the input string such that it can be safely placed inside a URL path segment, replacing special characters (including /) with %XX sequences as needed.\nurlunescape {{ $result := urlunescape \u0026lt;string\u0026gt; }} Undos the transformation performed by urlescape, converting encoded substrings of the form %AB to the byte 0xAB.\nurlquery {{ $result := urlquery \u0026lt;string\u0026gt; }} Returns the escaped value of the textual representation of the arguments in a form suitable for embedding in a URL query.\nExecuting Custom Commands These functions enable you to execute a custom command within an already running custom command.\ncancelScheduledUniqueCC {{ cancelScheduledUniqueCC \u0026lt;ccID\u0026gt; \u0026lt;key\u0026gt; }} Cancels a previously scheduled custom command execution using scheduleUniqueCC.\nexecCC {{ execCC \u0026lt;ccID\u0026gt; \u0026lt;channel\u0026gt; \u0026lt;delay\u0026gt; \u0026lt;data\u0026gt; }} Executes another custom command specified by ccID.\nccID: the ID of the custom command to execute. channel: the channel to execute the custom command in. May be nil, a channel ID, or a channel name. delay: the delay in seconds before executing the custom command. data: some arbitrary data to pass to the executed custom command. Calling execCC with 0 delay sets .StackDepth to the current recursion depth and limits it to 2. execCC is rate-limited strictly to a maximum of 10 delayed custom commands executed per channel per minute. Executions beyond this number will be dropped.\nExample The following example showcases a custom command executing itself.\n{{ if .ExecData }} {{ sendMessage nil (print \u0026#34;Executing custom command... Got data: \u0026#34; .ExecData) }} {{ return }} {{ end }} {{ sendMessage nil \u0026#34;Starting up...\u0026#34; }} {{ execCC .CCID nil 5 \u0026#34;Hello, world!\u0026#34; }} scheduleUniqueCC {{ scheduleUniqueCC \u0026lt;ccID\u0026gt; \u0026lt;channel\u0026gt; \u0026lt;delay\u0026gt; \u0026lt;key\u0026gt; \u0026lt;data\u0026gt; }} Schedules a custom command execution to occur in the future, identified by key.\nccID: the ID of the custom command to execute. channel: the channel to execute the custom command in. May be nil, a channel ID, or a channel name. delay: the delay in seconds before executing the custom command. key: a unique key to identify the scheduled custom command. data: some arbitrary data to pass to the executed custom command. To cancel such a scheduled custom command before it runs, use cancelScheduledUniqueCC.\nInteractions Use of interactions within YAGPDB is an advanced topic; the documentation should be used only as reference. To learn about using interactions, see here.\nInteraction Responses Only one interaction response may be sent to each interaction. If you do not send an interaction response, members will see \u0026ldquo;This application did not respond\u0026rdquo; on Discord. You may only send an interaction response to the interaction which triggered the command. Text output directly to the response is automatically sent as an interaction response if the interaction hasn\u0026rsquo;t already been responded to. A CC executed with execCC by the triggered CC will be able to send initial responses to the triggering interaction. A response is not the same thing as a followup. sendModal {{ sendModal \u0026lt;modal\u0026gt; }} Sends a modal to the member who triggered the interaction.\nmodal: an sdict with the following keys: title: the title of the modal. custom_id: a unique identifier for the modal. fields: a slice of sdicts with the following keys: label: the label for the field. placeholder: the placeholder text for the field. value: the default value for the field. required: whether the field is required. style: the style of the field (1 for short, 2 for long). min_length: the minimum length of the field. max_length: the maximum length of the field. Alternatively, you can create a modal object using the cmodal function.\nExample {{ $modal := sdict \u0026#34;title\u0026#34; \u0026#34;My Custom Modal\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;modals-my_first_modal\u0026#34; \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Name\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Duck\u0026#34; \u0026#34;required\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;Do you like ducks?\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Heck no\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Duck hate essay\u0026#34; \u0026#34;min_length\u0026#34; 100 \u0026#34;style\u0026#34;)) }} {{ sendModal $modal }} updateMessage {{ updateMessage \u0026lt;newMessage\u0026gt; }} Edits the message on which the button, select menu, or modal was triggered on.\nnewMessage: the new message content. May be a string, an embed, or a complex message. Example The following example must be triggered by a component or modal submission.\n{{ $button := cbutton \u0026#34;label\u0026#34; \u0026#34;I won!\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;i_won\u0026#34; }} {{ $content := printf \u0026#34;Press this button when you win! The last person who won was %s! They wanted to say they are a %s %s.\u0026#34; .User.Mention adjective noun }} {{ $message := complexMessageEdit \u0026#34;content\u0026#34; $content \u0026#34;buttons\u0026#34; $button }} {{ updateMessage $message }} updateMessageNoEscape {{ updateMessageNoEscape \u0026lt;newMessage\u0026gt; }} Same as updateMessage, plus it does not escape mentions.\nInteraction Followups Interaction followups may be sent up to 15 minutes after an interaction. To send a followup, you must have the interaction token of the interaction you are following up. You can send as many followups as you\u0026rsquo;d like. Text output directly to the response is automatically sent as an interaction followup if the interaction has already been responded to. A followup is not the same thing as a response. editResponse {{ editResponse \u0026lt;interactionToken\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;newContent\u0026gt; }} Edits a response to an interaction.\ninteractionToken: the token of the interaction to edit. nil for the triggering interaction. messageID: the ID of a follow-up message. nil for the original interaction response. newContent: the new content for the message. Example The following example must be triggered by a component trigger or modal submission.\n{{ $token := .Interaction.Token }} {{ sendResponse nil \u0026#34;Here\u0026#39;s the first message!\u0026#34; }} {{ $id := sendResponseRetID $token (complexMessage \u0026#34;content\u0026#34; \u0026#34;Here\u0026#39;s a sneaky one!\u0026#34; \u0026#34;ephemeral\u0026#34; true) }} {{ sleep 2 }} {{ editResponse $token $id (print \u0026#34;I\u0026#39;ve edited this message to say \u0026#34; noun) }} {{ $editedResponse := getResponse $token $id }} {{ editResponse $token nil $editedResponse.Content }} editResponseNoEscape {{ editResponseNoEscape \u0026lt;interactionToken\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;newContent\u0026gt; }} Same as editResponse, plus it does not escape mentions.\nInteraction Response/Followup Hybrids Hybrid functions will send an interaction response if the interaction has not already been responded to, otherwise they will send the equivalent followup function. See editResponse for an example using sendResponse* functions.\nsendResponse {{ sendResponse \u0026lt;interactionToken\u0026gt; \u0026lt;message\u0026gt; }} Sends a message in response to an interaction. Supports the ephemeral flag in complexMessage.\nsendResponseNoEscape {{ sendResponseNoEscape \u0026lt;interactionToken\u0026gt; \u0026lt;message\u0026gt; }} Same as sendResponse, plus it does not escape mentions.\nsendResponseNoEscapeRetID {{ sendResponseNoEscapeRetID \u0026lt;interactionToken\u0026gt; \u0026lt;message\u0026gt; }} Same as sendResponseNoEscape, but also returns the message ID.\nsendResponseRetID {{ sendResponseRetID \u0026lt;interactionToken\u0026gt; \u0026lt;message\u0026gt; }} Same as sendResponse, but also returns the message ID.\nInteraction Miscellaneous cbutton {{ $button := cbutton \u0026#34;list of button values\u0026#34; }} Creates a button object for use in interactions.\nA link style button must have a URL and may not have a Custom ID. All other styles must have a Custom ID and cannot have a URL. All buttons must have either a label or an emoji.\nExample {{ $button := cbutton \u0026#34;label\u0026#34; \u0026#34;Button\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck\u0026#34; }} {{ $message := complexMessage \u0026#34;buttons\u0026#34; $button }} {{ sendMessage nil $message }} cmenu {{ $menu := cmenu \u0026#34;list of select menu values\u0026#34; }} Creates a select menu object for use in interactions.\nThe type should be provided as a string: \u0026quot;text\u0026quot;, \u0026quot;user\u0026quot;, \u0026quot;role\u0026quot;, \u0026quot;mentionable\u0026quot;, or \u0026quot;channel\u0026quot;. Text type menus must have options, while all other types cannot.\nExample {{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;text\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose a terrible thing\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Two Ducks\u0026#34; \u0026#34;value\u0026#34; \u0026#34;opt-1\u0026#34; \u0026#34;default\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;A Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;duck-option\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;)) (sdict \u0026#34;label\u0026#34; \u0026#34;Half a Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;third-option\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Don\u0026#39;t let the smaller amount fool you.\u0026#34;)) \u0026#34;max_values\u0026#34; 3 }} {{ sendMessage nil (complexMessage \u0026#34;menus\u0026#34; $menu) }} cmodal {{ $modal := cmodal \u0026#34;list of modal values\u0026#34; }} Creates a modal object for use in interactions. See sendModal for more detail.\ndeleteInteractionResponse {{ deleteInteractionResponse \u0026lt;interactionToken\u0026gt; \u0026lt;messageID\u0026gt; [delay] }} Deletes the specified response or follow-up message.\ninteractionToken: a valid interaction token or nil for the triggering interaction. messageID: valid message ID of a follow-up, or nil for the original interaction response. delay: an optional delay in seconds, max 10 seconds. Default: 10 seconds. If you require a delay of more than 10 seconds, consider using execCC for deletion of an ephemeral response, or deleteMessage to delete a regular interaction response.\nephemeralResponse {{ ephemeralResponse }} Tells the bot to send the response text as an ephemeral message. Only works when triggered by an interaction. Works on responses and follow-ups.\nExample {{ ephemeralResponse }} This text is invisible to others! getResponse {{ $response := getResponse \u0026lt;interactionToken\u0026gt; \u0026lt;messageID\u0026gt; }} Returns the response or follow-up with the specified message ID belonging to the given interaction as a message object. Is also valid for ephemeral messages.\nComponent V2 Components V2 provides a new way to create interactive and visually appealing message layouts in Discord applications, making it easier to control message formatting and user interaction while maintaining line length under 120 characters.\ncomponentBuilder A componentBuilder simplifies building Discord\u0026rsquo;s ComponentsV2 in custom commands.\n{{ $component := componentBuilder (sdict [text] [section] [gallery] [file] [separator] [container] [buttons] [menus] [interactive_components] [allowed_mentions] [reply] [silent] [ephemeral]) }} Returns a complex message object with the given components.\nAll keys are optional, but the Discord API will reject completey empty messages, so some content is required.\ntext: A string or a slice of strings. section: A layout block that shows text with one optional accessory: a button or a thumbnail with the following keys: text: A string or a slice of strings. button: A button object. thumbnail: An sdict with the following keys: media: A string. description: A string. spoiler: A bool. gallery: Displays one or more media items with optional descriptions and spoiler flags with the following keys: media: A string. description: A string. spoiler: A bool. file: Attaches text files to the message and optionally displays them with the following keys: content: A string. (max 100 000 chars) name: A string. (.txt appended automatically) separator: Adds spacing between components with the following keys: true: large separator false or nil: small separator container: Top-level layout. Containers offer the ability to visually encapsulate a collection of components, and have an optional customizable accent color bar. Contains the following keys: components: A componentBuilder or a slice thereof. color: hex accent color (optional). spoiler: hides content until revealed (optional). buttons: Interactive buttons users can click. Can be single or multiple. menus: Interactive menuss users can select from. Can be single or multiple. interactive_components: Mix of buttons and menus, auto-distributed. allowed_mentions: A sdict with the following keys: users: A slice of user IDs. roles: A slice of role IDs. everyone: A bool. replied_user: A bool. reply: A sdict with the following keys: message_id: A string. thread_id: A string. silent: A bool. ephemeral: A bool. Component Builder Functions The ComponentBuilder simplifies building Discord\u0026rsquo;s V2 components, allowing complex layouts to be built incrementally. It provides methods for constructing, manipulating, and exporting components in a format Discord understands, ensuring line length doesn\u0026rsquo;t exceed 120 characters.\nComponentBuilder.Add Adds a single component entry to the builder under the given key.\n{{ $builder.Add \u0026lt;key\u0026gt; \u0026lt;value\u0026gt; }} key – The top-level key for the component (e.g., \u0026ldquo;text\u0026rdquo;, \u0026ldquo;section\u0026rdquo;, \u0026ldquo;buttons\u0026rdquo;). value – The component data (string, sdict, Button, SelectMenu, etc.). ComponentBuilder.AddSlice Adds multiple components under one key.\n{{ $builder.AddSlice \u0026lt;key\u0026gt; \u0026lt;values...\u0026gt; }} key – The top-level key for the component (e.g., \u0026ldquo;text\u0026rdquo;, \u0026ldquo;section\u0026rdquo;, \u0026ldquo;buttons\u0026rdquo;). values – The component data (string, sdict, Button, SelectMenu, etc.). ComponentBuilder.Merge Combine another builder into the current one.\n{{ $builder.Merge \u0026lt;other\u0026gt; }} other – The other component builder to merge. ComponentBuilder.Get Returns the component data for the given key.\n{{ $value := \u0026lt;builder\u0026gt;.Get \u0026lt;key\u0026gt; }} key – The top-level key for the component (e.g., \u0026ldquo;text\u0026rdquo;, \u0026ldquo;section\u0026rdquo;, \u0026ldquo;buttons\u0026rdquo;). Example usage can be found at the Components v2.\nMath abs {{ $result := abs x }} Returns the absolute value of the provided number.\nadd {{ $sum := add x y [...] }} Returns the sum of the provided numbers. Detects the first number\u0026rsquo;s type and performs the operation accordingly.\nbitwiseAnd {{ $result := bitwiseAnd x y [...] }} Performs a bitwise AND operation on the provided numbers and returns the result.\nbitwiseAndNot {{ $result := bitwiseAndNot x y }} Performs a bitwise AND NOT operation on the two provided numbers and returns the result.\nbitwiseNot {{ $result := bitwiseNot x }} Performs a bitwise NOT operation on the provided number and returns the result.\nbitwiseOr {{ $result := bitwiseOr x y [...] }} Performs a bitwise OR operation on the provided numbers and returns the result.\nbitwiseXor {{ $result := bitwiseXor x y }} Performs a bitwise XOR operation on the two provided numbers and returns the result.\nbitwiseLeftShift {{ $result := bitwiseLeftShift x y }} Shifts X left by Y bits and returns the result.\nbitwiseRightShift {{ $result := bitwiseRightShift x y }} Shifts X right by Y bits and returns the result.\ncbrt {{ $result := cbrt x }} Returns the cube root of the provided number.\ndiv {{ $result := div x y [...] }} Performs division on the provided numbers. Detects the first number\u0026rsquo;s type and performs the operation accordingly. If you need a floating-point number as a result of integer division, use fdiv.\nfdiv {{ $result := fdiv x y [...] }} Special case of div; always returns a floating-point number as result.\nlog {{ $result := log x [base] }} Returns the logarithm of X with the given base. If no base is provided, the natural logarithm is used.\nmathConst {{ $result := mathConst \u0026#34;constant\u0026#34; }} Returns the value of the specified math constant. See the math constants list.\nmax {{ $result := max x y }} Returns the larger of the two provided numbers.\nmin {{ $result := min x y }} Returns the smaller of the two provided numbers.\nmod {{ $result := mod x y }} Returns the floating-point remainder of the division of X by Y.\nTakes the sign of X, so mod -5 3 results in -2, not 1. To ensure a non-negative result, use mod twice: {{ mod (add (mod x y) y) y }}.\nmult {{ $result := mult x y [...] }} Performs multiplication on the provided numbers. Detects the first number\u0026rsquo;s type and returns the result accordingly.\npow {{ $result := pow x y }} Returns X raised to the power of Y as a floating-point number.\nrandInt {{ $result := randInt [start] stop }} Returns a random integer in the right-closed interval of [0, stop) or [start, stop) if two arguments are provided. That is, the result is always greater than or equal to start and strictly less than stop.\nround {{ $result := round x }} Returns the nearest integer to X as float. Normal rounding rules apply.\nroundCeil {{ $result := roundCeil x }} Returns the smallest integer greater than or equal to X. Put simply, always round up.\nroundEven {{ $result := roundEven x }} Returns the nearest integer to X, rounding ties (x.5) to the nearest even integer.\nroundFloor {{ $result := roundFloor x }} Returns the largest integer less than or equal to X. Put simply, always round down.\nsqrt {{ $result := sqrt x }} Returns the square root of X as a floating-point number.\nsub {{ $result := sub x y [...] }} Subtracts the provided numbers from each other. Detects the first number\u0026rsquo;s type and returns the result accordingly.\nMember editNickname {{ editNickname \u0026#34;newNick\u0026#34; }} Edits the nickname of the member who triggered the command. The bot must have the MANAGE_NICKNAMES permission and be higher in the role hierarchy than the member. The bot cannot change the nickname of the server owner.\ngetMember {{ $member := getMember \u0026lt;mention|userID\u0026gt; }} Returns the member object for the given mention or user ID.\ngetMemberVoiceState {{$state := getMemberVoiceState \u0026lt;member\u0026gt; }} Returns the voice state for the member specified by ID or mention, or nil if the member is not in a voice channel.\ngetTargetPermissionsIn {{ $perms := getTargetPermissionsIn \u0026lt;memberID\u0026gt; \u0026lt;channelID\u0026gt; }} Returns the permissions of the specified member in the given channel as a permissions bitfield.\nExample To calculate the permission in a channel other than the current channel, for which we could just use the hasPermissions or targetHasPermissions function, we will have to use bitwise operations:\n{{ $perms := getTargetPermissionsIn .User.ID $someChannel }} {{ $mask := bitwiseAnd .Permissions.ManageRoles $perms }} {{ if eq $mask .Permissions.ManageRoles }} You have the permissions to manage roles! {{ else }} You do not have the permissions to manage roles! {{ end }} hasPermissions {{ $hasPerms := hasPermissions \u0026lt;permission\u0026gt; }} Returns whether the member who triggered the command has the specified permission bit. See .Permissions for more information.\nExample {{ if hasPermissions .Permissions.Administrator }} You have the Administrator permission! {{ else }} You do not have the Administrator permission. {{ end }} onlineCount {{ $count := onlineCount }} Returns the count of online members on the current server, including bots.\ntargetHasPermissions {{ $hasPerms := targetHasPermissions \u0026lt;memberID\u0026gt; \u0026lt;permission\u0026gt; }} Returns whether the specified member has the specified permission bit.\nMentions Certain mentions are escaped by default, such that they don\u0026rsquo;t ping. These functions help you actually pinging these special mentions.\nmentionEveryone {{ mentionEveryone }} Mentions @everyone without escaping it.\nmentionHere {{ mentionHere }} Mentions @here without escaping it.\nmentionRole {{ mentionRole \u0026lt;role\u0026gt; }} Mentions role, which may be specified by ID, mention, name, or role object, without escaping it.\nmentionRoleID {{ mentionRoleID \u0026lt;roleID\u0026gt; }} Mentions the given role without escaping it.\nmentionRoleName {{ mentionRoleName \u0026lt;roleName\u0026gt; }} Mentions the role with the given name without escaping it. Searches for first case-insensitive match.\nPrefer mentionRoleID, as IDs are guaranteed to be unique and do not change with role edits.\nMessage addMessageReactions {{ addMessageReactions \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;emojis...\u0026gt; }} Adds reactions to a message with the given ID.\nemojis...: a list of emojis to add as reactions. May also be a slice of emojis. Default emojis are best used in the Unicode format for these purposes. Custom emojis follow a specific format in these functions. Please see the example below.\nExample {{ addMessageReactions nil .Message.ID \u0026#34;👍\u0026#34; \u0026#34;👎\u0026#34; \u0026#34;yagpdb:505114640032858114\u0026#34; }} addReactions {{ addReactions \u0026lt;emojis...\u0026gt; }} Adds reactions to the message that triggered the command.\nemojis...: a list of emojis to add as reactions. May also be a slice of emojis. addResponseReactions {{ addResponseReactions \u0026lt;emojis...\u0026gt; }} Adds reactions to the response message.\nemojis...: a list of emojis to add as reactions. May also be a slice of emojis. Note that a message sent via sendMessage is not the response\u0026mdash;use addMessageReactions for that.\ncomplexMessageEdit {{ $message := complexMessageEdit [allowed_mentions] [content] [embed] [silent] [suppress_embeds] [is_components_v2] }} Creates a complex message object for use in editMessage or editMessageNoEscape.\nallowed_mentions: an sdict with the following keys: parse: a slice of accepted values for mentions. May include users, roles, and everyone. users: a slice of user IDs to mention. roles: a slice of role IDs to mention. replied_user: whether to mention the replied user. content: the new content for the message. embed: an embed object or a slice of up to 10 embed objects. silent: whether to suppress push and desktop notifications. suppress_embeds: whether to suppress embeds in the message. is_components_v2: whether the message uses components v2. Irreversibly switches the message to use components v2. All of these keys are optional, but providing none of them will have no effect. See complexMessage for an example.\nSetting suppress_embeds to false on a message with already suppressed embeds will not re-enable them.\ncomplexMessage {{ $message := complexMessage [allowed_mentions] [content] [embed] [file] [filename] [reply] [silent] [menus] [buttons] [sticker] [forward] [suppress_embeds] [is_components_v2] }} Creates a complex message object for use in sendMessage functions.\nallowed_mentions: an sdict with the following keys: parse: a slice of accepted values for mentions. May include users, roles, and everyone. users: a slice of user IDs to mention. roles: a slice of role IDs to mention. replied_user: whether to mention the replied user. content: the message content. embed: an embed object or a slice of up to 10 embed objects. file: the content to print as a file. filename: the name of the file. reply: the ID of the message to reply to. silent: whether to suppress push and desktop notifications. menus: a single select menu object. buttons: a slice of button objects. sticker: single sticker ID or a slice of sticker IDs forward: an sdict containing channel and message keys specifying the message to forward suppress_embeds: whether to suppress embeds in the message. is_components_v2: whether the message uses components v2. Irreversibly switches the message to use components v2. All of these keys are optional, but providing an empty content, file, or no embeds will result in no message being sent.\nExample The following example will output a message with an embed, some content, and a file attachment. It will also reply to the triggering message and ping the author of that message, but suppress the resulting notification.\n{{ $message := complexMessage \u0026#34;allowed_mentions\u0026#34; (sdict \u0026#34;replied_user\u0026#34; true ) \u0026#34;content\u0026#34; \u0026#34;Hello, world!\u0026#34; \u0026#34;embed\u0026#34; (cembed \u0026#34;title\u0026#34; \u0026#34;Embed Title\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Embed Description\u0026#34; \u0026#34;color\u0026#34; 0xff0000 ) \u0026#34;file\u0026#34; \u0026#34;This is a file.\u0026#34; \u0026#34;filename\u0026#34; \u0026#34;example.txt\u0026#34; \u0026#34;reply\u0026#34; .Message.ID \u0026#34;silent\u0026#34; true }} {{ sendMessage nil $message }} Example for sending a sticker message:\n{{ sendMessage nil ( complexMessage \u0026#34;sticker\u0026#34; 749054660769218631 ) }} Example for sending multiple stickers in a message:\n{{ sendMessage nil ( complexMessage \u0026#34;sticker\u0026#34; ( cslice 749054660769218631 819128604311027752 1308344035563274291 ) ) }} Example of a message forward:\n{{ sendMessage nil (complexMessage \u0026#34;forward\u0026#34; (sdict \u0026#34;channel\u0026#34; .Channel.ID \u0026#34;message\u0026#34; .Message.ID ) ) }} deleteAllMessageReactions {{ deleteAllMessageReactions \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; [emojis...] }} Deletes all reactions from a message, optionally constrained to specific emojis.\nemojis: the emojis to delete. May also be a slice. Not providing this argument will delete any and all reactions. deleteMessageReaction {{ deleteMessageReaction \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;userID\u0026gt; \u0026lt;emojis...\u0026gt; }} Deletes a specific user\u0026rsquo;s reaction from a message.\nuserID: the ID of the user whose reaction to delete. emojis...: the emojis to delete. May also be a slice. deleteMessage {{ deleteMessage \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; [delay] }} Deletes the specified message.\ndelay: an optional delay in seconds to delete the message after. Defaults to 10 seconds. Max 86400 seconds (1 day). deleteResponse {{ deleteResponse [delay] }} Deletes the response message.\ndelay: an optional delay in seconds to delete after. Defaults to 10 seconds. Max 86400 seconds (1 day). deleteTrigger {{ deleteTrigger [delay] }} Deletes the triggering message.\ndelay: an optional delay in seconds to delete after. Defaults to 10 seconds. Max 86400 seconds (1 day). editMessageNoEscape {{ editMessageNoEscape \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;newMessageContent\u0026gt; }} Edits the given message without escaping mentions.\nnewMessageContent: the new content for the message. May also be the result from complexMessageEdit. editMessage {{ editMessage \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; \u0026lt;newMessageContent\u0026gt; }} Edits the given message with escaping mentions.\nnewMessageContent: the new content for the message. May also be the result from complexMessageEdit. getMessage {{ $message := getMessage \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; }} Returns the message object for the given message ID in the specified channel.\npinMessage {{ pinMessage \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; }} Pins the specified message.\npublishMessage {{ publishMessage \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; }} Publishes the specified message.\npublishResponse {{ publishResponse }} Publishes the response message.\nFor this to work, the custom command must be running in such an announcement channel.\nsendDM {{ sendDM \u0026lt;message\u0026gt; }} Sends a direct message to the triggering user.\nmessage: the message to send. May also be the result from a complexMessage call. sendMessageNoEscapeRetID {{ $messageID := sendMessageNoEscapeRetID \u0026lt;channel\u0026gt; \u0026lt;message\u0026gt; }} Same as sendMessageNoEscape, but also returns the message ID.\nsendMessageNoEscape {{ sendMessageNoEscape \u0026lt;channel\u0026gt; \u0026lt;message\u0026gt; }} Same as sendMessage, but does not escape mentions.\nsendMessageRetID {{ $messageID := sendMessageRetID \u0026lt;channel\u0026gt; \u0026lt;message\u0026gt; }} Same as sendMessage, but also returns the message ID.\nsendMessage {{ sendMessage \u0026lt;channel\u0026gt; \u0026lt;message\u0026gt; }} Sends a message in the specified channel.\nmessage: the message to send. May also be the result from a complexMessage call. unpinMessage {{ unpinMessage \u0026lt;channel\u0026gt; \u0026lt;messageID\u0026gt; }} Unpins the specified message.\nRegex Functions reFind {{ $result := reFind \u0026lt;regex\u0026gt; \u0026lt;text\u0026gt; }} Returns the first match of the regular expression regex in text, or the empty string if the pattern did not match anywhere.\nreFindAll {{ $result := reFindAll \u0026lt;regex\u0026gt; \u0026lt;text\u0026gt; [count] }} Returns a slice of successive matches of regex in text. If count is provided, the number of matches is limited to that amount; otherwise, all matches are returned.\nreFindAllSubmatches {{ $result := reFindAllSubmatches \u0026lt;regex\u0026gt; \u0026lt;text\u0026gt; [count] }} Returns a slice of successive submatches of regex in text. Each submatch is itself a slice containing the match of the entire expression, followed by any matches of capturing groups. If count is provided, the number of submatches is limited to that amount; otherwise, all submatches are returned.\nreQuoteMeta {{ $result := reQuoteMeta \u0026lt;string\u0026gt; }} Escapes all regular expression metacharacters in the input string; the result is a regular expression matching the literal input string.\nreReplace {{ $result := reReplace \u0026lt;regex\u0026gt; \u0026lt;text\u0026gt; \u0026lt;replacement\u0026gt; }} Replaces all matches of regex in text with replacement.\nreSplit {{ $result := reSplit \u0026lt;regex\u0026gt; \u0026lt;text\u0026gt; [count] }} Splits the text around each match of regex, returning a slice of delimited substrings.\nif the count parameter is specified, it limits the number of substrings to return:\ncount \u0026gt; 0: at most count substrings; the last substring will be the unsplit remainder; count == 0: the result is nil (zero substrings); count \u0026lt; 0: all substrings. Role Functions addRole {{ $role := addRole \u0026lt;role\u0026gt; [delay] }} Adds the specified role to the triggering member.\nrole: a role ID, mention, name, or role object. delay: an optional delay in seconds. addRoleID {{ addRoleID \u0026lt;roleID\u0026gt; [delay] }} Adds the specified role ID to the triggering member.\ndelay: an optional delay in seconds. addRoleName {{ addRoleName \u0026lt;roleName\u0026gt; [delay] }} Adds the first case-insensitive matching role name to the triggering member.\ndelay: an optional delay in seconds. getRole {{ $role := getRole \u0026lt;role\u0026gt; }} Returns a role object. role may either be an ID or a name to match against (ignoring case).\ngetRoleID {{ $role := getRoleID \u0026lt;roleID\u0026gt; }} Returns a role object by its ID.\ngetRoleName {{ $role := getRoleName \u0026lt;roleName\u0026gt; }} Returns a role object by its name (case-insensitive).\ngiveRole {{ giveRole \u0026lt;member\u0026gt; \u0026lt;role\u0026gt; [delay] }} Gives the specified role to the target member.\nrole: a role ID, mention, name, or role object. delay: an optional delay in seconds. giveRoleID {{ giveRoleID \u0026lt;member\u0026gt; \u0026lt;roleID\u0026gt; [delay] ]}} Gives the role specified by its ID to the target member.\nmember: the member to target. Either an ID, mention, or user object, but must be part of the server. delay: an optional delay in seconds. giveRoleName {{ giveRoleName \u0026lt;member\u0026gt; \u0026lt;roleName\u0026gt; [delay] }} Gives the first case-insensitive matching role name to the target member.\ndelay: an optional delay in seconds. hasRole {{ $result := hasRole \u0026lt;role\u0026gt; }} Reports whether the triggering member has the specified role.\nrole: a role ID, mention, name, or role object. hasRoleID {{ $result := hasRoleID \u0026lt;roleID\u0026gt; }} Reports whether the triggering member has the specified role ID.\nhasRoleName {{ $result := hasRoleName \u0026lt;roleName\u0026gt; }} Reports whether the triggering member has the specified role name (case-insensitive).\nremoveRole {{ removeRole \u0026lt;role\u0026gt; [delay] }} Removes the specified role from the triggering member.\nrole: a role ID, mention, name, or role object. delay: an optional delay in seconds. removeRoleID {{ removeRoleID \u0026lt;roleID\u0026gt; [delay] }} Removes the role with the specified ID from the triggering member with an optional delay in seconds.\nremoveRoleName {{ removeRoleName \u0026lt;roleName\u0026gt; [delay] }} Removes the first case-insensitive matching role name from the triggering member with an optional delay in seconds.\nroleAbove {{ $result := roleAbove \u0026lt;role1\u0026gt; \u0026lt;role2\u0026gt; }} Reports whether role1 is above role2 in the role hierarchy. Both arguments must be a role object.\nsetRoles {{ setRoles \u0026lt;target\u0026gt; \u0026lt;newRoles\u0026gt; }} Sets the roles of the specified user to the provided list of role IDs. The roles are overwritten, so any existing roles are removed if not included in the new list. newRoles must be a slice. target may be a user ID, mention, or user object, but must be a member of the server.\ntakeRole {{ takeRole \u0026lt;target\u0026gt; \u0026lt;role\u0026gt; [delay] }} Removes the specified role from the target member.\ntarget: a user ID, mention, or user object. The target must be part of the server. role: a role ID, mention, name or role object. delay: an optional delay in seconds. takeRoleID {{ takeRoleID \u0026lt;target\u0026gt; \u0026lt;roleID\u0026gt; [delay] }} Removes the specified role from target. target may be a user ID, mention, or user object, but must be a member of the server.\ndelay: an optional delay in seconds. takeRoleName {{ takeRoleName \u0026lt;target\u0026gt; \u0026lt;roleName\u0026gt; [delay] }} Removes the first case-insensitive matching role name from target with an optional delay in seconds. target may be a user ID, mention, or user object, but must be a member of the server.\ntargetHasRole {{ $result := targetHasRole \u0026lt;target\u0026gt; \u0026lt;role\u0026gt; }} Reports whether the target member has the specified role.\nrole: a role ID, mention, name or role object. targetHasRoleID {{ $result := targetHasRoleID \u0026lt;target\u0026gt; \u0026lt;roleID\u0026gt; }} Reports whether the specified target has the specified role ID. target may be a user ID, mention, or user object, but must be a member of the server.\ntargetHasRoleName {{ $result := targetHasRoleName \u0026lt;target\u0026gt; \u0026lt;roleName\u0026gt; }} Reports whether the specified target has the specified role name (case-insensitive). target may be a user ID, mention, or user object, but must be a member of the server.\nString Manipulation Note: RegEx Limitations\nAll regexp functions are limited to 10 different pattern calls per CC.\nhasPrefix {{ $result := hasPrefix \u0026lt;string\u0026gt; \u0026lt;prefix\u0026gt; }} Reports whether the given string begins with prefix.\nhasSuffix {{ $result := hasSuffix \u0026lt;string\u0026gt; \u0026lt;suffix\u0026gt; }} Reports whether the given string ends with suffix.\njoinStr {{ $result := joinStr \u0026lt;separator\u0026gt; \u0026lt;args...\u0026gt; }} Concatenates args... in order, inserting the given separator between consecutive arguments and returns the result. As a special case, slices of strings are formatted as if each element was provided separately, so\n{{ joinStr \u0026#34; \u0026#34; (cslice \u0026#34;cat\u0026#34; \u0026#34;dog\u0026#34;) }} yields cat dog.\nSee also printf if you just want to concatenate arguments without a separator.\nlower {{ $result := lower \u0026lt;string\u0026gt; }} Converts string to all lowercase and returns the result.\nprint {{ $result := print \u0026lt;args...\u0026gt; }} Concatenates the arguments in order, adding spaces between arguments when neither is a string.\nprintln {{ $result := println \u0026lt;args...\u0026gt; }} Concatenates the arguments in order, adding spaces between arguments and inserting a newline at the end.\nprintf {{ $result := printf \u0026lt;format\u0026gt; \u0026lt;args...\u0026gt; }} Interpolates args... according to format. See the Go fmt package documentation.\nsanitizeText {{ $result := sanitizeText \u0026lt;string\u0026gt; }} Replaces accented and confusable characters in string with their normal, ISO-Latin variants.\nsplit {{ $result := split \u0026lt;string\u0026gt; \u0026lt;separator\u0026gt; }} Splits string around each instance of separator, returning a slice of delimited substrings.\ntitle {{ $result := title \u0026lt;string\u0026gt; }} Returns the string with the first letter of each word capitalized. (Title Case)\ntrimSpace {{ $result := trimSpace \u0026lt;string\u0026gt; }} Returns the string with all leading and trailing white space removed.\nupper {{ $result := upper \u0026lt;string\u0026gt; }} Converts string to all uppercase and returns the result.\nTime currentTime {{ $time := currentTime }} Returns the current time in UTC.\nformatTime {{ $formatted := formatTime \u0026lt;time\u0026gt; \u0026lt;layout\u0026gt; }} Formats time according to layout. Within the layout string, certain phrases represent placeholders that are replaced with the actual data from time: for instance, Monday is replaced with the weekday. A list of common placeholders follows; see the Go time package documentation for the full list.\nPlaceholder Meaning Mon Weekday (abbreviated) Monday Weekday (full name) 2 Day of month (single digit) 02 Day of month (zero padded) Jan Month (abbreviated) January Month (full name) 1 Month (single digit) 01 Month (zero padded) 15 Hour (24-hour format) 3 Hour (12-hour format) 04 Minute (zero padded) 05 Second (zero padded) MST Timezone (abbreviated) 2006 Year (full year) PM AM-PM humanizeDurationHours {{ $formatted := humanizeDurationHours \u0026lt;duration\u0026gt; }} Returns duration as a human-readable string, rounded down to the nearest hour.\nhumanizeDurationMinutes {{ $formatted := humanizeDurationMinutes \u0026lt;duration\u0026gt; }} Returns duration as a human-readable string, rounded down to the nearest minute.\nhumanizeDurationSeconds {{ $formatted := humanizeDurationSeconds \u0026lt;duration\u0026gt; }} Returns duration as a human-readable string, rounded down to the nearest second.\nhumanizeTimeSinceDays {{ $formatted := humanizeTimeSinceDays \u0026lt;time\u0026gt; }} Returns the duration that has passed since the specified time as a human-readable string, rounded down to the nearest day.\nloadLocation {{ $location := loadLocation \u0026#34;location\u0026#34; }} Searches the IANA Time Zone database for the given location name, returning the corresponding location object on success. (Given a time object $time, $time.In $location then returns a copy of the time set in the given location for display purposes.)\nAs a special case, providing UTC, or the empty string \u0026quot;\u0026quot;, yields the UTC location. Providing Local yields the local time zone of the host YAGPDB server.\nnewDate {{ $time := newDate \u0026lt;year\u0026gt; \u0026lt;month\u0026gt; \u0026lt;day\u0026gt; \u0026lt;hour\u0026gt; \u0026lt;minute\u0026gt; \u0026lt;second\u0026gt; [location] }} Returns the time object corresponding to\nyyyy-mm-dd hh:mm:ss In the appropriate zone for that time in the given location.\nThe month, day, hour, min, and sec values may be outside their usual ranges and will be normalized during the conversion. For example, October 32 converts to November 1.\nA daylight savings time transition skips or repeats times. For example, in the United States, March 13, 2011 2:15am never occurred, while November 6, 2011 1:15am occurred twice. In such cases, the choice of time zone, and therefore the time, is not well-defined. newDate returns a time that is correct in one of the two zones involved in the transition, but it does not guarantee which.\nparseTime {{ $time := parseTime \u0026lt;input\u0026gt; \u0026lt;layout\u0026gt; [location] }} Undos the operation performed by formatTime: that is, given some input string representing a time using the given layout, parseTime returns the corresponding time object in the specified location, or UTC by default. If the input is invalid or does not follow layout, the zero time is returned.\nA slice of layouts may be provided, in which case the input is matched against each in order until one matches or the end of the slice is reached.\nsnowflakeToTime {{ $time := snowflakeToTime \u0026lt;snowflake\u0026gt; }} Returns the UTC time at which the given Discord snowflake was created.\ntimestampToTime {{ $time := timestampToTime \u0026lt;unixSeconds\u0026gt; }} Returns the UTC time corresponding to the given UNIX time, measured in seconds since January 1, 1970.\nweekNumber {{ $week := weekNumber \u0026lt;time\u0026gt; }} Returns the ISO 8601 week number in which the time occurs, ranging between 1 and 53. Jan 01 to Jan 03 of year n might belong to week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1.\nNote: Discord Timestamp Formatting\nDiscord Timestamp Styles referenced on Discord message documentation can be done using the print function:\n{{print \u0026quot;\u0026lt;t:\u0026quot; currentTime.Unix \u0026quot;:F\u0026gt;\u0026quot;}} for \u0026ldquo;Long Date/Time\u0026rdquo; formatting.\nType Conversion structToSdict {{ $sdict := structToSdict \u0026lt;struct\u0026gt; }} Constructs a sdict form the fields of struct.\ntoByte {{ $bytes := toByte \u0026lt;string\u0026gt; }} Converts string to a slice of UTF-8 bytes.\ntoDuration {{ $duration := toDuration \u0026lt;x\u0026gt; }} Converts the input, which may be a number (interpreted as nanoseconds) or a duration string such as 5m, to a duration object. Returns the zero duration for invalid inputs.\ntoFloat {{ $y := toFloat \u0026lt;x\u0026gt; }} Converts the input x to a float64, returning zero for invalid inputs.\ntoInt64 {{ $n := toInt64 \u0026lt;x\u0026gt; }} Converts the input to an int64, returning zero for invalid inputs.\ntoInt {{ $n := toInt \u0026lt;x\u0026gt; }} Converts the input to an integer, returning zero for invalid inputs.\ntoRune {{ $runes := toRune \u0026lt;string\u0026gt; }} Converts the given string to a slice of runes (Unicode code points).\ntoString Aliases: str.\n{{ $str := toString \u0026lt;x\u0026gt; }} Converts the input to a string, returning the empty string for invalid inputs.\nUser currentUserAgeHuman {{ $age := currentUserAgeHuman }} Returns the account age of the current user as a human-readable string.\ncurrentUserAgeMinutes {{ $age := currentUserAgeMinutes }} Returns the account age of the current user in a human-readable format, rounded down to minutes.\ncurrentUserCreated {{ $time := currentUserCreated }} Returns the time object corresponding to when the current user was created.\nuserArg {{ $user := userArg \u0026lt;input\u0026gt; }} Returns the full user object specified by input, which can be an ID or a mention.\nMiscellaneous adjective {{ $adj := adjective }} Returns a random adjective.\ncembed {{ $embed := cembed [title] [url] [description] [color] [fields] [author] [thumbnail] [image] [footer] }} Returns an embed object to send with sendMessage-related functions.\nAll keys are optional, but the Discord API will reject completey empty embeds, so some content is required.\ntitle: the title of the embed url: the URL to hyperlink the title with description: the main text color: which color to display on the left side of the embed fields: a slice of sdicts with the following keys: name: the name of the field value: which text to have inside this field inline: an optional boolean whether this field should be displayed in-line with other fields author: Shows some details at the very top of the embed. Is an sdict with the following keys: name: The name of the author url: the URL to hyperlink the name with icon_url: the author\u0026rsquo;s icon thumbnail: a small image in the top-right corner. Is an sdict with the following keys: url: the image\u0026rsquo;s URL image: an image to display at full width at the bottom of the embed. Is an sdict with the following keys: url: the image\u0026rsquo;s URL footer: Shows some details at the very bottom of the embed. Is an sdict with the following keys: text: the footer\u0026rsquo;s text icon_url: a small icon to display to the left of the footer\u0026rsquo;s text timestamp: a (static) timestamp to display to the right of the footer\u0026rsquo;s text Tip: Custom Commands Embed Generator\nTo help you get used to the embed structure in custom commands, check out https://yagpdbembeds.netlify.app, a community-made embed visualizer for YAGPDB\u0026rsquo;s custom command system.\ncreateTicket {{ $ticket := createTicket \u0026lt;author\u0026gt; \u0026lt;topic\u0026gt; }} Creates a new ticket associated to the specified author with given topic, returning a template ticket for that ticket.\nauthor: the member to associate this ticket with. topic: the topic of this ticket. Must be a string. Warning: Dependency on Ticketing System\nFor this function to work correctly, the ticketing system must be enabled.\ncslice {{ $slice := cslice [values...] }} Creates a slice of the provided values.\ndict {{ $dict := dict [values...] }} Creates a dictionary from the provided key-value pairs. The number of parameters must be even.\nexecAdmin {{ execAdmin \u0026#34;command\u0026#34; [args...] }} Runs the given command with the provided (optional) arguments as the bot.\nexecTemplate {{ execTemplate \u0026#34;template\u0026#34; [data...] }} Executes the associated \u0026quot;template\u0026quot; template, optionally with data. Please see Associated Templates.\nexec {{ exec \u0026#34;command\u0026#34; [args...] }} Executes the given command with the provided (optional) arguments as the triggering user.\nThis will not work for commands with paginated embed results, e.g. warnings.\ngetWarnings {{ $warnings := getWarnings \u0026lt;user\u0026gt; }} Returns a slice of warnings imposed on the specified user.\nuser: the user to get the warnings for. Can be either a user ID or a user object. humanizeThousands {{ $formatted := humanizeThousands \u0026lt;number\u0026gt; }} Places commas to separate groups of thousands in a number.\nnumber: the number to format. Must be an int or a string. Must be a whole number. in {{ $result := in \u0026lt;sequence\u0026gt; \u0026lt;value\u0026gt; }} Returns whether the case-sensitive value is in the sequence. sequence can be a slice or string.\ninFold {{ $result := inFold \u0026lt;sequence\u0026gt; \u0026lt;value\u0026gt; }} Same as in, but is case-insensitive. sequence can be a slice or string.\nindex {{ $item := index \u0026lt;list\u0026gt; \u0026lt;index\u0026gt; }} Returns the item at the specified index in list.\nlist is zero-indexed, so the first item is at index 0. list can be a slice, map, or string.\nIf you are indexing a map (that is, dict or sdict), index must be matching the key (as maps are unordered). Indexing a string type returns the character at that position as a rune.\nYou may optionally add additional indices in case you have nested structures, like index $x 0 1. This is equivalent to chaining index calls, e.g. index (index $x 0) 1.\nkindOf {{ $kind := kindOf \u0026lt;value\u0026gt; [indirect] }} Returns the kind of the provided value.\nIf value is behind an interface{} or pointer, set indirect to true to read the inner value. Most users of this function will want to do this.\nlen {{ $length := len \u0026lt;list\u0026gt; }} Returns the length of the provided list. list can be a slice, map, or string.\nnoun {{ $noun := noun }} Returns a random noun.\nparseArgs {{ $args := parseArgs \u0026lt;requiredArgs\u0026gt; \u0026lt;errorMessage\u0026gt; [...cargs] }} Parses arguments passed to the custom command. Ensures that at least requiredArgs are passed and checks that these arguments match as specified by carg..., emits errorMessage otherwise.\nPassing an empty string as errorMessage will generate one for you based on the provided argument definitions.\nThe result has the .Get N and .IsSet N methods available, returning the value or reporting whether the argument is present, respectively, at position N (starting from 0).\n...cargs: a list of argument definitions. Must have at least requiredArgs elements. Has the following arguments: \u0026quot;type\u0026quot;: the type of this argument as a quoted string. \u0026quot;name\u0026quot;: the name of this argument. Must be a string. An argument\u0026rsquo;s \u0026quot;type\u0026quot; must be one of the following:\nint: whole number float: decimal number string: text user: user mentions, resolves to a user object userid: mentions or user IDs, resolves to the ID itself member: mentions or user IDs, resolves to a member object channel: channel mention or ID, resolves to a channel object role: role name or ID, resolves to a role object duration: duration that is human-readable, i.e 10h5m or 10 hour 5 minutes would both resolve to the same duration Additionally, the int, float, and duration type support validation ranges in the interval (min, max), where for duration it is in time.Duration format values.\nExample {{ $args := parseArgs 1 \u0026#34;\u0026#34; (carg \u0026#34;int\u0026#34; \u0026#34;coolness level\u0026#34; 0 100) (carg \u0026#34;member\u0026#34; \u0026#34;target member\u0026#34;) }} Coolness: {{ $args.Get 0 }} {{- if $args.IsSet 1 }} Target: {{ ($args.Get 1).User }} {{- else }} Target: {{ .User }} {{ end }} Please see our in-depth guide in the learning resources for a full breakdown of this function and how to make good use of it.\nsdict {{ $map := sdict [values...] }} Creates a dictionary from the provided key-value pairs. The number of parameters must be even. The keys must be of string type.\nsendTemplateDM {{ $messageID := sendTemplateDM \u0026#34;template\u0026#34; [data] }} Same as sendTemplate, but sends it to the triggering user\u0026rsquo;s direct messages instead and returns the response message\u0026rsquo;s ID.\nsendTemplate {{ $messageID := sendTemplate \u0026lt;channel\u0026gt; \u0026#34;template\u0026#34; [data] }} Sends an Associated Template to channel, with optional data, returning the response message\u0026rsquo;s ID.\nseq {{ $sequence := seq \u0026lt;start\u0026gt; \u0026lt;stop\u0026gt; }} Creates a new slice with integer-type elements, starting from start and ending at stop-1. start and stop must be whole numbers. Limited to 10,000 elements.\nshuffle {{ $shuffled := shuffle \u0026lt;list\u0026gt; }} Returns a shuffled (randomized) version of the provided list.\nsleep {{ sleep \u0026lt;seconds\u0026gt; }} Pauses the execution of the custom command for the specified number of seconds. The maximum duration is 60 seconds, combined across all sleep calls within the custom command and its associated templates.\nslice {{ $result := slice \u0026lt;item\u0026gt; \u0026lt;start\u0026gt; [end] }} Returns a subslice of the input item (which may be an array, slice, or string) containing the elements starting at index start (inclusive), and ending at index end, exclusive. If only start is provided, it is interpreted as the start index and the subslice extends to the end of item.\nsort {{ $sorted := sort \u0026lt;list\u0026gt; [options] }} Returns the given list in a sorted order. The list\u0026rsquo;s items must all be of the same type. The optional options argument is an sdict with the following (optional) keys:\nkey: if sorting a list of maps, the key\u0026rsquo;s value to sort by. This key must be present on all maps in the slice. reverse: whether to sort in reverse (descending) order. Default: false. Limited to 1 call on regular servers and 3 calls on premium servers.\nverb {{ $verb := verb }} Returns a random verb.\n","date":"0001-01-01","id":58,"permalink":"/docs/reference/templates/functions/","summary":"\u003cp\u003eFunctions are used to take action within template scripts. Some functions accept arguments, and some functions return\nvalues you can send in your response or use as arguments for other functions.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"channel\"\u003eChannel\u003c/h2\u003e\n\u003cp\u003eThese functions relate to channels and threads.\u003c/p\u003e\n\u003cdiv class=\"callout callout-tip d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/rocket svg-inline callout-icon me-2 mb-3\" id=\"svg-rocket\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M4 13a8 8 0 0 1 7 7a6 6 0 0 0 3 -5a9 9 0 0 0 6 -8a3 3 0 0 0 -3 -3a9 9 0 0 0 -8 6a6 6 0 0 0 -5 3\" /\u003e\n  \u003cpath d=\"M7 14a6 6 0 0 0 -3 6a6 6 0 0 0 6 -3\" /\u003e\n  \u003cpath d=\"M15 9m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eTip: Current Channel or Thread\u003c/p\u003e","tags":[],"title":"Functions"},{"content":"componentBuilder componentBuilder is a helper for building Discord’s new Components V2 (sections, buttons, menus, galleries). It provides a simple template-based way to assemble complex message layouts without needing to write raw JSON. You describe components with key–value pairs and componentBuilder handles conversion and validation for you.\nThis makes it easier to:\nCreate rich messages with text, images, and files. Add interactive components like buttons and select menus. Group and style components with containers. Control delivery with meta options like ephemeral replies. Text Displays plain text content, supporting markdown. Can be a string or a slice of strings.\n{{ $text := componentBuilder \u0026#34;text\u0026#34; \u0026#34;Component Builder v2 test!\u0026#34; }} {{/* or */}} {{ $text := componentBuilder \u0026#34;text\u0026#34; (cslice \u0026#34;### Ingredients\u0026#34; \u0026#34;`200g` pasta sheets\u0026#34; \u0026#34;`500g` minced beef\u0026#34; \u0026#34;`300ml` tomato sauce\u0026#34; ) }} Section A layout block that shows text with one optional accessory: a button or a thumbnail.\ntext: A string, or slice of strings.\nbutton: Button (optional)\nthumbnail: sdict with keys media, description, spoiler (optional)\nExample For brevity, this example shows both a button and a thumbnail within a single section, but only one of those accessories can be used per section.\n{{ $section := componentBuilder \u0026#34;section\u0026#34; (sdict \u0026#34;text\u0026#34; \u0026#34;🍲 **Lasagna Recipe**\u0026#34; \u0026#34;thumbnail\u0026#34; (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/103\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Alt text\u0026#34; \u0026#34;spoiler\u0026#34; false ) \u0026#34;button\u0026#34; (cbutton (sdict \u0026#34;label\u0026#34; \u0026#34;Set Servings\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;set-servings\u0026#34; \u0026#34;style\u0026#34; \u0026#34;primary\u0026#34;)) ) }} Gallery Displays one or more media items with optional descriptions and spoiler flags.\nmedia: string\ndescription: string (optional)\nspoiler: bool (optional)\n{{ $gallery := componentBuilder \u0026#34;gallery\u0026#34; (cslice (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/103\u0026#34;) (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/420\u0026#34; \u0026#34;description\u0026#34; \u0026#34;I dont have food pics\u0026#34;) (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/451\u0026#34; \u0026#34;description\u0026#34; \u0026#34;So have random cats\u0026#34; \u0026#34;spoiler\u0026#34; true) ) }} File Attaches text files to the message and optionally displays them.\ncontent: string (max 100 000 chars)\nname: string (filename, .txt appended automatically)\n{{ $file := componentBuilder \u0026#34;file\u0026#34; (cslice (sdict \u0026#34;content\u0026#34; \u0026#34;Step 1: Boil pasta\\nStep 2: Cook beef\\nStep 3: Layer \u0026amp; bake\u0026#34; \u0026#34;name\u0026#34; \u0026#34;lasagna_recipe\u0026#34; ) (sdict \u0026#34;content\u0026#34; \u0026#34;Tips:\\n- Use fresh herbs\\n- Let it rest 10 min before serving\u0026#34; \u0026#34;name\u0026#34; \u0026#34;lasagna_tips\u0026#34; \u0026#34;spoiler\u0026#34; true ) ) }} Separator Adds spacing between components.\ntrue: large separator\nfalse or nil: small separator\n{{ $separator := componentBuilder \u0026#34;separator\u0026#34; true }} Container Groups multiple components with optional styling.\ncomponents: ComponentBuilder or list of entries\ncolor: hex accent color (optional)\nspoiler: hides content until revealed (optional)\n{{ $container := componentBuilder \u0026#34;container\u0026#34; (sdict \u0026#34;color\u0026#34; 0xF5CDF6 \u0026#34;spoiler\u0026#34; false \u0026#34;components\u0026#34; (componentBuilder \u0026#34;text\u0026#34; \u0026#34;🍲 **Lasagna Recipe**\u0026#34; \u0026#34;buttons\u0026#34; (cslice (cbutton (sdict \u0026#34;label\u0026#34; \u0026#34;Start\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;start\u0026#34; \u0026#34;style\u0026#34; \u0026#34;primary\u0026#34;)) (cbutton (sdict \u0026#34;label\u0026#34; \u0026#34;Cancel\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;cancel\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34;)) ) ) ) }} Buttons Interactive buttons users can click. Can be single or multiple. see cbutton.\nMaximum 25 buttons total (5 rows * 5 buttons)\nLink buttons don’t need a custom_id\n{{ $buttons := componentBuilder \u0026#34;buttons\u0026#34; (cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;-\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;decrease\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;+\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;increase\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Random\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;random\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) ) }} Menus Select menus for user options. see cmenu.\nMaximum 5 menus per message\nEach menu occupies its own row\n{{ $menu := componentBuilder \u0026#34;menus\u0026#34; (cmenu \u0026#34;custom_id\u0026#34; \u0026#34;unit-select\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Metric\u0026#34; \u0026#34;value\u0026#34; \u0026#34;metric\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Imperial\u0026#34; \u0026#34;value\u0026#34; \u0026#34;imperial\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Kelvin\u0026#34; \u0026#34;value\u0026#34; \u0026#34;kelvin\u0026#34;) ) ) }} Interactive Components Mix of buttons and menus, auto-distributed. see cbutton and cmenu, respectively.\nAccepts:\nSingle component\nSlice of components\nSlice of slices (to define rows)\n{{ $interactive := componentBuilder \u0026#34;interactive_components\u0026#34; (cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Approve\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;approve\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Reject\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;reject\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34;) (cmenu \u0026#34;custom_id\u0026#34; \u0026#34;priority-select\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;High\u0026#34; \u0026#34;value\u0026#34; \u0026#34;high\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Medium\u0026#34; \u0026#34;value\u0026#34; \u0026#34;medium\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Low\u0026#34; \u0026#34;value\u0026#34; \u0026#34;low\u0026#34;) ) ) ) }} Meta keys allowed_mentions: control pings (users, roles, everyone)\nreply: message ID to reply to\nsilent: suppress notifications\nephemeral: message visible only to interaction user (only available in interactions)\nExample This example combines text, sections, gallery, files, buttons, menus, and container styling into a single, cohesive layout.\n{{ $section := sdict \u0026#34;text\u0026#34; \u0026#34;🍲 **Lasagna Recipe**\u0026#34; \u0026#34;button\u0026#34; (cbutton \u0026#34;label\u0026#34; \u0026#34;Set Servings\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;set-servings\u0026#34; \u0026#34;style\u0026#34; \u0026#34;primary\u0026#34;) }} {{ $pasta := cslice \u0026#34;### Ingredients\u0026#34; \u0026#34;`200g` pasta sheets\u0026#34; \u0026#34;`500g` minced beef\u0026#34; \u0026#34;`300ml` tomato sauce\u0026#34; \u0026#34;`200g` mozzarella cheese\u0026#34; \u0026#34;`1` onion, diced\u0026#34; }} {{ $oven := cslice \u0026#34;### Oven Settings\u0026#34; \u0026#34;Mode: `Bake`\u0026#34; \u0026#34;Temp: `180°C`\u0026#34; \u0026#34;Time: `45 minutes`\u0026#34; }} {{ $gallery := cslice (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/420\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Step 1: Prep ingredients\u0026#34;) (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/451\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Step 2: Into the oven!\u0026#34; \u0026#34;spoiler\u0026#34; true) }} {{ $file := cslice (sdict \u0026#34;content\u0026#34; \u0026#34;Step 1: Boil pasta\\nStep 2: Cook beef with onion\\nStep 3: Layer pasta, beef, sauce, cheese\\nStep 4: Bake at 180°C for 45 min\u0026#34; \u0026#34;name\u0026#34; \u0026#34;lasagna_recipe\u0026#34; ) (sdict \u0026#34;content\u0026#34; \u0026#34;Tips:\\n- Use fresh herbs for better flavor\\n- Let it rest 10 min before serving\u0026#34; \u0026#34;name\u0026#34; \u0026#34;lasagna_tips\u0026#34; \u0026#34;spoiler\u0026#34; true ) }} {{ $buttons := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;➖ Less Cheese\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;less-cheese\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;➕ More Cheese\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;more-cheese\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;🍷 Suggest Wine Pairing\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;wine\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) }} {{ $menus := cmenu \u0026#34;custom_id\u0026#34; \u0026#34;sauce-select\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Classic Tomato\u0026#34; \u0026#34;value\u0026#34; \u0026#34;tomato\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;White Sauce\u0026#34; \u0026#34;value\u0026#34; \u0026#34;bechamel\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Spicy Arrabbiata\u0026#34; \u0026#34;value\u0026#34; \u0026#34;arrabbiata\u0026#34;) ) }} {{ $comp := componentBuilder \u0026#34;silent\u0026#34; true \u0026#34;container\u0026#34; (sdict \u0026#34;color\u0026#34; 0xF5CDF6 \u0026#34;components\u0026#34; (componentBuilder \u0026#34;section\u0026#34; $section \u0026#34;text\u0026#34; $pasta \u0026#34;separator\u0026#34; true \u0026#34;text\u0026#34; $oven \u0026#34;gallery\u0026#34; $gallery \u0026#34;file\u0026#34; $file \u0026#34;separator\u0026#34; true \u0026#34;buttons\u0026#34; $buttons \u0026#34;menus\u0026#34; $menus ) ) }} {{ sendMessage nil $comp }} Component Builder Helper Functions The helper function provides methods to construct, manipulate, and get Discord V2 message components programmatically.\nThese methods allow you to build complex layouts incrementally and retrieve them in a format that Discord understands.\ncomponentBuilder.Add Adds a single component entry to the builder under the given key.\n{{ $cb.Add \u0026lt;key\u0026gt; \u0026lt;value\u0026gt; }} Parameters:\nkey – The top-level key for the component (e.g., \u0026ldquo;text\u0026rdquo;, \u0026ldquo;section\u0026rdquo;, \u0026ldquo;buttons\u0026rdquo;). value – The component data (string, sdict, Button, SelectMenu, etc.). Example {{ $builder := componentBuilder }} {{ $section := sdict \u0026#34;text\u0026#34; \u0026#34;🍲 **Lasagna Recipe**\u0026#34; \u0026#34;button\u0026#34; (cbutton \u0026#34;label\u0026#34; \u0026#34;Set Servings\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;set-servings\u0026#34; \u0026#34;style\u0026#34; \u0026#34;primary\u0026#34;) }} {{ $builder.Add \u0026#34;section\u0026#34; $section }} componentBuilder.AddSlice Adds multiple components under one key.\n{{ $cb.AddSlice \u0026lt;key\u0026gt; \u0026lt;values...\u0026gt; }} Parameters:\nkey – The top-level key for the component (e.g., \u0026ldquo;text\u0026rdquo;, \u0026ldquo;section\u0026rdquo;, \u0026ldquo;buttons\u0026rdquo;). values – The component data (string, sdict, Button, SelectMenu, etc.). Example {{ $builder := componentBuilder }} {{ $pasta := cslice \u0026#34;### Ingredients\u0026#34; \u0026#34;`200g` pasta sheets\u0026#34; \u0026#34;`500g` minced beef\u0026#34; \u0026#34;`300ml` tomato sauce\u0026#34; \u0026#34;`200g` mozzarella cheese\u0026#34; \u0026#34;`1` onion, diced\u0026#34; }} {{ $builder.AddSlice \u0026#34;text\u0026#34; $pasta }} componentBuilder.Merge Combine another builder into the current one.\n{{ $cb.Merge \u0026lt;componentBuilder\u0026gt; }} Parameters:\nother – The builder to merge. Example {{ $builder1 := componentBuilder }} {{ $builder2 := componentBuilder }} {{ $oven := cslice \u0026#34;### Oven Settings\u0026#34; \u0026#34;Mode: `Bake`\u0026#34; \u0026#34;Temp: `180°C`\u0026#34; \u0026#34;Time: `45 minutes`\u0026#34; }} {{ $section := sdict \u0026#34;text\u0026#34; \u0026#34;🍲 **Lasagna Recipe**\u0026#34; \u0026#34;button\u0026#34; (cbutton \u0026#34;label\u0026#34; \u0026#34;Set Servings\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;set-servings\u0026#34; \u0026#34;style\u0026#34; \u0026#34;primary\u0026#34;) }} {{ $builder1.Add \u0026#34;section\u0026#34; $section }} {{ $builder2.AddSlice \u0026#34;text\u0026#34; $oven }} {{ $builder1.Merge $builder2 }} componentBuilder.Get Retrieve components stored under a key.\n{{ $components := $cb.Get \u0026lt;key\u0026gt; }} Parameters:\nkey – The top-level key for the component (e.g., \u0026ldquo;text\u0026rdquo;, \u0026ldquo;section\u0026rdquo;, \u0026ldquo;buttons\u0026rdquo;). Example {{ $textComponents := $builder1.Get \u0026#34;text\u0026#34; }} $textComponents now contains the ingredient and oven text slices.\nHere\u0026rsquo;s an example of how to use the helper function to create a complex layout:\nExample (with helper function) {{ $section := sdict \u0026#34;text\u0026#34; \u0026#34;🍲 **Lasagna Recipe**\u0026#34; \u0026#34;button\u0026#34; (cbutton \u0026#34;label\u0026#34; \u0026#34;Set Servings\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;set-servings\u0026#34; \u0026#34;style\u0026#34; \u0026#34;primary\u0026#34;) }} {{ $pasta := cslice \u0026#34;### Ingredients\u0026#34; \u0026#34;`200g` pasta sheets\u0026#34; \u0026#34;`500g` minced beef\u0026#34; \u0026#34;`300ml` tomato sauce\u0026#34; \u0026#34;`200g` mozzarella cheese\u0026#34; \u0026#34;`1` onion, diced\u0026#34; }} {{ $oven := cslice \u0026#34;### Oven Settings\u0026#34; \u0026#34;Mode: `Bake`\u0026#34; \u0026#34;Temp: `180°C`\u0026#34; \u0026#34;Time: `45 minutes`\u0026#34; }} {{ $gallery := cslice (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/420\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Step 1: Prep ingredients\u0026#34;) (sdict \u0026#34;media\u0026#34; \u0026#34;https://http.cat/451\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Step 2: Into the oven!\u0026#34; \u0026#34;spoiler\u0026#34; true) }} {{ $file := cslice (sdict \u0026#34;content\u0026#34; \u0026#34;Step 1: Boil pasta\\nStep 2: Cook beef with onion\\nStep 3: Layer pasta, beef, sauce, cheese\\nStep 4: Bake at 180°C for 45 min\u0026#34; \u0026#34;name\u0026#34; \u0026#34;lasagna_recipe\u0026#34; ) (sdict \u0026#34;content\u0026#34; \u0026#34;Tips:\\n- Use fresh herbs for better flavor\\n- Let it rest 10 min before serving\u0026#34; \u0026#34;name\u0026#34; \u0026#34;lasagna_tips\u0026#34; \u0026#34;spoiler\u0026#34; true ) }} {{ $buttons := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;➖ Less Cheese\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;less-cheese\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;➕ More Cheese\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;more-cheese\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;🍷 Suggest Wine Pairing\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;wine\u0026#34; \u0026#34;style\u0026#34; \u0026#34;secondary\u0026#34;) }} {{ $menus := cmenu \u0026#34;custom_id\u0026#34; \u0026#34;sauce-select\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Classic Tomato\u0026#34; \u0026#34;value\u0026#34; \u0026#34;tomato\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;White Sauce\u0026#34; \u0026#34;value\u0026#34; \u0026#34;bechamel\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Spicy Arrabbiata\u0026#34; \u0026#34;value\u0026#34; \u0026#34;arrabbiata\u0026#34;) ) }} {{ $builder := componentBuilder }} {{ $builder.Add \u0026#34;section\u0026#34; $section }} {{ $builder.AddSlice \u0026#34;text\u0026#34; $pasta }} {{ $builder.Add \u0026#34;separator\u0026#34; true }} {{ $builder.AddSlice \u0026#34;text\u0026#34; $oven }} {{ $builder.Add \u0026#34;separator\u0026#34; true }} {{ $builder.Add \u0026#34;gallery\u0026#34; $gallery }} {{ $builder.Add \u0026#34;file\u0026#34; $file }} {{ $builder.Add \u0026#34;separator\u0026#34; true }} {{ $builder.Add \u0026#34;buttons\u0026#34; $buttons }} {{ $builder.Add \u0026#34;menus\u0026#34; $menus }} {{ $container := componentBuilder }} {{ $container.Add \u0026#34;container\u0026#34; (sdict \u0026#34;color\u0026#34; 0xF5CDF6 \u0026#34;components\u0026#34; $builder ) }} {{ sendMessage nil $container }} ","date":"0001-01-01","id":59,"permalink":"/docs/reference/components-v2/","summary":"\u003ch2 id=\"componentbuilder\"\u003ecomponentBuilder\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ecomponentBuilder\u003c/code\u003e is a helper for building Discord’s new Components V2 (sections, buttons, menus, galleries).\nIt provides a simple template-based way to assemble complex message layouts without needing to write raw JSON.\nYou describe components with key–value pairs and \u003ccode\u003ecomponentBuilder\u003c/code\u003e handles conversion and validation for you.\u003c/p\u003e\n\u003cp\u003eThis makes it easier to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate rich messages with text, images, and files.\u003c/li\u003e\n\u003cli\u003eAdd interactive components like buttons and select menus.\u003c/li\u003e\n\u003cli\u003eGroup and style components with containers.\u003c/li\u003e\n\u003cli\u003eControl delivery with meta options like ephemeral replies.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"text\"\u003eText\u003c/h3\u003e\n\u003cp\u003eDisplays plain text content, supporting markdown. Can be a string or a slice of strings.\u003c/p\u003e","tags":[],"title":"Components V2"},{"content":"Prebuilt custom commands for use as a learning reference.\nDanger: Out of Date\nNote: This page is no longer updated with the latest versions of codes/commands. If you plan to copy paste codes for your server, please see the community-ran repository of custom commands, which is frequently updated with newly contributed commands.\nThis isn\u0026rsquo;t the actual page about custom commands. A brief overview about custom commands can be found in the Custom Commands documentation. Please take notice, some of examples presented here are not up to date with current capabilities of YAGPDB. Please visit our support server for newer solutions.\nControlled randomizer example YAGPDB has a built-in random response system for custom commands, but sometimes you may want to control the chances for certain responses to occur. You can do this by creating a singular response and creating a variable with randInt. Then use an if-else-if statement like this to print out your desired output. {{$var := randInt 100}} {{if lt $var 10}} This has a 10% chance of being triggered {{else if lt $var 35}} This has a 25% chance of being triggered {{else}} This has a 65% chance of being triggered {{end}} Silent execution of commands or storage in a variable This command is to be placed in the welcome message. It filters out people with invites in their name. Make sure that the checkbox Censor server invites in usernames? and the ban command are enabled on your server. You might not want the response for the executed command to show. You can suppress the response of a command like the following:\nTrigger type: Join message in server channel\n{{if .UsernameHasInvite}} {{$silent := execAdmin \u0026#34;ban\u0026#34; .User.ID \u0026#34;ad blocked\u0026#34;}} {{else}} {{/* Replace this with your normal join message or leave it as it is */}} {{end}} Range example This command will teach you on how the range function works. It can iterate over many items including but not limited to a cslice, slice, sdict, and dict\nThis particular command loops over a cslice and a sdict.\nTrigger type: Command Trigger: range\n{{/* range can iterate over many things, let\u0026#39;s start with slice */}} {{ $slice := cslice \u0026#34;YAGPDB \u0026#34; \u0026#34;is \u0026#34; \u0026#34;cool!\u0026#34; }} {{/* Here, we range over with 1 argument, meaning the dot will be set to current iteration value */}} {{ range $slice -}} {{ . }} {{- end -}} {{ $map := sdict \u0026#34;foo\u0026#34; \u0026#34;bar\u0026#34; \u0026#34;hello\u0026#34; \u0026#34;world\u0026#34; }} {{- /* Now, we range with two arguments - $k will be the KEY, $v will be VALUE (note dot is still set to current iteration value */}} {{- range $k, $v := $map }} {{ $k }} - {{ $v }} {{- end }} $k is the index for arrays / cslices (starting at 0) or the key for maps and sdicts, while $v is the current word in your input that you are on. Range will work on any kind of slice/array. for example. If we wanted to look for all the entries in our database we can use range and index through them all in the following. {{$lb := dbTopEntries \u0026#34;%\u0026#34; 100 0}} {{range $lb}} {{.UserID}} **:** {{.Key}} **:** {{.Value}} {{end}} Note that we can go through everything that is in $lb with range.\nDictionary example A dictionary does not currently have a lot of practical use, because YAGPDB has a data type more suited for most use cases - sdict. However, sdict only supports string keys, which means that in the case you want non-string keys, you will have to use dict.\nTrigger type: Command Trigger: dict\n{{ $dict := dict 0 \u0026#34;foobar\u0026#34; \u0026#34;hello\u0026#34; \u0026#34;world\u0026#34; }} {{/* Retrieve value with integer key with index */}} 0 - {{ index $dict 0 -}} {{/* Retrieve value with string key using dot notation */}} hello - {{ $dict.hello }} parseArgs example The parseArgs template can check if specific arguments are given. If not, it will return a custom error message. It also checks if specific args are of a specific type and simplifies the argument management. Available types for carg are:\nint (whole number) string (text) user (user mentions as type user) userid (mentions or the user\u0026rsquo;s ID, as integer) channel (channel mention or ID, as type channel) role (role name or ID, as type *discordgo.Role) duration (duration as integer or string with optional time modifier - s,m,h, etc\u0026hellip;) member (mentions or the user\u0026rsquo;s ID, as type member) Trigger type: Command Trigger: send {{$args := parseArgs 2 \u0026#34;Syntax is \u0026lt;channel\u0026gt; \u0026lt;text\u0026gt;\u0026#34; (carg \u0026#34;channel\u0026#34; \u0026#34;channel to send to\u0026#34;) (carg \u0026#34;string\u0026#34; \u0026#34;text to send\u0026#34;)}} {{sendMessage ($args.Get 0).ID ($args.Get 1)}} Countdown example (Exec CC) This example consists of two custom commands, and after copy/paste REPLACE-WITH-... arguments need to be replaced by actual custom command ID\u0026rsquo;s in your system. This custom command is very complex, uses very many advanced functions, all it does, constructs a 10 second countdown timer command-system for given starting time.\n{{$args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;duration\u0026#34; \u0026#34;countdown-duration\u0026#34;) (carg \u0026#34;string\u0026#34; \u0026#34;countdown-message\u0026#34;)}} {{$t := currentTime.Add ($args.Get 0)}} {{$mID := sendMessageRetID nil (print \u0026#34;countdown starting... \u0026#34; $t.String)}} {{execCC REPLACE-WITH-NEXT-CC-ID nil 0 (sdict \u0026#34;MessageID\u0026#34; $mID \u0026#34;T\u0026#34; $t \u0026#34;Message\u0026#34; ($args.Get 1)) }} Second part of the custom commands, here we see, how data-part of exeCC was made in previous custom command as sdictand now we are calling those keys with .ExecData - for example .ExecData.MessageID sets new variable the same as stated in previous code.\n{{$timeLeft := .ExecData.T.Sub currentTime}} {{$cntDownMessageHeader := print \u0026#34;Countdown Timer: \u0026#34; .ExecData.Message}} {{$formattedTimeLeft := humanizeDurationSeconds $timeLeft}} {{$t := .ExecData.T}} {{$mID := .ExecData.MessageID}} {{$ts := .TimeSecond}} {{if lt $timeLeft (mult .TimeSecond 30)}} {{range seq 1 (toInt $timeLeft.Seconds) }} {{$timeLeft := $t.Sub currentTime}} {{$formattedTimeLeft := humanizeDurationSeconds $timeLeft}} {{editMessage nil $mID (print $cntDownMessageHeader \u0026#34;\\nTime left: \u0026#34; $formattedTimeLeft \u0026#34; seconds\u0026#34;)}} {{if gt $timeLeft $ts}} {{sleep 1}} {{end}} {{end}} {{editMessage nil .ExecData.MessageID (print $cntDownMessageHeader \u0026#34;\\nTime left: **ENDED**\u0026#34;)}} {{else}} {{editMessage nil .ExecData.MessageID (print $cntDownMessageHeader \u0026#34;\\nTime left: \u0026#34; $formattedTimeLeft)}} {{execCC .CCID nil 10 .ExecData}} {{end}} Database example This is a simple note taking system containing 3 separate custom commands. Also note that the actual name of the key inserted to database begins with \u0026ldquo;notes_\u0026rdquo;.\nSave note {{$args := parseArgs 2 \u0026#34;\u0026#34; (carg \u0026#34;string\u0026#34; \u0026#34;key\u0026#34;) (carg \u0026#34;string\u0026#34; \u0026#34;value\u0026#34;)}} {{dbSet .User.ID (print \u0026#34;notes_\u0026#34; ($args.Get 0)) ($args.Get 1)}} Saved `{{$args.Get 0}}` as `{{$args.Get 1}}` Get note {{$key := print \u0026#34;notes_\u0026#34; .StrippedMsg}} {{$note := dbGet .User.ID $key}} {{if $note}} {{$strippedKey := slice $key 6 (len $key)}} Note: `{{$strippedKey}}` Created {{humanizeTimeSinceDays $note.CreatedAt}} ago: {{$note.Value}} {{else}}Couldn\u0026#39;t find any note like that :({{end}} List user\u0026rsquo;s notes {{$notes := dbGetPattern .User.ID \u0026#34;notes_%\u0026#34; 100 0}} {{range $notes}} {{- $strippedKey := slice .Key 6 (len .Key)}} `{{$strippedKey}}` created {{humanizeTimeSinceDays .CreatedAt}} ago {{- else}} You don\u0026#39;t have any notes :( {{end}} Cooldown Example With YAGPDB\u0026rsquo;s database system, you can now add cooldowns to you custom commands. You can either make them global cooldowns or a per user cooldown.\n{{/* CONFIGURATION HERE CHANGE VALUES AS NEEDED */}} {{/* 0 for per user, 1 for global */}} {{$isGlobal := 1}} {{/* name your cooldown name (anything works) */}} {{$name := \u0026#34;replace with name here\u0026#34;}} {{/* Length of the cooldown (in seconds) */}} {{$lengthSec := 10}} {{/* CREATING VARIABLES DO NOT TOUCH */}} {{$id := 0}} {{$key := print \u0026#34;cooldown_\u0026#34; $name}} {{if eq $isGlobal 0}} {{$id = .User.ID}} {{end}} {{if dbGet (toInt64 $id) $key}} {{/* Code to execute when cooldown is active */}} {{else}} {{/* Create cooldown entry */}} {{dbSetExpire (toInt64 $id) $key \u0026#34;cooldown\u0026#34; $lengthSec}} {{/* YOUR COMMAND HERE */}} {{end}} User submitted custom commands Counter Command By Timcampy#5636\nWith YAGPDB\u0026rsquo;s database system, I made a command to have users count from 0 and keep counting to the next number. Relatively simple command that involves database and type conversion. Trigger type: Regex Trigger: \\A\nBE SURE TO RESTRICT THE COMMAND TO A SINGLE CHANNEL {{/* If you are not doing (no twice msg in a row) or (role assignment for latest user) you can remove counter_user and by extension everything to do with $lastUser*/}} {{/* First time running command, set up initial values*/}} {{$lastUser := dbGet 118 \u0026#34;counter_user\u0026#34;}} {{if $lastUser}} {{else}} {{dbSet 118 \u0026#34;counter_user\u0026#34; 0}} {{dbSet 118 \u0026#34;counter_count\u0026#34; \u0026#34;0\u0026#34;}} {{end}} {{/* OPTIONAL: this is just to prevent one person to type all the numbers themselves */}} {{/* If current user ID matches the user who last successfully ran command */}} {{if eq (toFloat $lastUser.Value) (toFloat .User.ID)}} {{deleteTrigger 0}} {{sendDM \u0026#34;You can not send a msg twice in a row\u0026#34;}} {{else}} {{$next := dbGet 118 \u0026#34;counter_count\u0026#34;}} {{/* If message is equal to the expected next number , update counter */}} {{if eq (toInt .StrippedMsg) (toInt ($next.Value))}} {{dbSet 118 \u0026#34;counter_count\u0026#34; (add (toInt ($next.Value)) 1)}} {{$name := (add (toInt ($next.Value)) 1)}} {{editChannelName .Channel.ID (joinStr \u0026#34;\u0026#34; \u0026#34;count-to-\u0026#34; $name )}} {{/* OPTIONAL count tracker per user, Delete if you don\u0026#39;t want to use */}} {{$key := joinStr \u0026#34;\u0026#34; \u0026#34;counter_tracker_\u0026#34; .User.ID}} {{$userCount := dbGet 118 $key}} {{if $userCount}} {{dbSet 118 $key (add (toInt ($userCount.Value)) 1)}} {{else}} {{dbSet 118 $key 1}} {{end}} {{/* OPTIONAL: If you don\u0026#39;t want to give a role to the latest person delete everything but dbset */}} {{/* Give new user role, take role back from old user and update latest user */}} {{/* (UPDATE THE ROLEID) */}} {{giveRoleID .User.ID 606891664396648474}} {{$tmpUser := (userArg (toInt $lastUser.Value))}} {{/* check if its a valid user or not */}} {{if $tmpUser}} {{takeRoleID ($tmpUser.ID) 606891664396648474}} {{end}} {{dbSet 118 \u0026#34;counter_user\u0026#34; (toString .User.ID)}} {{else}} {{/* Message did not match expected next value */}} {{deleteTrigger 0}} {{/* Removed Because too annoying :^) */}} {{/*sendDM \u0026#34;That is not the next number, learn how to count :)\u0026#34;*/}} {{end}} {{end}} GiveRole command for specific roles By GryTrean#8957\nThis command will allow you to give a role to someone, making sure that the role given is in a list of allowed roles. We use the {{giveRoleName \u0026lt;user\u0026gt; \u0026lt;role\u0026gt;}} template which allows us to give a user a role by name. We also make sure that the command has the correct number of arguments and if not, we give a response with the correct usage of the command. To add a new exception to the roles that can be given, you simply add another role in line 2. You could also make the command take away roles from someone instead of giving them by simply using the {{takeRoleName}} template instead of {{giveRoleName}}.\nTrigger type: Command Trigger: giveRoleName\n{{if eq (len .Args) 3}} {{$allowedRoles := (cslice \u0026#34;Patron\u0026#34; \u0026#34;Quality Patron\u0026#34; \u0026#34;Paypal Donors\u0026#34;)}} {{$role := (index .CmdArgs 1)}} {{if in $allowedRoles $role}} {{giveRoleName (userArg (index .CmdArgs 0)) $role}} Gave {{$role}} to {{index .CmdArgs 0}}! :white_check_mark: {{else}} You can\u0026#39;t use this command to give that role to someone! :x: {{end}} {{else}} Correct usage of the command: -giverole \u0026lt;target\u0026gt; \u0026#34;\u0026lt;rolename\u0026gt;\u0026#34; {{end}} Broadcast command By GryTrean#8957 Updated by: Timcampy#5636\nThis command lets the bot send a message to another channel. It uses embeds so you can see sdict(dictionary but with only string keys), sendMessage, and cembedin action.\nTrigger type: Command Trigger: bc\n{{if eq (len .Args) 3}} {{$channel := (index .CmdArgs 0)}} {{$msg:= (joinStr \u0026#34; \u0026#34; (slice .CmdArgs 1))}} {{$footer1 := (sdict \u0026#34;text\u0026#34; (joinStr \u0026#34;\u0026#34; \u0026#34;This broadcast was sent by \u0026#34; (.User.Username) \u0026#34;\u0026#34;))}} {{$msgEmbed := cembed \u0026#34;title\u0026#34; \u0026#34;Broadcast!\u0026#34; \u0026#34;description\u0026#34; ($msg) \u0026#34;color\u0026#34; 16763904 \u0026#34;footer\u0026#34; ($footer1)}} {{sendMessage $channel $msgEmbed}} {{$desc := (joinStr \u0026#34;\u0026#34; \u0026#34;User \u0026#34; (.User.Username) \u0026#34; broadcasted a message in #\u0026#34; ($channel) \u0026#34;\u0026#34;)}} {{$footer := (sdict \u0026#34;text\u0026#34; (joinStr \u0026#34;\u0026#34; \u0026#34;The broadcast was sent on \u0026#34; (exec \u0026#34;ctime\u0026#34;) \u0026#34;\u0026#34;))}} {{$embed := cembed \u0026#34;title\u0026#34; \u0026#34;Broadcast sent!\u0026#34; \u0026#34;description\u0026#34; ($desc) \u0026#34;color\u0026#34; 4325120 \u0026#34;footer\u0026#34; ($footer) \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;name\u0026#34; \u0026#34;Broadcasted message:\u0026#34; \u0026#34;value\u0026#34; ($msg)))}} {{sendMessage nil $embed}} {{else}} Correct usage of the command: -bc \u0026#34;\u0026lt;channel-name\u0026gt;\u0026#34; \u0026#34;\u0026lt;message\u0026gt;\u0026#34; {{end}} Avatar command By: L-z#7749\nThis command does a good job at using a little bit of everything. Which include but is not limited to, conditional statement, assigning values to variable, getting command arguments, using template code, and creating embeds. If you are able to understand everything in this command, you are at a very good place in being able to make advanced custom commands. Trigger type: Command Trigger: avatar\n{{$ln := (len .Args)}} {{$sizes := (cslice \u0026#34;16\u0026#34; \u0026#34;32\u0026#34; \u0026#34;64\u0026#34; \u0026#34;128\u0026#34; \u0026#34;256\u0026#34; \u0026#34;512\u0026#34; \u0026#34;1024\u0026#34; \u0026#34;2048\u0026#34; \u0026#34;4096\u0026#34;)}} {{$err1 := \u0026#34;Wrong image size input format! Possible values: 16, 32, 64, 128, 256, 512, 1024, 2048, 4096.\u0026#34;}} {{$err2 := \u0026#34;Unknown user :(\u0026#34;}} {{$color := 1478046}} {{if gt $ln 1}} {{$1 := (index .Args 1)}} {{if ($user := userArg $1)}} {{if gt $ln 2}} {{$2 := (index .Args 2)}} {{if in $sizes $2}} {{$out := $user.AvatarURL (toString $2)}} {{$emb := cembed \u0026#34;color\u0026#34; $color \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $out)}} {{sendMessage nil $emb}} {{else}} {{$err1}} {{end}} {{else}} {{$out := $user.AvatarURL \u0026#34;512\u0026#34;}} {{$emb := cembed \u0026#34;color\u0026#34; $color \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $out)}} {{sendMessage nil $emb}} {{end}} {{else if gt $ln 2}} {{$2 := (index .Args 2)}} {{if ($user := userArg $2)}} {{if in $sizes $1}} {{$out := $user.AvatarURL (toString $1)}} {{$emb := cembed \u0026#34;color\u0026#34; $color \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $out)}} {{sendMessage nil $emb}} {{else}} {{$err1}} {{end}} {{else}} {{$err2}} {{end}} {{else if in $sizes $1}} {{$out := .User.AvatarURL (toString $1)}} {{$emb := cembed \u0026#34;color\u0026#34; $color \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $out)}} {{sendMessage nil $emb}} {{else}} {{$err1}} {{end}} {{else}} {{$out := .User.AvatarURL \u0026#34;512\u0026#34;}} {{$emb := cembed \u0026#34;color\u0026#34; $color \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $out)}} {{sendMessage nil $emb}} {{end}} Suggestion command By: Michdi#1602\nThis command is used to replace suggestion bots. You can adapt it to your needs.\nTrigger type: Command Trigger: suggest\n{{ $channel := 476178740133494784 }} {{/* Replace this with your suggestion channel ID */}} {{if gt (len .Args) 1}} Suggestion submitted. {{ $embed := cembed \u0026#34;description\u0026#34; (joinStr \u0026#34; \u0026#34; .CmdArgs) \u0026#34;color\u0026#34; 9021952 \u0026#34;author\u0026#34; (sdict \u0026#34;name\u0026#34; (joinStr \u0026#34;\u0026#34; .User.Username \u0026#34;#\u0026#34; .User.Discriminator) \u0026#34;url\u0026#34; \u0026#34;\u0026#34; \u0026#34;icon_url\u0026#34; (.User.AvatarURL \u0026#34;512\u0026#34;)) \u0026#34;timestamp\u0026#34; currentTime }} {{ $id := (sendMessageNoEscapeRetID $channel $embed) }} {{ addMessageReactions $channel $id \u0026#34;upvote:524907425531428864\u0026#34; \u0026#34;downvote:524907425032175638\u0026#34; }} {{else}} Correct usage: `-suggest \u0026lt;suggestion\u0026gt;` {{end}} {{deleteResponse 5}} {{deleteTrigger 5}} Big emote command By: CHamburr#2591\n****Updated by: **Joe_#2447**\nThis command uses the reFindAllSubmatches template as well as the printf template, and will enlarge custom emotes, whether still or animated. This will also work for emotes that are from the servers YAGPDB is not in, as it gets the emote file directly from Discord\u0026rsquo;s database.\nTrigger type: Command Trigger: bigemote\n{{ $matches := reFindAllSubmatches `\u0026lt;(a)?:.*?:(\\d+)\u0026gt;` .StrippedMsg }} {{ if $matches }} {{ $animated := index $matches 0 1 }} {{ $id := index $matches 0 2 }} {{ $ext := \u0026#34;.png\u0026#34; }} {{ if $animated }} {{ $ext = \u0026#34;.gif\u0026#34; }} {{ end }} {{ $url := printf \u0026#34;https://cdn.discordapp.com/emojis/%s%s\u0026#34; $id $ext }} {{ sendMessage nil (cembed \u0026#34;title\u0026#34; \u0026#34;❯ Big Emoji\u0026#34; \u0026#34;url\u0026#34; $url \u0026#34;color\u0026#34; 14232643 \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $url) \u0026#34;footer\u0026#34; (sdict \u0026#34;text\u0026#34; (joinStr \u0026#34;\u0026#34; \u0026#34;Emoji ID: \u0026#34; $id)) ) }} {{ else }} **Usage:** `-bigemoji \u0026lt;custom emoji\u0026gt;`. {{ end }} ","date":"0001-01-01","id":60,"permalink":"/docs/reference/custom-commands-examples/","summary":"\u003cp\u003ePrebuilt custom commands for use as a learning reference.\u003c/p\u003e","tags":[],"title":"Custom Commands Examples"},{"content":"Various limits in YAGPDB custom commands (CC) for smooth functioning of the bot and misuse prevention.\nOverall Max amount of CCs: 100/250 (free/prem) Max CCs that can be triggered by a single action: 3/5 (free/prem) Character limit: 10k (5k for join/leave msg, warn dm, etc\u0026hellip;) Limit writer: 25kB Max operations: 1M/2.5M (free/prem) Response Character Limit: 2k Generic API based Action call limit: 100 per CC State Lock based Actions: 500 per CC (mentionRoleName/ID ; hasRoleName ; targetHasRoleName/ID) Calling a Custom Command execCC Calls per CC: 1/10 (free/prem) -\u0026gt; counter key \u0026ldquo;runcc\u0026rdquo; StackDepth limit: 2 (executing with 0 delay) Delay limit: int64 limit (292 years) Channel limit: 10 executions per channel, per minute scheduleUniqueCC Calls per CC: 1/10 (free/prem) -\u0026gt; counter key \u0026ldquo;runcc\u0026rdquo; Delay limit: int64 limit (292 years) There can only be 1 per server per key cancelScheduledUniqueCC Calls per CC: 10/10 (free/prem) -\u0026gt; counter key \u0026ldquo;cancelcc\u0026rdquo; Context Max file size (complexMessage): 100kB joinStr max string length: 1000kB sendDM: 1 call per CC -\u0026gt; counter key \u0026ldquo;send_dm\u0026rdquo; sendTemplate/sendTemplateDM: 3 calls per CC -\u0026gt; counter key \u0026ldquo;exec_child\u0026rdquo; addReactions: 20 calls per CC -\u0026gt; counter key \u0026ldquo;add_reaction_trigger\u0026rdquo;. Each reaction added counts towards the limit. addResponseReactions: 20 calls per CC -\u0026gt; counter key \u0026ldquo;add_reaction_response\u0026rdquo;. Each reaction added counts towards the limit. addMessageReactions: 20 calls per CC -\u0026gt; counter key \u0026ldquo;add_reaction_message\u0026rdquo;. Each reaction added counts towards the limit. deleteMessageReaction: 10 calls per CC -\u0026gt; counter key \u0026ldquo;del_reaction_message\u0026rdquo;. Each reaction removed counts towards the limit. editChannelName/Topic: 10 calls per CC -\u0026gt; counter key \u0026ldquo;edit_channel\u0026rdquo; regex cache limit: 10 (this means you cant have more than 10 different regexes on a CC) onlineCount: 1 call per cc -\u0026gt; counter key \u0026ldquo;online_users\u0026rdquo; onlineCountBots: 1 call per cc -\u0026gt; counter key \u0026ldquo;online_bots\u0026rdquo; editNickname: 2 calls per cc -\u0026gt; counter key \u0026ldquo;edit_nick\u0026rdquo; Append/AppendSlice limit: 10k size limit of resulting slice exec/execAdmin: 5 calls per cc -\u0026gt; no key deleteResponse/deleteMessage/deleteTrigger max delay: 86400s take/removeRoleID/Name max delay: int64 limit (292 years) sleep: 60 seconds DATABASE Overall Limits Max amount of DBs: Membercount *50*1/10(free/prem) Key length limit: 256 Expire limit: int64 limit (292 years) Value size limit: 100kB Database Interactions Calls per CC: 10/50 (free/prem) -\u0026gt; counter key \u0026ldquo;db_interactions\u0026rdquo; Valid for all database commands -\u0026gt; dbDel/dbDelByID dbGet dbIncr dbSet/dbSetExpire Database Multiple Entry Interactions Multiple entries all count to general \u0026ldquo;db_interactions\u0026rdquo; limit as well.\nCalls per CC: 2/10 (free/prem) -\u0026gt; counter key \u0026ldquo;db_multiple\u0026rdquo; Valid for all database multiple entry related commands -\u0026gt; dbCount dbDelMultiple dbGetPattern dbRank dbTopEntries ","date":"0001-01-01","id":61,"permalink":"/docs/reference/custom-commands-limits/","summary":"\u003cp\u003eVarious limits in YAGPDB custom commands (CC) for smooth functioning of the bot and misuse prevention.\u003c/p\u003e\n\u003ch2 id=\"overall\"\u003eOverall\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMax amount of CCs:\u003c/strong\u003e 100/250 (free/prem)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMax CCs that can be triggered by a single action:\u003c/strong\u003e 3/5 (free/prem)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCharacter limit:\u003c/strong\u003e 10k (5k for join/leave msg, warn dm, etc\u0026hellip;)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLimit writer:\u003c/strong\u003e 25kB\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMax operations:\u003c/strong\u003e 1M/2.5M (free/prem)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResponse Character Limit:\u003c/strong\u003e 2k\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGeneric API based Action call limit:\u003c/strong\u003e 100 per CC\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eState Lock based Actions:\u003c/strong\u003e 500 per CC (mentionRoleName/ID ; hasRoleName ; targetHasRoleName/ID)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"calling-a-custom-command\"\u003eCalling a Custom Command\u003c/h2\u003e\n\u003ch3 id=\"execcc\"\u003eexecCC\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCalls per CC:\u003c/strong\u003e 1/10 (free/prem) -\u0026gt; counter key \u0026ldquo;runcc\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStackDepth limit:\u003c/strong\u003e 2 (executing with 0 delay)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDelay limit:\u003c/strong\u003e int64 limit (292 years)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eChannel limit:\u003c/strong\u003e 10 executions per channel, per minute\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"scheduleuniquecc\"\u003escheduleUniqueCC\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCalls per CC:\u003c/strong\u003e 1/10 (free/prem) -\u0026gt; counter key \u0026ldquo;runcc\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDelay limit:\u003c/strong\u003e int64 limit (292 years)\u003c/li\u003e\n\u003cli\u003eThere can only be 1 per server per key\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"cancelscheduleduniquecc\"\u003ecancelScheduledUniqueCC\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCalls per CC:\u003c/strong\u003e 10/10 (free/prem) -\u0026gt; counter key \u0026ldquo;cancelcc\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"context\"\u003eContext\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMax file size (complexMessage):\u003c/strong\u003e 100kB\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ejoinStr max string length:\u003c/strong\u003e 1000kB\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esendDM:\u003c/strong\u003e 1 call per CC -\u0026gt; counter key \u0026ldquo;send_dm\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esendTemplate/sendTemplateDM:\u003c/strong\u003e 3 calls per CC -\u0026gt; counter key \u0026ldquo;exec_child\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eaddReactions:\u003c/strong\u003e 20 calls per CC -\u0026gt; counter key \u0026ldquo;add_reaction_trigger\u0026rdquo;. Each reaction added counts towards the\nlimit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eaddResponseReactions:\u003c/strong\u003e 20 calls per CC -\u0026gt; counter key \u0026ldquo;add_reaction_response\u0026rdquo;. Each reaction added counts towards\nthe limit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eaddMessageReactions:\u003c/strong\u003e 20 calls per CC -\u0026gt; counter key \u0026ldquo;add_reaction_message\u0026rdquo;. Each reaction added counts towards\nthe limit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edeleteMessageReaction:\u003c/strong\u003e 10 calls per CC -\u0026gt; counter key \u0026ldquo;del_reaction_message\u0026rdquo;. Each reaction removed counts towards\nthe limit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eeditChannelName/Topic:\u003c/strong\u003e 10 calls per CC -\u0026gt; counter key \u0026ldquo;edit_channel\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eregex cache limit:\u003c/strong\u003e 10 (this means you cant have more than 10 different regexes on a CC)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eonlineCount:\u003c/strong\u003e 1 call per cc -\u0026gt; counter key \u0026ldquo;online_users\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eonlineCountBots:\u003c/strong\u003e 1 call per cc -\u0026gt; counter key \u0026ldquo;online_bots\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eeditNickname:\u003c/strong\u003e 2 calls per cc -\u0026gt; counter key \u0026ldquo;edit_nick\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAppend/AppendSlice limit:\u003c/strong\u003e 10k size limit of resulting slice\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eexec/execAdmin:\u003c/strong\u003e 5 calls per cc -\u0026gt; no key\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edeleteResponse/deleteMessage/deleteTrigger max delay:\u003c/strong\u003e 86400s\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etake/removeRoleID/Name max delay:\u003c/strong\u003e int64 limit (292 years)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esleep:\u003c/strong\u003e 60 seconds\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"database\"\u003eDATABASE\u003c/h2\u003e\n\u003ch3 id=\"overall-limits\"\u003eOverall Limits\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMax amount of DBs:\u003c/strong\u003e Membercount *50*1/10(free/prem)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKey length limit:\u003c/strong\u003e 256\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpire limit:\u003c/strong\u003e int64 limit (292 years)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eValue size limit:\u003c/strong\u003e 100kB\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"database-interactions\"\u003eDatabase Interactions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCalls per CC:\u003c/strong\u003e 10/50 (free/prem) -\u0026gt; counter key \u0026ldquo;db_interactions\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eValid for all database commands -\u0026gt;\n\u003cul\u003e\n\u003cli\u003edbDel/dbDelByID\u003c/li\u003e\n\u003cli\u003edbGet\u003c/li\u003e\n\u003cli\u003edbIncr\u003c/li\u003e\n\u003cli\u003edbSet/dbSetExpire\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"database-multiple-entry-interactions\"\u003eDatabase Multiple Entry Interactions\u003c/h3\u003e\n\u003cp\u003eMultiple entries all count to general \u0026ldquo;db_interactions\u0026rdquo; limit as well.\u003c/p\u003e","tags":[],"title":"Custom Commands Limits"},{"content":"A guide to creating custom embeds in various contexts across YAGPDB.\nDanger: Embed Limitations\nEmbeds have limits, summarized in Discord channel documentation.\nNote: Custom Commands use Custom Syntax\nCustom Embeds with the customembed command don\u0026rsquo;t work in custom commands. If you want to know how you can use embeds in custom commands, scroll down to Embeds in Custom Commands.\nThe customembed command One method of sending an embed with YAGPDB is using the command customembed (or for short, ce).\nCreate embeds by hand YAGPDB accepts embeds in JSON or YAML following the rules of Discord\u0026rsquo;s Embed Object structure.\nUsing YAML title: This is my title footer: text: This is my footer text. YAML input is formatted as a list of names with associated values for each part of the embed. In this example I start with a name (title) and the associated value (This is my title) after a semicolon. On a new line, we have another name (footer), this time with another list of name-value pairs as the value. An indent indicates that the name-value pair (text: This is \u0026hellip;) is part of the value of the footer.\nThe syntax of YAML YAML has an intuitive, lenient syntax. Most parts of the embed are simple name-value pairs (or nested name-value maps like in the footer shown above). New lines separate each pair, unless the next line is indented to indicate that that line is the value. Strings (text) can be included as-is without quotes, unless the text contains special characters like :, in which case single quotes (') or double quotes (\u0026quot;) may be used. Double quotes allow backslash-escapes to add newlines, double quotes, and more.\nUsing JSON { \u0026#34;title\u0026#34;: \u0026#34;This is my title\u0026#34;, \u0026#34;footer\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;This is my footer text.\u0026#34; } } As shown in the example above, I start my object (the embed) with a curly brace. Like YAML, we then have a name (title) and the value for that name (This is my title). We separate each name-value pair with a comma. Then we have something similar, but with another object as the value. Within that object we have a name-value pair with the same format as the title, this time for the footer text. In the end we close the objects (footer and embed) with more curly braces.\nThe syntax of JSON JSON\u0026rsquo;s syntax is also quite simple. Objects start with an opening curly brace ({) and end with a closing curly brace (}). Between these, you can add names and their associated values. Each name-value pair is separated by a comma (,). Around strings (text) you wrap two quotation marks (\u0026quot;\u0026quot;), but nothing around integers (whole numbers) or booleans (true or false values). You can play around with this a bit.\nSome special characters need to be prefixed with a backslash in strings to indicate that they aren\u0026rsquo;t part of the JSON syntax:\nSpecial character Escaped input Quotation mark (\u0026quot;) \\\u0026quot; Backslash (\\) \\\\ Slash (/) \\/ Backspace \\b Form feed \\f New line \\n Carriage return \\r Horizontal tab \\t Unicode character \\uXXXX Create embeds with a generator Creating embeds with a generator can be more difficult if you don\u0026rsquo;t need any difficult features. If you want your embed to be super shiny, you can use an embed generator. The customembed command only sends an embed, so you\u0026rsquo;ll need to remove everything around it:\n{ \u0026#34;content\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;embed\u0026#34;: and the last curly brace (}). After this you can copy and paste it after the ce command:\nEmbeds in Custom Commands Embeds in custom commands are a little more involved. To start off, we\u0026rsquo;ll take a look at this example and break it down:\n{{ $embed := cembed \u0026#34;title\u0026#34; \u0026#34;This is my title\u0026#34; \u0026#34;description\u0026#34; \u0026#34;This is my description.\u0026#34; }} {{ sendMessage nil $embed }} First off, I start creating my embed by defining it in a variable called embed in the well-known templating curly braces. This makes it a bit clearer as your embed can get difficult to read. After this I start my embed object with cembed (custom embed) to indicate what the following strings mean. We don\u0026rsquo;t follow the json syntax here and only define everything one after the other (\u0026quot;name\u0026quot; \u0026ldquo;value\u0026rdquo; et cetera). Now we use the objects for discord embeds from the developer page again. So far, so good. In the end we send our embed with the sendMessage template. nil sends it in the same channel, but you could also replace it with a channel name or ID (or send the embed with sendDM as a direct message).\nNext, we\u0026rsquo;ll take a look at this more lavish example:\nNote: Indentation is Your Friend\nTo make your code readable, especially for large embeds, indents may be used, as YAGPDB\u0026rsquo;s templating system allows this sort of formatting.\nCustom Command \u0026ldquo;embed\u0026rdquo;\n{{ $advice := execAdmin \u0026#34;advice\u0026#34; }} {{ $topic := execAdmin \u0026#34;topic\u0026#34; }} {{ $catfact := execAdmin \u0026#34;catfact\u0026#34; }} {{ $avatar := print \u0026#34;https://cdn.discordapp.com/avatars/\u0026#34; .User.ID \u0026#34;/\u0026#34; .User.Avatar \u0026#34;.png\u0026#34; }} {{ $botAvatar := .BotUser.AvatarURL \u0026#34;512\u0026#34; }} {{ $embed := cembed \u0026#34;title\u0026#34; (print \u0026#34;Hello there, \u0026#34; .User.Username \u0026#34;!\u0026#34;) \u0026#34;url\u0026#34; (.User.AvatarURL \u0026#34;512\u0026#34;) \u0026#34;description\u0026#34; \u0026#34;This is an embed in a custom command. To see the code behind it, do `-cc embed`.\u0026#34; \u0026#34;color\u0026#34; 4645612 \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;name\u0026#34; \u0026#34;Advice\u0026#34; \u0026#34;value\u0026#34; $advice \u0026#34;inline\u0026#34; false) (sdict \u0026#34;name\u0026#34; \u0026#34;Topic\u0026#34; \u0026#34;value\u0026#34; $topic \u0026#34;inline\u0026#34; false) (sdict \u0026#34;name\u0026#34; \u0026#34;Cat Fact\u0026#34; \u0026#34;value\u0026#34; $catfact \u0026#34;inline\u0026#34; false) (sdict \u0026#34;name\u0026#34; \u0026#34;Member Count\u0026#34; \u0026#34;value\u0026#34; (toString .Guild.MemberCount) \u0026#34;inline\u0026#34; true) (sdict \u0026#34;name\u0026#34; \u0026#34;Guild ID\u0026#34; \u0026#34;value\u0026#34; (toString .Guild.ID) \u0026#34;inline\u0026#34; true) ) \u0026#34;author\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;YAGPDB.xyz!\u0026#34; \u0026#34;url\u0026#34; \u0026#34;https://yagpdb.xyz/manage\u0026#34; \u0026#34;icon_url\u0026#34; (.BotUser.AvatarURL \u0026#34;512\u0026#34;) ) \u0026#34;thumbnail\u0026#34; (sdict \u0026#34;url\u0026#34; $avatar) \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; $botAvatar) \u0026#34;footer\u0026#34; (sdict \u0026#34;text\u0026#34; \u0026#34;YAGPDB.xyz since\u0026#34; \u0026#34;icon_url\u0026#34; $botAvatar) \u0026#34;timestamp\u0026#34; .Member.JoinedAt }} {{/* this line is here to show raw cembed output */}} {{ $embed }} {{ sendMessage nil $embed }} In this example, we can ignore lines 1 to 5. I\u0026rsquo;m just defining some variables there which I am later using in my embed. One thing to notice is the two ways of getting user\u0026rsquo;s avatar URL for variables $avatar and $botAvatar. Line 7 starts with our already known definition of the embed. Then I start with the first object, the title. Notice how I use print to join two strings (text snippets) together.\nNext, we have the description. We can use markdown of Discord in here. After that object, I define the color. The color is given as integer and you can convert a hex color to it using BinaryHex Converter, for example.\nUp next, I have added some fields. This is a bit more difficult, but doable if you have understood it once. Let\u0026rsquo;s break it down in this example:\n\u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;name\u0026#34; \u0026#34;Title of field 1\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Description of field 1\u0026#34; \u0026#34;inline\u0026#34; false) (sdict \u0026#34;name\u0026#34; \u0026#34;Title of field 2\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Description of field 2\u0026#34; \u0026#34;inline\u0026#34; false) ) This would add two fields being displayed under each other. If you set inline to true, they would try to get displayed next to each other. You can add multiple fields with sdict.\nFollowing the fields I have added the author. Again the author object is nested and can have up to four fields. For this, we use sdict again. I define the name, the url and the icon url for it. The same applies to the avatar and footer. In the end I use .Guild.JoinedAt as timestamp to display when the first person joined this server and close the template. After this we just have to send the embed using SendMessage or SendDM. Here is our result:\nDisplay an image You can display an image by simply pasting the link to it in the response, or by doing it fancy this way (make sure to replace the link with your own image):\nTrigger type: command trigger: imageembed\n{{ $embed := cembed \u0026#34;image\u0026#34; (sdict \u0026#34;url\u0026#34; \u0026#34;https://i.imgur.com/ttIwOmn.png\u0026#34;) }} {{ sendMessage nil $embed }} Using colors Discord uses color decimal. SpyColor is a good tool to pick colors, or convert hex to decimal.\nThe simpleembed command Simple embeds are easier to use than custom embeds as they do not require any knowledge of json. Their downside is that they don\u0026rsquo;t support all Discord embed fields from the embed structure, for example fields. You can create a simple embed with the simpleembed command, se for short.\nSimple embeds work with switches, here is a list of them all:\nSwitch Description -channel Optional channel to send in. -message Optional message ID to edit. -content Text content for the message. -title Title field. -desc Description field. -color Color field, either in hex or a color name. -url URL field for embed. -thumbnail URL to an image for thumbnail field. -image URL to an image. -author Author field. -authoricon URL for the icon in \u0026lsquo;author\u0026rsquo; field. -authorurl Url of the \u0026lsquo;author\u0026rsquo; field -footer Footer field. -footericon URL to an image for footer icon field. The values for simple embeds need to bet placed within quotes:\n-se -title \u0026#34;This is my title\u0026#34; -desc \u0026#34;This is my description\u0026#34; -thumbnail \u0026#34;https://via.placeholder.com/300/\u0026#34; This generates the following embed:\nYou can play around with this command a bit, it\u0026rsquo;s really easy to use.\n","date":"0001-01-01","id":62,"permalink":"/docs/reference/custom-embeds/","summary":"\u003cp\u003eA guide to creating custom embeds in various contexts across YAGPDB.\u003c/p\u003e","tags":[],"title":"Custom Embeds"},{"content":"\rNote\nThis page is just an overview about the most important core concepts of custom interactions. We have included some code samples for quick reference, but this is by no means a complete guide from the grounds up. For an in-depth guide, please refer to our learning resources.\nThe Basics Interactions within Discord allow server members to use alternative, built-in features to trigger bots to take action other than messages or reactions. These features include builtin buttons, dropdown selection menus, or submitting a modal (basically a pop-up form). Within custom commands it is possible to not only create and customize these new interactive features, but respond to them as well, opening up new possibilities for ephemeral message responses, modals, and more.\nInteraction Lifetime An interaction\u0026rsquo;s lifetime starts with the initial interaction with an interactive element.\nA server member clicks on a button, uses a menu, or submits a modal after filling it out. This interaction is sent to YAGPDB, and becomes available to trigger any custom commands which match it. Within the triggered custom command(s), YAGPDB should then respond once to the interaction, sending a message, updating the triggering message, or sending a modal. This may only be done within the CC which was triggered by the interaction. (optional) Continue to send followup responses for up to 15 minutes until the interaction token expires. graph LR; A[Button pressed] --\u003e B{CC Triggered} C[Menu used] --\u003e B D[Modal submitted] --\u003e B B --\u003e E[Bot sends message response] B --\u003e G[Bot sends modal response] B --\u003e H[Bot updates message] E -.-\u003e F(Bot sends followups) G -.-\u003e F H -.-\u003e F Custom IDs Custom IDs are used to identify the respective element a user interacted with. You use them to trigger custom commands with the message component or modal submission trigger. Custom IDs must be unique for every component attached to the message.\nComponents Buttons See also the Discord API documentation on button objects.\nButtons can be created as either an sdict or via cbutton. In custom commands they can have five different styles, listed in the table below. For your convenience, YAGPDB also accepts the style as a string-alias, so you can use \u0026quot;primary\u0026quot; instead of 1, \u0026quot;secondary\u0026quot; instead of 2, and so on.\nStyle Alias Description 1 primary Primary button, the most important or recommended action. 2 secondary Secondary button, alternative or supporting actions. 3 success Success button, green color, used for positive actions. 4 danger Danger button, red color, used for negative actions. 5 link Link button, opens a URL when clicked. A button is structured according to the following table; label, emoji and disabled are optional fields. style will default to 1 (primary) if not specified. Link style buttons cannot have a custom ID and must have a URL specified.\nField Description custom_id Identifier for the button, used to trigger a custom command when clicked. style The button\u0026rsquo;s style, defaults to primary. disabled? Whether the button is disabled. Defaults to false. emoji? A [partial emoji] to display on the button. label? The button\u0026rsquo;s label, appears on the button itself. url? Only available for URL-style buttons. Opens the URL when clicked. The below code will send a message with multiple buttons attached to it.\n{{ $button1 := cbutton \u0026#34;label\u0026#34; \u0026#34;Duck One\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck-alpha\u0026#34; \u0026#34;style\u0026#34; \u0026#34;success\u0026#34; }} {{ $button2 := cbutton \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;) \u0026#34;custom_id\u0026#34; \u0026#34;buttons-duck-beta\u0026#34; \u0026#34;style\u0026#34; \u0026#34;danger\u0026#34; }} {{ $button3 := cbutton \u0026#34;label\u0026#34; \u0026#34;Duck Three\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;) \u0026#34;url\u0026#34; \u0026#34;https://yagpdb.xyz\u0026#34; \u0026#34;style\u0026#34; \u0026#34;link\u0026#34; }} {{ $message := complexMessage \u0026#34;buttons\u0026#34; (cslice $button1 $button2 $button3) }} {{ sendMessage nil $message }} Select Menus Select menus allow users to select one or more options from a dropdown list. They can be created as either an sdict or using the cmenu function.\nSelect Menu Types Select menus can have one of the types listed in the table below. The channel type can be further customized to only show certain channel types using the channel_types field, which accepts a slice of integers representing allowed channel types.\nType Description channel A list of channels in the server, automatically populated by Discord. mentionable A list of users and roles that can be mentioned, automatically populated by Discord. role A list of roles of the server, automatically populated by Discord. text A simple dropdown menu with custom text options. user A list of users part of the server, automatically populated by Discord. Select Menu Option A select menu option for the text type has the structure as outlined in the table below. A text menu may not have more than 25 options.\nField Description label The text displayed in the dropdown menu. value The value returned when the option is selected, used to trigger a custom command. default? Whether the option is selected by default. Defaults to false. description? An optional description of the option, displayed when opening the menu. emoji? An optional [partial emoji] to display next to the option. Default Value Structure The user, role, and channel type allow for a slice of default_values to be specified. Below is their structure.\nField Description id The ID of the user, role, or channel to be selected by default. type The type of the default value, one of user, role, or channel. Select Menu Structure A select menu is structured according to the table below. The custom_id field is required for all select menus. Text type menus must have at least one option, while all other types cannot have any options.\nField Description type The type of the select menu, one of the types listed above. custom_id Identifier for the select menu, used to trigger a custom command when an option is selected. channel_types? A slice of integers representing allowed channel types, only for channel type menus. default_values? A slice of values that should be selected by default, if applicable. Not for text type menus. disabled? Whether the select menu is disabled. Defaults to false. max_values? The maximum number of options that can be selected, default to the number of options available. min_values? The minimum number of options that can be selected, defaults to 1. options? A slice of select menu options, as outlined above. placeholder? An optional placeholder text displayed when no option is selected. Putting it all together, a text select menu with three options, one of which is selected by default, could look something like this.\n{{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;text\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose a terrible thing\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck\u0026#34; \u0026#34;options\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Two Ducks\u0026#34; \u0026#34;value\u0026#34; \u0026#34;opt-1\u0026#34; \u0026#34;default\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;A Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;duck-option\u0026#34; \u0026#34;emoji\u0026#34; (sdict \u0026#34;name\u0026#34; \u0026#34;🦆\u0026#34;)) (sdict \u0026#34;label\u0026#34; \u0026#34;Half a Duck\u0026#34; \u0026#34;value\u0026#34; \u0026#34;third-option\u0026#34; \u0026#34;description\u0026#34; \u0026#34;Don\u0026#39;t let the smaller amount fool you.\u0026#34;)) }} {{ sendMessage nil (complexMessage \u0026#34;menus\u0026#34; $menu) }} Similarly, a channel select menu that allows users to select at most two channels, and only allows forum and announcement channels could be created with the following code.\n{{ $issuesChannel := \u0026#34;1210135699135926312\u0026#34; }} {{ $updatesChannel := \u0026#34;1210135938722693151\u0026#34; }} {{ $menu := cmenu \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Choose channels which are secretly duck hideouts\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;menus-duck-channels\u0026#34; \u0026#34;default_values\u0026#34; (cslice (sdict \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34; \u0026#34;id\u0026#34; $issuesChannel) (sdict \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34; \u0026#34;id\u0026#34; $updatesChannel) ) \u0026#34;max_values\u0026#34; 3 \u0026#34;channel_types\u0026#34; (cslice 5 15) }} {{ sendMessage nil (complexMessage \u0026#34;menus\u0026#34; $menu) }} Modals Modals can be created as either an sdict or a cmodal. After being created they are subsequently sent with sendModal. Sending a modal is a response to an interaction, meaning it can only be sent once after a user clicks a button or uses a select menu. You cannot send a modal as a response to a user submitting a modal.\nModal Input Fields Modals can have multiple text input fields, which allow users to input text in a structured way.\nField Description label The label of the text input, appears above the input field. max_length? The maximum length of the input. min_length? The minimum length of the input, defaults to 0 (no minimum). placeholder? An optional placeholder text displayed in the input field when it is empty. required? Whether the input field is required, defaults to false. style? The style of the text input, one of 1 (short, default), 2 (paragraph) value? The default value of the input field, appears in the input field when it is empty. Modal Structure Field Description title The modal\u0026rsquo;s title, appears at the top of the modal while a user is filling it out. custom_id The custom ID of this modal. fields A slice of modal input fields as outlined above. {{ $modal := sdict \u0026#34;title\u0026#34; \u0026#34;My Custom Modal\u0026#34; \u0026#34;custom_id\u0026#34; \u0026#34;modals-my_first_modal\u0026#34; \u0026#34;fields\u0026#34; (cslice (sdict \u0026#34;label\u0026#34; \u0026#34;Name\u0026#34; \u0026#34;placeholder\u0026#34; \u0026#34;Duck\u0026#34; \u0026#34;required\u0026#34; true) (sdict \u0026#34;label\u0026#34; \u0026#34;Do you like ducks?\u0026#34; \u0026#34;value\u0026#34; \u0026#34;Heck no\u0026#34;) (sdict \u0026#34;label\u0026#34; \u0026#34;Duck hate essay\u0026#34; \u0026#34;min_length\u0026#34; 100 \u0026#34;style\u0026#34; 2)) }} {{ sendModal $modal }} Parsing an Interaction Custom Commands with the Message Component or Modal Submission trigger allow you to take action upon the press of a button, use of a select menu, or completion of a modal form. Interaction triggers provide new context data for templating.\nField Description .Interaction.Token The interaction\u0026rsquo;s token. Is unique to each interaction. Required for sending followup interactions. .CustomID The triggering component/modal\u0026rsquo;s Custom ID. Note: This custom ID excludes the templates- prefix which is added to all components and modals under the hood. .StrippedID \u0026ldquo;Strips\u0026rdquo; or cuts off the triggering part of the custom ID and prints out everything else after that. Bear in mind, when using regex as trigger, for example \u0026quot;day\u0026quot; and input custom ID is \u0026quot;have-a-nice-day-my-dear-YAG\u0026quot; output will be \u0026quot;-my-dear-YAG\u0026quot; \u0026mdash; rest is cut off. .Values List of all options selected with a select menu, OR all values input into a modal in order. Interaction object and context data\n.Interaction.Token must be provided to any followup functions you decide to use later. If you are using these in subsequent script executions, it\u0026rsquo;s a good idea to save this to database when the interaction occurs.\n.CustomID can be used to identify which component or modal triggered the command. .StrippedID can be used to quickly parse out arguments in your custom ID, and use them in your response.\n.Values is used to capture values a user selected in a select menu or submitted to a modal. When creating a select menu and defining the options, the \u0026quot;value\u0026quot; field for each option defines which values will show up in this slice if chosen, in the order the user selected them. A modal\u0026rsquo;s values are simply the values of each field in order.\nNote: Values Order\nBecause the .Values slice when interacting with select menus is ordered by the order the user selected the options, you generally cannot simply index into the slice; you\u0026rsquo;ll have to search for the value you want to use.\nResponding to an Interaction Initial Response While technically not required, responding to an interaction with one of Discord\u0026rsquo;s allotted initial responses is crucial if you don\u0026rsquo;t want your users to see an error after interacting. An interaction may be responded to only once.\nYou can only respond to an interaction within the custom command triggered by said interaction, with the exception that a CC executed with execCC by the triggered CC will be able to send initial responses to the triggering interaction as well.\nPossible initial responses:\nOutput text in your script response field. This text will be sent as an interaction response. You can even use the ephemeralResponse function to turn it ephemeral. Use the sendResponse function to send a response as soon as the function runs. You can also use this to send embeds or complexMessages. You\u0026rsquo;ll need to send a complexMessage and pass it \u0026quot;ephemeral\u0026quot; true as an argument to send ephemeral messages. sendResponse comes in NoEscape and RetID variants too. When sending an initial response, sendResponse does not need an interaction token, nil can be used. Use the sendModal function to show the user a modal. You cannot respond to a user submitting a modal by sending them another modal. Use the updateMessage function to edit the message the command triggered from. This works the same way as editing a message, however because it automatically targets the triggering message, the only argument required is the new message. Interaction Function documentation\nFollowing Up Followups allow you to continue responding to an interaction after the initial response has been made. You can followup for up to 15 minutes after the user interacts, and you can follow up as many times as you\u0026rsquo;d like. Followups require the interaction token of the interaction they should be following up on.\nPossible followups:\nOutput text in your script response field. This text will be sent as an interaction followup. You can even use the ephemeralResponse function to turn it ephemeral. Use the sendResponse function to send a followup as soon as the function runs. Note that this function morphs into sending followups if an initial response has already been made. You can also use this to send embeds or complexMessages. sendResponse comes in NoEscape and RetID variants too. It\u0026rsquo;s important to capture the message ID of any followups you\u0026rsquo;ll want to edit or retrieve later, especially if you follow up ephemerally. If you follow up ephemerally without saving the message ID, you\u0026rsquo;ll never be able to interface with that message again. Use the editResponse function to edit an initial response or a followup message. When editing an initial response, the messageID argument should be nil. When editing a followup message, the messageID argument is required. You can still edit any initial responses or followups using the standard editMessage function as long as they aren\u0026rsquo;t ephemeral. Use the getResponse function to get an initial response or a followup message. When getting an initial response, the messageID argument should be nil. When getting a followup message, the messageID argument is required. You can still get any initial responses or followups using the standard getMessage function as long as they aren\u0026rsquo;t ephemeral. Interaction Function documentation\nAction Rows Action rows are a way to group multiple components together, such as buttons or select menus, into a single row. This allows for better organization and layout of interactive elements in a message. Action rows are not a separate type of interaction, but rather a structured approach to handling components.\nAction rows are simply a slice of components, which can be buttons or select menus. Consider the following example:\n{{ $row1 := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 1\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 2\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 3\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 1 - Button 4\u0026#34;) }} {{ $row2 := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 2 - Button 1\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 2 - Button 1\u0026#34;) }} {{ $row3 := cslice (cmenu \u0026#34;type\u0026#34; \u0026#34;mentionable\u0026#34;) }} {{ $row4 := cslice (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 3 - Button 1\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 3 - Button 2\u0026#34;) (cbutton \u0026#34;label\u0026#34; \u0026#34;Row 3 - Button 3\u0026#34;) }} {{ $row5 := cslice (cmenu \u0026#34;type\u0026#34; \u0026#34;channel\u0026#34;) }} {{ $rows := cslice $row1 $row2 $row3 $row4 $row5 }} {{ $message := complexMessage \u0026#34;components\u0026#34; $rows }} {{ sendMessage nil $message }} This will nicely format our components, like shown in the screenshot below.\n","date":"0001-01-01","id":63,"permalink":"/docs/reference/custom-interactions/","summary":"\u003cdiv class=\"callout callout-note d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/info-circle svg-inline callout-icon me-2 mb-3\" id=\"svg-info-circle\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0\" /\u003e\n  \u003cpath d=\"M12 9h.01\" /\u003e\n  \u003cpath d=\"M11 12h1v4h1\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eNote\u003c/p\u003e\n\r\n      \u003c/div\u003e\r\n    \u003cdiv class=\"callout-body\"\u003e\r\n      \u003cp\u003eThis page is just an overview about the most important core concepts of custom interactions. We have included some code\nsamples for quick reference, but this is by no means a complete guide from the grounds up. For an in-depth guide,\nplease refer to our \u003ca href=\"/learn/advanced/custom-interactions/introduction/\"\u003elearning resources\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"Custom Interactions"},{"content":"Details on obtaining IDs for users, channels, roles, etc. for use within YAGPDB.\nUser IDs Can be found by mentioning the user then adding a \\ such as \\@YAGPDB.xyz#8760. Alternatively if you have developer mode on, you can right-click and select Copy ID. How to enable developer mode in Discord\nChannel IDs Can be found by mentioning the channel then adding a \\ such as \\#announcements. Alternatively if you have developer mode on, you can right-click on the channel and select Copy ID.\nRole IDs Use the listroles command.\nEmoji IDs If it is a custom emoji, adding a \\ in front of the emoji such as \\:yag: will display the name along with the ID such as \u0026lt;:yag:277569741932068864\u0026gt;. On an Android device remove backslash and enclose :yag: inside backticks `:yag:`.\nIf it is an animated emoji, do the same steps as a normal emoji. If you do not have Discord Nitro, you can have a friend or a bot use the emoji and right-click on the emoji to open its link. The ID will be a part of the URL.\nIf it is a default emoji, look up the Unicode for the emoji on Google. Note that some of the more customized default emojis such as some of the family emojis will not work in any of the YAGPDB commands.\n","date":"0001-01-01","id":64,"permalink":"/docs/reference/how-to-get-ids/","summary":"\u003cp\u003eDetails on obtaining IDs for users, channels, roles, etc. for use within YAGPDB.\u003c/p\u003e\n\u003ch3 id=\"user-ids\"\u003eUser IDs\u003c/h3\u003e\n\u003cp\u003eCan be found by mentioning the user then adding a \\ such as \u003ccode\u003e\\@YAGPDB.xyz#8760\u003c/code\u003e. Alternatively if you have\ndeveloper mode on, you can right-click and select Copy ID. \u003ca href=\"https://support.discordapp.com/hc/en-us/articles/206346498\" rel=\"external\"\u003eHow to enable developer mode in Discord\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"channel-ids\"\u003eChannel IDs\u003c/h3\u003e\n\u003cp\u003eCan be found by mentioning the channel then adding a \\ such as \u003ccode\u003e\\#announcements\u003c/code\u003e. Alternatively if you\nhave developer mode on, you can right-click on the channel and select Copy ID.\u003c/p\u003e","tags":[],"title":"How to Get IDs"},{"content":"A quick overview of golang flavored RegEx for your convenience.\nFull RE2 syntax reference at \u0026gt; https://github.com/google/re2/wiki/Syntax\nGo RegExp doc at \u0026gt; https://golang.org/pkg/regexp/\nMore about general concepts \u0026gt; https://www.regular-expressions.info/\nBasic Regex Basics of Regular Expressions Match You can match a word by putting it between two brackets.\nAs example, this will only match the word \u0026ldquo;Dinosaur\u0026rdquo;: (Dinosaur)\nDon\u0026rsquo;t match Using ?: after opening parenthesis of a capturing group creates a non-capturing group. Useful for example with template function reFindAllSubmatches.\nThis will not sub-match the words \u0026ldquo;red, blue, green\u0026rdquo;: {{ reFindAllSubmatches `(?:color=)(red|blue|green)` \u0026quot;color=red beautiful\u0026quot; }} To clarify more - it will not show dateid, because it\u0026rsquo;s a whole match:\n{{ slice (index (reFindAllSubmatches `(?:dateid=)([0-9]{5})` \u0026quot;dateid=12345\u0026quot;) 0) 1 }}\nMatch A or B You may also want to catch multiple options, for that we use a \u0026ldquo;Vertical bar\u0026rdquo; or also known as a \u0026ldquo;Pipe\u0026rdquo; between Linux users.\nAs example, this will match if either \u0026ldquo;Cat\u0026rdquo; or \u0026ldquo;Dog\u0026rdquo; is present: (Cat|Dog)\nTo match anything of any length, use .*.\nCharacter classes Words To match a word, you put it between two brackets. Example: (Banana)\nCharacters For matching characters there are multiple options:\nMatching specific characters For matching a specific character, you put them in square brackets.\nThis will match A, B and C: ([abc])\nThis will match every character from A-z: ([A-z])\nThis will match every number: ([0-9])\nSpecial Characters Sometimes you have to use special characters but it may cause conflicts. In this case, you will have to use an escape character.\nFor example, this is a star that doesn\u0026rsquo;t interfere with other matches \\*.\nUnderstanding Regex If you still do not know what Regex are or want to know more. Check out the cheat sheet on the site below.\ncomputerhope.com\nGreat tools for writing and testing Regex regex101.com\n","date":"0001-01-01","id":65,"permalink":"/docs/reference/using-regex/","summary":"\u003cp\u003eA quick overview of golang flavored RegEx for your convenience.\u003c/p\u003e","tags":[],"title":"Using RegEx"},{"content":"","date":"0001-01-01","id":66,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":67,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":" ","date":"0001-01-01","id":68,"permalink":"/discord/","summary":"\u003c!--\nThis file intentionally left blank.\nWe use YAML front matter here instead of the usual TOML just so markdownlint can properly lint for blank URLs in other\nfiles without firing on this one.\n--\u003e","tags":[],"title":"Discord"},{"content":"","date":"0001-01-01","id":69,"permalink":"/docs/","summary":"","tags":[],"title":"Documentation"},{"content":"","date":"0001-01-01","id":70,"permalink":"/learn/","summary":"","tags":[],"title":"Learning Resources"},{"content":"","date":"0001-01-01","id":71,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"},{"content":"","date":"0001-01-01","id":72,"permalink":"/","summary":"","tags":[],"title":"YAGPDB Help Center"}]